
AI_Analog_SHARP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a024  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001750  0800a1c0  0800a1c0  0001a1c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b910  0800b910  0002071c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b910  0800b910  0001b910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b918  0800b918  0002071c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b918  0800b918  0001b918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b91c  0800b91c  0001b91c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000071c  20000000  0800b920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  2000071c  0800c03c  0002071c  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20000bd8  0800c03c  00020bd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002071c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000203a9  00000000  00000000  0002074c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c38  00000000  00000000  00040af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  00044730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001378  00000000  00000000  00045c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cda0  00000000  00000000  00046fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b989  00000000  00000000  00073d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113d34  00000000  00000000  0008f6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  001a3425  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061e4  00000000  00000000  001a34f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000009c  00000000  00000000  001a96d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  001a9774  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000071c 	.word	0x2000071c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a19c 	.word	0x0800a19c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000720 	.word	0x20000720
 80001cc:	0800a19c 	.word	0x0800a19c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__gedf2>:
 80005e8:	f04f 3cff 	mov.w	ip, #4294967295
 80005ec:	e006      	b.n	80005fc <__cmpdf2+0x4>
 80005ee:	bf00      	nop

080005f0 <__ledf2>:
 80005f0:	f04f 0c01 	mov.w	ip, #1
 80005f4:	e002      	b.n	80005fc <__cmpdf2+0x4>
 80005f6:	bf00      	nop

080005f8 <__cmpdf2>:
 80005f8:	f04f 0c01 	mov.w	ip, #1
 80005fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000600:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000604:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000608:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800060c:	bf18      	it	ne
 800060e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000612:	d01b      	beq.n	800064c <__cmpdf2+0x54>
 8000614:	b001      	add	sp, #4
 8000616:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800061a:	bf0c      	ite	eq
 800061c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000620:	ea91 0f03 	teqne	r1, r3
 8000624:	bf02      	ittt	eq
 8000626:	ea90 0f02 	teqeq	r0, r2
 800062a:	2000      	moveq	r0, #0
 800062c:	4770      	bxeq	lr
 800062e:	f110 0f00 	cmn.w	r0, #0
 8000632:	ea91 0f03 	teq	r1, r3
 8000636:	bf58      	it	pl
 8000638:	4299      	cmppl	r1, r3
 800063a:	bf08      	it	eq
 800063c:	4290      	cmpeq	r0, r2
 800063e:	bf2c      	ite	cs
 8000640:	17d8      	asrcs	r0, r3, #31
 8000642:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000646:	f040 0001 	orr.w	r0, r0, #1
 800064a:	4770      	bx	lr
 800064c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000650:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000654:	d102      	bne.n	800065c <__cmpdf2+0x64>
 8000656:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800065a:	d107      	bne.n	800066c <__cmpdf2+0x74>
 800065c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000660:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000664:	d1d6      	bne.n	8000614 <__cmpdf2+0x1c>
 8000666:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800066a:	d0d3      	beq.n	8000614 <__cmpdf2+0x1c>
 800066c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop

08000674 <__aeabi_cdrcmple>:
 8000674:	4684      	mov	ip, r0
 8000676:	4610      	mov	r0, r2
 8000678:	4662      	mov	r2, ip
 800067a:	468c      	mov	ip, r1
 800067c:	4619      	mov	r1, r3
 800067e:	4663      	mov	r3, ip
 8000680:	e000      	b.n	8000684 <__aeabi_cdcmpeq>
 8000682:	bf00      	nop

08000684 <__aeabi_cdcmpeq>:
 8000684:	b501      	push	{r0, lr}
 8000686:	f7ff ffb7 	bl	80005f8 <__cmpdf2>
 800068a:	2800      	cmp	r0, #0
 800068c:	bf48      	it	mi
 800068e:	f110 0f00 	cmnmi.w	r0, #0
 8000692:	bd01      	pop	{r0, pc}

08000694 <__aeabi_dcmpeq>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff fff4 	bl	8000684 <__aeabi_cdcmpeq>
 800069c:	bf0c      	ite	eq
 800069e:	2001      	moveq	r0, #1
 80006a0:	2000      	movne	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_dcmplt>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff ffea 	bl	8000684 <__aeabi_cdcmpeq>
 80006b0:	bf34      	ite	cc
 80006b2:	2001      	movcc	r0, #1
 80006b4:	2000      	movcs	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_dcmple>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffe0 	bl	8000684 <__aeabi_cdcmpeq>
 80006c4:	bf94      	ite	ls
 80006c6:	2001      	movls	r0, #1
 80006c8:	2000      	movhi	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_dcmpge>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffce 	bl	8000674 <__aeabi_cdrcmple>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_dcmpgt>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffc4 	bl	8000674 <__aeabi_cdrcmple>
 80006ec:	bf34      	ite	cc
 80006ee:	2001      	movcc	r0, #1
 80006f0:	2000      	movcs	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_uldivmod>:
 80006f8:	b953      	cbnz	r3, 8000710 <__aeabi_uldivmod+0x18>
 80006fa:	b94a      	cbnz	r2, 8000710 <__aeabi_uldivmod+0x18>
 80006fc:	2900      	cmp	r1, #0
 80006fe:	bf08      	it	eq
 8000700:	2800      	cmpeq	r0, #0
 8000702:	bf1c      	itt	ne
 8000704:	f04f 31ff 	movne.w	r1, #4294967295
 8000708:	f04f 30ff 	movne.w	r0, #4294967295
 800070c:	f000 b96e 	b.w	80009ec <__aeabi_idiv0>
 8000710:	f1ad 0c08 	sub.w	ip, sp, #8
 8000714:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000718:	f000 f806 	bl	8000728 <__udivmoddi4>
 800071c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000724:	b004      	add	sp, #16
 8000726:	4770      	bx	lr

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	4604      	mov	r4, r0
 8000730:	468c      	mov	ip, r1
 8000732:	2b00      	cmp	r3, #0
 8000734:	f040 8083 	bne.w	800083e <__udivmoddi4+0x116>
 8000738:	428a      	cmp	r2, r1
 800073a:	4617      	mov	r7, r2
 800073c:	d947      	bls.n	80007ce <__udivmoddi4+0xa6>
 800073e:	fab2 f282 	clz	r2, r2
 8000742:	b142      	cbz	r2, 8000756 <__udivmoddi4+0x2e>
 8000744:	f1c2 0020 	rsb	r0, r2, #32
 8000748:	fa24 f000 	lsr.w	r0, r4, r0
 800074c:	4091      	lsls	r1, r2
 800074e:	4097      	lsls	r7, r2
 8000750:	ea40 0c01 	orr.w	ip, r0, r1
 8000754:	4094      	lsls	r4, r2
 8000756:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800075a:	0c23      	lsrs	r3, r4, #16
 800075c:	fbbc f6f8 	udiv	r6, ip, r8
 8000760:	fa1f fe87 	uxth.w	lr, r7
 8000764:	fb08 c116 	mls	r1, r8, r6, ip
 8000768:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800076c:	fb06 f10e 	mul.w	r1, r6, lr
 8000770:	4299      	cmp	r1, r3
 8000772:	d909      	bls.n	8000788 <__udivmoddi4+0x60>
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	f106 30ff 	add.w	r0, r6, #4294967295
 800077a:	f080 8119 	bcs.w	80009b0 <__udivmoddi4+0x288>
 800077e:	4299      	cmp	r1, r3
 8000780:	f240 8116 	bls.w	80009b0 <__udivmoddi4+0x288>
 8000784:	3e02      	subs	r6, #2
 8000786:	443b      	add	r3, r7
 8000788:	1a5b      	subs	r3, r3, r1
 800078a:	b2a4      	uxth	r4, r4
 800078c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000790:	fb08 3310 	mls	r3, r8, r0, r3
 8000794:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000798:	fb00 fe0e 	mul.w	lr, r0, lr
 800079c:	45a6      	cmp	lr, r4
 800079e:	d909      	bls.n	80007b4 <__udivmoddi4+0x8c>
 80007a0:	193c      	adds	r4, r7, r4
 80007a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007a6:	f080 8105 	bcs.w	80009b4 <__udivmoddi4+0x28c>
 80007aa:	45a6      	cmp	lr, r4
 80007ac:	f240 8102 	bls.w	80009b4 <__udivmoddi4+0x28c>
 80007b0:	3802      	subs	r0, #2
 80007b2:	443c      	add	r4, r7
 80007b4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007b8:	eba4 040e 	sub.w	r4, r4, lr
 80007bc:	2600      	movs	r6, #0
 80007be:	b11d      	cbz	r5, 80007c8 <__udivmoddi4+0xa0>
 80007c0:	40d4      	lsrs	r4, r2
 80007c2:	2300      	movs	r3, #0
 80007c4:	e9c5 4300 	strd	r4, r3, [r5]
 80007c8:	4631      	mov	r1, r6
 80007ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ce:	b902      	cbnz	r2, 80007d2 <__udivmoddi4+0xaa>
 80007d0:	deff      	udf	#255	; 0xff
 80007d2:	fab2 f282 	clz	r2, r2
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d150      	bne.n	800087c <__udivmoddi4+0x154>
 80007da:	1bcb      	subs	r3, r1, r7
 80007dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007e0:	fa1f f887 	uxth.w	r8, r7
 80007e4:	2601      	movs	r6, #1
 80007e6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ea:	0c21      	lsrs	r1, r4, #16
 80007ec:	fb0e 331c 	mls	r3, lr, ip, r3
 80007f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007f4:	fb08 f30c 	mul.w	r3, r8, ip
 80007f8:	428b      	cmp	r3, r1
 80007fa:	d907      	bls.n	800080c <__udivmoddi4+0xe4>
 80007fc:	1879      	adds	r1, r7, r1
 80007fe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000802:	d202      	bcs.n	800080a <__udivmoddi4+0xe2>
 8000804:	428b      	cmp	r3, r1
 8000806:	f200 80e9 	bhi.w	80009dc <__udivmoddi4+0x2b4>
 800080a:	4684      	mov	ip, r0
 800080c:	1ac9      	subs	r1, r1, r3
 800080e:	b2a3      	uxth	r3, r4
 8000810:	fbb1 f0fe 	udiv	r0, r1, lr
 8000814:	fb0e 1110 	mls	r1, lr, r0, r1
 8000818:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800081c:	fb08 f800 	mul.w	r8, r8, r0
 8000820:	45a0      	cmp	r8, r4
 8000822:	d907      	bls.n	8000834 <__udivmoddi4+0x10c>
 8000824:	193c      	adds	r4, r7, r4
 8000826:	f100 33ff 	add.w	r3, r0, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x10a>
 800082c:	45a0      	cmp	r8, r4
 800082e:	f200 80d9 	bhi.w	80009e4 <__udivmoddi4+0x2bc>
 8000832:	4618      	mov	r0, r3
 8000834:	eba4 0408 	sub.w	r4, r4, r8
 8000838:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800083c:	e7bf      	b.n	80007be <__udivmoddi4+0x96>
 800083e:	428b      	cmp	r3, r1
 8000840:	d909      	bls.n	8000856 <__udivmoddi4+0x12e>
 8000842:	2d00      	cmp	r5, #0
 8000844:	f000 80b1 	beq.w	80009aa <__udivmoddi4+0x282>
 8000848:	2600      	movs	r6, #0
 800084a:	e9c5 0100 	strd	r0, r1, [r5]
 800084e:	4630      	mov	r0, r6
 8000850:	4631      	mov	r1, r6
 8000852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000856:	fab3 f683 	clz	r6, r3
 800085a:	2e00      	cmp	r6, #0
 800085c:	d14a      	bne.n	80008f4 <__udivmoddi4+0x1cc>
 800085e:	428b      	cmp	r3, r1
 8000860:	d302      	bcc.n	8000868 <__udivmoddi4+0x140>
 8000862:	4282      	cmp	r2, r0
 8000864:	f200 80b8 	bhi.w	80009d8 <__udivmoddi4+0x2b0>
 8000868:	1a84      	subs	r4, r0, r2
 800086a:	eb61 0103 	sbc.w	r1, r1, r3
 800086e:	2001      	movs	r0, #1
 8000870:	468c      	mov	ip, r1
 8000872:	2d00      	cmp	r5, #0
 8000874:	d0a8      	beq.n	80007c8 <__udivmoddi4+0xa0>
 8000876:	e9c5 4c00 	strd	r4, ip, [r5]
 800087a:	e7a5      	b.n	80007c8 <__udivmoddi4+0xa0>
 800087c:	f1c2 0320 	rsb	r3, r2, #32
 8000880:	fa20 f603 	lsr.w	r6, r0, r3
 8000884:	4097      	lsls	r7, r2
 8000886:	fa01 f002 	lsl.w	r0, r1, r2
 800088a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800088e:	40d9      	lsrs	r1, r3
 8000890:	4330      	orrs	r0, r6
 8000892:	0c03      	lsrs	r3, r0, #16
 8000894:	fbb1 f6fe 	udiv	r6, r1, lr
 8000898:	fa1f f887 	uxth.w	r8, r7
 800089c:	fb0e 1116 	mls	r1, lr, r6, r1
 80008a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a4:	fb06 f108 	mul.w	r1, r6, r8
 80008a8:	4299      	cmp	r1, r3
 80008aa:	fa04 f402 	lsl.w	r4, r4, r2
 80008ae:	d909      	bls.n	80008c4 <__udivmoddi4+0x19c>
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008b6:	f080 808d 	bcs.w	80009d4 <__udivmoddi4+0x2ac>
 80008ba:	4299      	cmp	r1, r3
 80008bc:	f240 808a 	bls.w	80009d4 <__udivmoddi4+0x2ac>
 80008c0:	3e02      	subs	r6, #2
 80008c2:	443b      	add	r3, r7
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b281      	uxth	r1, r0
 80008c8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008cc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d4:	fb00 f308 	mul.w	r3, r0, r8
 80008d8:	428b      	cmp	r3, r1
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x1c4>
 80008dc:	1879      	adds	r1, r7, r1
 80008de:	f100 3cff 	add.w	ip, r0, #4294967295
 80008e2:	d273      	bcs.n	80009cc <__udivmoddi4+0x2a4>
 80008e4:	428b      	cmp	r3, r1
 80008e6:	d971      	bls.n	80009cc <__udivmoddi4+0x2a4>
 80008e8:	3802      	subs	r0, #2
 80008ea:	4439      	add	r1, r7
 80008ec:	1acb      	subs	r3, r1, r3
 80008ee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008f2:	e778      	b.n	80007e6 <__udivmoddi4+0xbe>
 80008f4:	f1c6 0c20 	rsb	ip, r6, #32
 80008f8:	fa03 f406 	lsl.w	r4, r3, r6
 80008fc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000900:	431c      	orrs	r4, r3
 8000902:	fa20 f70c 	lsr.w	r7, r0, ip
 8000906:	fa01 f306 	lsl.w	r3, r1, r6
 800090a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800090e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000912:	431f      	orrs	r7, r3
 8000914:	0c3b      	lsrs	r3, r7, #16
 8000916:	fbb1 f9fe 	udiv	r9, r1, lr
 800091a:	fa1f f884 	uxth.w	r8, r4
 800091e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000922:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000926:	fb09 fa08 	mul.w	sl, r9, r8
 800092a:	458a      	cmp	sl, r1
 800092c:	fa02 f206 	lsl.w	r2, r2, r6
 8000930:	fa00 f306 	lsl.w	r3, r0, r6
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x220>
 8000936:	1861      	adds	r1, r4, r1
 8000938:	f109 30ff 	add.w	r0, r9, #4294967295
 800093c:	d248      	bcs.n	80009d0 <__udivmoddi4+0x2a8>
 800093e:	458a      	cmp	sl, r1
 8000940:	d946      	bls.n	80009d0 <__udivmoddi4+0x2a8>
 8000942:	f1a9 0902 	sub.w	r9, r9, #2
 8000946:	4421      	add	r1, r4
 8000948:	eba1 010a 	sub.w	r1, r1, sl
 800094c:	b2bf      	uxth	r7, r7
 800094e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000952:	fb0e 1110 	mls	r1, lr, r0, r1
 8000956:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800095a:	fb00 f808 	mul.w	r8, r0, r8
 800095e:	45b8      	cmp	r8, r7
 8000960:	d907      	bls.n	8000972 <__udivmoddi4+0x24a>
 8000962:	19e7      	adds	r7, r4, r7
 8000964:	f100 31ff 	add.w	r1, r0, #4294967295
 8000968:	d22e      	bcs.n	80009c8 <__udivmoddi4+0x2a0>
 800096a:	45b8      	cmp	r8, r7
 800096c:	d92c      	bls.n	80009c8 <__udivmoddi4+0x2a0>
 800096e:	3802      	subs	r0, #2
 8000970:	4427      	add	r7, r4
 8000972:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000976:	eba7 0708 	sub.w	r7, r7, r8
 800097a:	fba0 8902 	umull	r8, r9, r0, r2
 800097e:	454f      	cmp	r7, r9
 8000980:	46c6      	mov	lr, r8
 8000982:	4649      	mov	r1, r9
 8000984:	d31a      	bcc.n	80009bc <__udivmoddi4+0x294>
 8000986:	d017      	beq.n	80009b8 <__udivmoddi4+0x290>
 8000988:	b15d      	cbz	r5, 80009a2 <__udivmoddi4+0x27a>
 800098a:	ebb3 020e 	subs.w	r2, r3, lr
 800098e:	eb67 0701 	sbc.w	r7, r7, r1
 8000992:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000996:	40f2      	lsrs	r2, r6
 8000998:	ea4c 0202 	orr.w	r2, ip, r2
 800099c:	40f7      	lsrs	r7, r6
 800099e:	e9c5 2700 	strd	r2, r7, [r5]
 80009a2:	2600      	movs	r6, #0
 80009a4:	4631      	mov	r1, r6
 80009a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009aa:	462e      	mov	r6, r5
 80009ac:	4628      	mov	r0, r5
 80009ae:	e70b      	b.n	80007c8 <__udivmoddi4+0xa0>
 80009b0:	4606      	mov	r6, r0
 80009b2:	e6e9      	b.n	8000788 <__udivmoddi4+0x60>
 80009b4:	4618      	mov	r0, r3
 80009b6:	e6fd      	b.n	80007b4 <__udivmoddi4+0x8c>
 80009b8:	4543      	cmp	r3, r8
 80009ba:	d2e5      	bcs.n	8000988 <__udivmoddi4+0x260>
 80009bc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009c0:	eb69 0104 	sbc.w	r1, r9, r4
 80009c4:	3801      	subs	r0, #1
 80009c6:	e7df      	b.n	8000988 <__udivmoddi4+0x260>
 80009c8:	4608      	mov	r0, r1
 80009ca:	e7d2      	b.n	8000972 <__udivmoddi4+0x24a>
 80009cc:	4660      	mov	r0, ip
 80009ce:	e78d      	b.n	80008ec <__udivmoddi4+0x1c4>
 80009d0:	4681      	mov	r9, r0
 80009d2:	e7b9      	b.n	8000948 <__udivmoddi4+0x220>
 80009d4:	4666      	mov	r6, ip
 80009d6:	e775      	b.n	80008c4 <__udivmoddi4+0x19c>
 80009d8:	4630      	mov	r0, r6
 80009da:	e74a      	b.n	8000872 <__udivmoddi4+0x14a>
 80009dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009e0:	4439      	add	r1, r7
 80009e2:	e713      	b.n	800080c <__udivmoddi4+0xe4>
 80009e4:	3802      	subs	r0, #2
 80009e6:	443c      	add	r4, r7
 80009e8:	e724      	b.n	8000834 <__udivmoddi4+0x10c>
 80009ea:	bf00      	nop

080009ec <__aeabi_idiv0>:
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
 8000a10:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a12:	4b30      	ldr	r3, [pc, #192]	; (8000ad4 <MX_ADC1_Init+0xe4>)
 8000a14:	4a30      	ldr	r2, [pc, #192]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a18:	4b2e      	ldr	r3, [pc, #184]	; (8000ad4 <MX_ADC1_Init+0xe4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a1e:	4b2d      	ldr	r3, [pc, #180]	; (8000ad4 <MX_ADC1_Init+0xe4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a24:	4b2b      	ldr	r3, [pc, #172]	; (8000ad4 <MX_ADC1_Init+0xe4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ad4 <MX_ADC1_Init+0xe4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a30:	4b28      	ldr	r3, [pc, #160]	; (8000ad4 <MX_ADC1_Init+0xe4>)
 8000a32:	2204      	movs	r2, #4
 8000a34:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a36:	4b27      	ldr	r3, [pc, #156]	; (8000ad4 <MX_ADC1_Init+0xe4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a3c:	4b25      	ldr	r3, [pc, #148]	; (8000ad4 <MX_ADC1_Init+0xe4>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000a42:	4b24      	ldr	r3, [pc, #144]	; (8000ad4 <MX_ADC1_Init+0xe4>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a48:	4b22      	ldr	r3, [pc, #136]	; (8000ad4 <MX_ADC1_Init+0xe4>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000a50:	4b20      	ldr	r3, [pc, #128]	; (8000ad4 <MX_ADC1_Init+0xe4>)
 8000a52:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000a56:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a58:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <MX_ADC1_Init+0xe4>)
 8000a5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a60:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <MX_ADC1_Init+0xe4>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a68:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_ADC1_Init+0xe4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a6e:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <MX_ADC1_Init+0xe4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a76:	4817      	ldr	r0, [pc, #92]	; (8000ad4 <MX_ADC1_Init+0xe4>)
 8000a78:	f000 ffd4 	bl	8001a24 <HAL_ADC_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000a82:	f000 fab7 	bl	8000ff4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4810      	ldr	r0, [pc, #64]	; (8000ad4 <MX_ADC1_Init+0xe4>)
 8000a92:	f001 fef9 	bl	8002888 <HAL_ADCEx_MultiModeConfigChannel>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000a9c:	f000 faaa 	bl	8000ff4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_ADC1_Init+0xec>)
 8000aa2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aa4:	2306      	movs	r3, #6
 8000aa6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000aac:	237f      	movs	r3, #127	; 0x7f
 8000aae:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_ADC1_Init+0xe4>)
 8000abe:	f001 f9d7 	bl	8001e70 <HAL_ADC_ConfigChannel>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000ac8:	f000 fa94 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	3728      	adds	r7, #40	; 0x28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200009d8 	.word	0x200009d8
 8000ad8:	50040000 	.word	0x50040000
 8000adc:	14f00020 	.word	0x14f00020

08000ae0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a2b      	ldr	r2, [pc, #172]	; (8000bac <HAL_ADC_MspInit+0xcc>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d14f      	bne.n	8000ba2 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b02:	4b2b      	ldr	r3, [pc, #172]	; (8000bb0 <HAL_ADC_MspInit+0xd0>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	4a2a      	ldr	r2, [pc, #168]	; (8000bb0 <HAL_ADC_MspInit+0xd0>)
 8000b08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0e:	4b28      	ldr	r3, [pc, #160]	; (8000bb0 <HAL_ADC_MspInit+0xd0>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	4b25      	ldr	r3, [pc, #148]	; (8000bb0 <HAL_ADC_MspInit+0xd0>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	4a24      	ldr	r2, [pc, #144]	; (8000bb0 <HAL_ADC_MspInit+0xd0>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b26:	4b22      	ldr	r3, [pc, #136]	; (8000bb0 <HAL_ADC_MspInit+0xd0>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b32:	2301      	movs	r3, #1
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b36:	230b      	movs	r3, #11
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b48:	f002 fb42 	bl	80031d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b4c:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <HAL_ADC_MspInit+0xd4>)
 8000b4e:	4a1a      	ldr	r2, [pc, #104]	; (8000bb8 <HAL_ADC_MspInit+0xd8>)
 8000b50:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000b52:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <HAL_ADC_MspInit+0xd4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b58:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <HAL_ADC_MspInit+0xd4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <HAL_ADC_MspInit+0xd4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <HAL_ADC_MspInit+0xd4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b6a:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_ADC_MspInit+0xd4>)
 8000b6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b70:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <HAL_ADC_MspInit+0xd4>)
 8000b74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b78:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <HAL_ADC_MspInit+0xd4>)
 8000b7c:	2220      	movs	r2, #32
 8000b7e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <HAL_ADC_MspInit+0xd4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b86:	480b      	ldr	r0, [pc, #44]	; (8000bb4 <HAL_ADC_MspInit+0xd4>)
 8000b88:	f002 f92a 	bl	8002de0 <HAL_DMA_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8000b92:	f000 fa2f 	bl	8000ff4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a06      	ldr	r2, [pc, #24]	; (8000bb4 <HAL_ADC_MspInit+0xd4>)
 8000b9a:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b9c:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <HAL_ADC_MspInit+0xd4>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	3728      	adds	r7, #40	; 0x28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	50040000 	.word	0x50040000
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	20000a3c 	.word	0x20000a3c
 8000bb8:	40020008 	.word	0x40020008

08000bbc <LED_brightness_control>:
		}
	}
}

void LED_brightness_control(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	static uint32_t time_cnt = 0;

	if(time_cnt == 0)
 8000bc0:	4b22      	ldr	r3, [pc, #136]	; (8000c4c <LED_brightness_control+0x90>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d104      	bne.n	8000bd2 <LED_brightness_control+0x16>
		time_cnt = HAL_GetTick();
 8000bc8:	f000 fd4a 	bl	8001660 <HAL_GetTick>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	4a1f      	ldr	r2, [pc, #124]	; (8000c4c <LED_brightness_control+0x90>)
 8000bd0:	6013      	str	r3, [r2, #0]

	if((HAL_GetTick() - time_cnt) > 100)
 8000bd2:	f000 fd45 	bl	8001660 <HAL_GetTick>
 8000bd6:	4602      	mov	r2, r0
 8000bd8:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <LED_brightness_control+0x90>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	2b64      	cmp	r3, #100	; 0x64
 8000be0:	d931      	bls.n	8000c46 <LED_brightness_control+0x8a>
	{
		time_cnt = HAL_GetTick();
 8000be2:	f000 fd3d 	bl	8001660 <HAL_GetTick>
 8000be6:	4603      	mov	r3, r0
 8000be8:	4a18      	ldr	r2, [pc, #96]	; (8000c4c <LED_brightness_control+0x90>)
 8000bea:	6013      	str	r3, [r2, #0]

		if(distance_cm >= DISTANCE_MAX_VALUE)
 8000bec:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <LED_brightness_control+0x94>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b4f      	cmp	r3, #79	; 0x4f
 8000bf2:	d909      	bls.n	8000c08 <LED_brightness_control+0x4c>
		{
			gesture_is_detected = false;
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <LED_brightness_control+0x98>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DETECT_LED_GPIO_Port, DETECT_LED_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f002 fc8e 	bl	8003524 <HAL_GPIO_WritePin>
		}

		if(true == gesture_is_detected)
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <LED_brightness_control+0x98>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d01a      	beq.n	8000c46 <LED_brightness_control+0x8a>
		{
			brightness = _CONVERT_DISTANCE_TO_BRIGHTNESS(distance_cm);
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <LED_brightness_control+0x94>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	3b0a      	subs	r3, #10
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <LED_brightness_control+0x9c>)
 8000c1c:	601a      	str	r2, [r3, #0]

			if(brightness > BRIGHTNESS_MAX)
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <LED_brightness_control+0x9c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b64      	cmp	r3, #100	; 0x64
 8000c24:	dd03      	ble.n	8000c2e <LED_brightness_control+0x72>
			{
				brightness = BRIGHTNESS_MAX;
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <LED_brightness_control+0x9c>)
 8000c28:	2264      	movs	r2, #100	; 0x64
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	e006      	b.n	8000c3c <LED_brightness_control+0x80>
			}
			else if(brightness < BRIGHTNESS_MIN)
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <LED_brightness_control+0x9c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	da02      	bge.n	8000c3c <LED_brightness_control+0x80>
			{
				brightness = BRIGHTNESS_MIN;
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <LED_brightness_control+0x9c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
			}

			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (uint32_t)brightness);
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <LED_brightness_control+0x9c>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <LED_brightness_control+0xa0>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000748 	.word	0x20000748
 8000c50:	2000073c 	.word	0x2000073c
 8000c54:	20000742 	.word	0x20000742
 8000c58:	20000744 	.word	0x20000744
 8000c5c:	20000af4 	.word	0x20000af4

08000c60 <ADC_start_data_measurement>:

void ADC_start_data_measurement(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	  HAL_ADC_Start_DMA(&hadc1, &adc_measurement, 1);
 8000c64:	2201      	movs	r2, #1
 8000c66:	4904      	ldr	r1, [pc, #16]	; (8000c78 <ADC_start_data_measurement+0x18>)
 8000c68:	4804      	ldr	r0, [pc, #16]	; (8000c7c <ADC_start_data_measurement+0x1c>)
 8000c6a:	f001 f831 	bl	8001cd0 <HAL_ADC_Start_DMA>
	  HAL_TIM_Base_Start(&htim3);
 8000c6e:	4804      	ldr	r0, [pc, #16]	; (8000c80 <ADC_start_data_measurement+0x20>)
 8000c70:	f003 ffec 	bl	8004c4c <HAL_TIM_Base_Start>
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000738 	.word	0x20000738
 8000c7c:	200009d8 	.word	0x200009d8
 8000c80:	20000aa8 	.word	0x20000aa8

08000c84 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	if(adc_measurement == 0)
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <HAL_ADC_ConvCpltCallback+0x44>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d013      	beq.n	8000cbc <HAL_ADC_ConvCpltCallback+0x38>
		return;

	distance_cm = CONVERT_ADC_TO_DISTANCE(adc_measurement);
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <HAL_ADC_ConvCpltCallback+0x44>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f44f 4212 	mov.w	r2, #37376	; 0x9200
 8000c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca0:	3b04      	subs	r3, #4
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <HAL_ADC_ConvCpltCallback+0x48>)
 8000ca4:	6013      	str	r3, [r2, #0]

	if(distance_cm > DISTANCE_MAX_VALUE)
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <HAL_ADC_ConvCpltCallback+0x48>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b50      	cmp	r3, #80	; 0x50
 8000cac:	d902      	bls.n	8000cb4 <HAL_ADC_ConvCpltCallback+0x30>
	{
		distance_cm = DISTANCE_MAX_VALUE;
 8000cae:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <HAL_ADC_ConvCpltCallback+0x48>)
 8000cb0:	2250      	movs	r2, #80	; 0x50
 8000cb2:	601a      	str	r2, [r3, #0]
	}

	adc_data_is_ready = true;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	701a      	strb	r2, [r3, #0]
 8000cba:	e000      	b.n	8000cbe <HAL_ADC_ConvCpltCallback+0x3a>
		return;
 8000cbc:	bf00      	nop
}
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	20000738 	.word	0x20000738
 8000ccc:	2000073c 	.word	0x2000073c
 8000cd0:	20000741 	.word	0x20000741

08000cd4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin)
 8000cde:	88fb      	ldrh	r3, [r7, #6]
 8000ce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ce4:	d102      	bne.n	8000cec <HAL_GPIO_EXTI_Callback+0x18>
	{
		button_is_pushed = true;
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <HAL_GPIO_EXTI_Callback+0x24>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	701a      	strb	r2, [r3, #0]
	}
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	20000740 	.word	0x20000740

08000cfc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d00:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <MX_CRC_Init+0x3c>)
 8000d02:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <MX_CRC_Init+0x40>)
 8000d04:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_CRC_Init+0x3c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <MX_CRC_Init+0x3c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_CRC_Init+0x3c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d18:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <MX_CRC_Init+0x3c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_CRC_Init+0x3c>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <MX_CRC_Init+0x3c>)
 8000d26:	f001 ff71 	bl	8002c0c <HAL_CRC_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000d30:	f000 f960 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000a84 	.word	0x20000a84
 8000d3c:	40023000 	.word	0x40023000

08000d40 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <HAL_CRC_MspInit+0x38>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d10b      	bne.n	8000d6a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <HAL_CRC_MspInit+0x3c>)
 8000d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d56:	4a09      	ldr	r2, [pc, #36]	; (8000d7c <HAL_CRC_MspInit+0x3c>)
 8000d58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d5c:	6493      	str	r3, [r2, #72]	; 0x48
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <HAL_CRC_MspInit+0x3c>)
 8000d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40023000 	.word	0x40023000
 8000d7c:	40021000 	.word	0x40021000

08000d80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <MX_DMA_Init+0x38>)
 8000d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d8a:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <MX_DMA_Init+0x38>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6493      	str	r3, [r2, #72]	; 0x48
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <MX_DMA_Init+0x38>)
 8000d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2100      	movs	r1, #0
 8000da2:	200b      	movs	r0, #11
 8000da4:	f001 fefb 	bl	8002b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000da8:	200b      	movs	r0, #11
 8000daa:	f001 ff14 	bl	8002bd6 <HAL_NVIC_EnableIRQ>

}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40021000 	.word	0x40021000

08000dbc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
 8000dd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd2:	4b30      	ldr	r3, [pc, #192]	; (8000e94 <MX_GPIO_Init+0xd8>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	4a2f      	ldr	r2, [pc, #188]	; (8000e94 <MX_GPIO_Init+0xd8>)
 8000dd8:	f043 0304 	orr.w	r3, r3, #4
 8000ddc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dde:	4b2d      	ldr	r3, [pc, #180]	; (8000e94 <MX_GPIO_Init+0xd8>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dea:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <MX_GPIO_Init+0xd8>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	4a29      	ldr	r2, [pc, #164]	; (8000e94 <MX_GPIO_Init+0xd8>)
 8000df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df6:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <MX_GPIO_Init+0xd8>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	4b24      	ldr	r3, [pc, #144]	; (8000e94 <MX_GPIO_Init+0xd8>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	4a23      	ldr	r2, [pc, #140]	; (8000e94 <MX_GPIO_Init+0xd8>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0e:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <MX_GPIO_Init+0xd8>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <MX_GPIO_Init+0xd8>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	4a1d      	ldr	r2, [pc, #116]	; (8000e94 <MX_GPIO_Init+0xd8>)
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e26:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <MX_GPIO_Init+0xd8>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DETECT_LED_Pin, GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3c:	f002 fb72 	bl	8003524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e46:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4619      	mov	r1, r3
 8000e56:	4810      	ldr	r0, [pc, #64]	; (8000e98 <MX_GPIO_Init+0xdc>)
 8000e58:	f002 f9ba 	bl	80031d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|DETECT_LED_Pin;
 8000e5c:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e78:	f002 f9aa 	bl	80031d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2100      	movs	r1, #0
 8000e80:	2028      	movs	r0, #40	; 0x28
 8000e82:	f001 fe8c 	bl	8002b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e86:	2028      	movs	r0, #40	; 0x28
 8000e88:	f001 fea5 	bl	8002bd6 <HAL_NVIC_EnableIRQ>

}
 8000e8c:	bf00      	nop
 8000e8e:	3728      	adds	r7, #40	; 0x28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40021000 	.word	0x40021000
 8000e98:	48000800 	.word	0x48000800

08000e9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea0:	f000 fb6e 	bl	8001580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea4:	f000 f81e 	bl	8000ee4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea8:	f7ff ff88 	bl	8000dbc <MX_GPIO_Init>
  MX_DMA_Init();
 8000eac:	f7ff ff68 	bl	8000d80 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000eb0:	f000 faca 	bl	8001448 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000eb4:	f7ff fd9c 	bl	80009f0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000eb8:	f000 f9fe 	bl	80012b8 <MX_TIM3_Init>
  MX_CRC_Init();
 8000ebc:	f7ff ff1e 	bl	8000cfc <MX_CRC_Init>
  MX_TIM1_Init();
 8000ec0:	f000 f96a 	bl	8001198 <MX_TIM1_Init>
  MX_X_CUBE_AI_Init();
 8000ec4:	f005 fcfc 	bl	80068c0 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
  ADC_start_data_measurement();
 8000ec8:	f7ff feca 	bl	8000c60 <ADC_start_data_measurement>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <main+0x44>)
 8000ed0:	f003 ff7c 	bl	8004dcc <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //ai_sharp_train_data_collect();
	  LED_brightness_control();
 8000ed4:	f7ff fe72 	bl	8000bbc <LED_brightness_control>
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 8000ed8:	f005 fd06 	bl	80068e8 <MX_X_CUBE_AI_Process>
	  LED_brightness_control();
 8000edc:	e7fa      	b.n	8000ed4 <main+0x38>
 8000ede:	bf00      	nop
 8000ee0:	20000af4 	.word	0x20000af4

08000ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b0b8      	sub	sp, #224	; 0xe0
 8000ee8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000eee:	2244      	movs	r2, #68	; 0x44
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f008 f82e 	bl	8008f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f08:	463b      	mov	r3, r7
 8000f0a:	2288      	movs	r2, #136	; 0x88
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f008 f820 	bl	8008f54 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f14:	2302      	movs	r3, #2
 8000f16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f22:	2310      	movs	r3, #16
 8000f24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f34:	2301      	movs	r3, #1
 8000f36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f3a:	230a      	movs	r3, #10
 8000f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f40:	2307      	movs	r3, #7
 8000f42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f46:	2302      	movs	r3, #2
 8000f48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f52:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f56:	4618      	mov	r0, r3
 8000f58:	f002 fb78 	bl	800364c <HAL_RCC_OscConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f62:	f000 f847 	bl	8000ff4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f66:	230f      	movs	r3, #15
 8000f68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f84:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000f88:	2104      	movs	r1, #4
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f002 ff44 	bl	8003e18 <HAL_RCC_ClockConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000f96:	f000 f82d 	bl	8000ff4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8000f9a:	f244 0302 	movw	r3, #16386	; 0x4002
 8000f9e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000fa4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fa8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000faa:	2302      	movs	r3, #2
 8000fac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000fb2:	2308      	movs	r3, #8
 8000fb4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000fb6:	2307      	movs	r3, #7
 8000fb8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000fc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fc6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc8:	463b      	mov	r3, r7
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f003 f92a 	bl	8004224 <HAL_RCCEx_PeriphCLKConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000fd6:	f000 f80d 	bl	8000ff4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fda:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fde:	f002 fadf 	bl	80035a0 <HAL_PWREx_ControlVoltageScaling>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000fe8:	f000 f804 	bl	8000ff4 <Error_Handler>
  }
}
 8000fec:	bf00      	nop
 8000fee:	37e0      	adds	r7, #224	; 0xe0
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff8:	b672      	cpsid	i
}
 8000ffa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <Error_Handler+0x8>
	...

08001000 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <HAL_MspInit+0x44>)
 8001008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100a:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <HAL_MspInit+0x44>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6613      	str	r3, [r2, #96]	; 0x60
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <HAL_MspInit+0x44>)
 8001014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <HAL_MspInit+0x44>)
 8001020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001022:	4a08      	ldr	r2, [pc, #32]	; (8001044 <HAL_MspInit+0x44>)
 8001024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001028:	6593      	str	r3, [r2, #88]	; 0x58
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_MspInit+0x44>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40021000 	.word	0x40021000

08001048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800104c:	e7fe      	b.n	800104c <NMI_Handler+0x4>

0800104e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001052:	e7fe      	b.n	8001052 <HardFault_Handler+0x4>

08001054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <MemManage_Handler+0x4>

0800105a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <BusFault_Handler+0x4>

08001060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <UsageFault_Handler+0x4>

08001066 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001094:	f000 fad0 	bl	8001638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}

0800109c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <DMA1_Channel1_IRQHandler+0x10>)
 80010a2:	f001 ffb5 	bl	8003010 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000a3c 	.word	0x20000a3c

080010b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80010b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010b8:	f002 fa4c 	bl	8003554 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c8:	4a14      	ldr	r2, [pc, #80]	; (800111c <_sbrk+0x5c>)
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <_sbrk+0x60>)
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <_sbrk+0x64>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d102      	bne.n	80010e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <_sbrk+0x64>)
 80010de:	4a12      	ldr	r2, [pc, #72]	; (8001128 <_sbrk+0x68>)
 80010e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <_sbrk+0x64>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d207      	bcs.n	8001100 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f0:	f007 fef8 	bl	8008ee4 <__errno>
 80010f4:	4603      	mov	r3, r0
 80010f6:	220c      	movs	r2, #12
 80010f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	e009      	b.n	8001114 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <_sbrk+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001106:	4b07      	ldr	r3, [pc, #28]	; (8001124 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	4a05      	ldr	r2, [pc, #20]	; (8001124 <_sbrk+0x64>)
 8001110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20018000 	.word	0x20018000
 8001120:	00000800 	.word	0x00000800
 8001124:	2000074c 	.word	0x2000074c
 8001128:	20000bd8 	.word	0x20000bd8

0800112c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001130:	4b17      	ldr	r3, [pc, #92]	; (8001190 <SystemInit+0x64>)
 8001132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001136:	4a16      	ldr	r2, [pc, #88]	; (8001190 <SystemInit+0x64>)
 8001138:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800113c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001140:	4b14      	ldr	r3, [pc, #80]	; (8001194 <SystemInit+0x68>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a13      	ldr	r2, [pc, #76]	; (8001194 <SystemInit+0x68>)
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <SystemInit+0x68>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <SystemInit+0x68>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a0f      	ldr	r2, [pc, #60]	; (8001194 <SystemInit+0x68>)
 8001158:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800115c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001160:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <SystemInit+0x68>)
 8001164:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001168:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <SystemInit+0x68>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a09      	ldr	r2, [pc, #36]	; (8001194 <SystemInit+0x68>)
 8001170:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001174:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001176:	4b07      	ldr	r3, [pc, #28]	; (8001194 <SystemInit+0x68>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <SystemInit+0x64>)
 800117e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001182:	609a      	str	r2, [r3, #8]
#endif
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000ed00 	.word	0xe000ed00
 8001194:	40021000 	.word	0x40021000

08001198 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b096      	sub	sp, #88	; 0x58
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]
 80011ba:	615a      	str	r2, [r3, #20]
 80011bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	222c      	movs	r2, #44	; 0x2c
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f007 fec5 	bl	8008f54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011ca:	4b39      	ldr	r3, [pc, #228]	; (80012b0 <MX_TIM1_Init+0x118>)
 80011cc:	4a39      	ldr	r2, [pc, #228]	; (80012b4 <MX_TIM1_Init+0x11c>)
 80011ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000-1;
 80011d0:	4b37      	ldr	r3, [pc, #220]	; (80012b0 <MX_TIM1_Init+0x118>)
 80011d2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80011d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d8:	4b35      	ldr	r3, [pc, #212]	; (80012b0 <MX_TIM1_Init+0x118>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80011de:	4b34      	ldr	r3, [pc, #208]	; (80012b0 <MX_TIM1_Init+0x118>)
 80011e0:	2263      	movs	r2, #99	; 0x63
 80011e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e4:	4b32      	ldr	r3, [pc, #200]	; (80012b0 <MX_TIM1_Init+0x118>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011ea:	4b31      	ldr	r3, [pc, #196]	; (80012b0 <MX_TIM1_Init+0x118>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f0:	4b2f      	ldr	r3, [pc, #188]	; (80012b0 <MX_TIM1_Init+0x118>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011f6:	482e      	ldr	r0, [pc, #184]	; (80012b0 <MX_TIM1_Init+0x118>)
 80011f8:	f003 fd90 	bl	8004d1c <HAL_TIM_PWM_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001202:	f7ff fef7 	bl	8000ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001212:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001216:	4619      	mov	r1, r3
 8001218:	4825      	ldr	r0, [pc, #148]	; (80012b0 <MX_TIM1_Init+0x118>)
 800121a:	f004 fceb 	bl	8005bf4 <HAL_TIMEx_MasterConfigSynchronization>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001224:	f7ff fee6 	bl	8000ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001228:	2360      	movs	r3, #96	; 0x60
 800122a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001230:	2300      	movs	r3, #0
 8001232:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001234:	2300      	movs	r3, #0
 8001236:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800123c:	2300      	movs	r3, #0
 800123e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001244:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001248:	2200      	movs	r2, #0
 800124a:	4619      	mov	r1, r3
 800124c:	4818      	ldr	r0, [pc, #96]	; (80012b0 <MX_TIM1_Init+0x118>)
 800124e:	f003 fec3 	bl	8004fd8 <HAL_TIM_PWM_ConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001258:	f7ff fecc 	bl	8000ff4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001270:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001274:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800127e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	4619      	mov	r1, r3
 8001290:	4807      	ldr	r0, [pc, #28]	; (80012b0 <MX_TIM1_Init+0x118>)
 8001292:	f004 fd37 	bl	8005d04 <HAL_TIMEx_ConfigBreakDeadTime>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800129c:	f7ff feaa 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012a0:	4803      	ldr	r0, [pc, #12]	; (80012b0 <MX_TIM1_Init+0x118>)
 80012a2:	f000 f899 	bl	80013d8 <HAL_TIM_MspPostInit>

}
 80012a6:	bf00      	nop
 80012a8:	3758      	adds	r7, #88	; 0x58
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000af4 	.word	0x20000af4
 80012b4:	40012c00 	.word	0x40012c00

080012b8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012be:	f107 0310 	add.w	r3, r7, #16
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012d6:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <MX_TIM3_Init+0x98>)
 80012d8:	4a1e      	ldr	r2, [pc, #120]	; (8001354 <MX_TIM3_Init+0x9c>)
 80012da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000-1;
 80012dc:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <MX_TIM3_Init+0x98>)
 80012de:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80012e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e4:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <MX_TIM3_Init+0x98>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400-1;
 80012ea:	4b19      	ldr	r3, [pc, #100]	; (8001350 <MX_TIM3_Init+0x98>)
 80012ec:	f240 128f 	movw	r2, #399	; 0x18f
 80012f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <MX_TIM3_Init+0x98>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f8:	4b15      	ldr	r3, [pc, #84]	; (8001350 <MX_TIM3_Init+0x98>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012fe:	4814      	ldr	r0, [pc, #80]	; (8001350 <MX_TIM3_Init+0x98>)
 8001300:	f003 fc4c 	bl	8004b9c <HAL_TIM_Base_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800130a:	f7ff fe73 	bl	8000ff4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800130e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001312:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	4619      	mov	r1, r3
 800131a:	480d      	ldr	r0, [pc, #52]	; (8001350 <MX_TIM3_Init+0x98>)
 800131c:	f003 ff70 	bl	8005200 <HAL_TIM_ConfigClockSource>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001326:	f7ff fe65 	bl	8000ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800132a:	2320      	movs	r3, #32
 800132c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	4619      	mov	r1, r3
 8001336:	4806      	ldr	r0, [pc, #24]	; (8001350 <MX_TIM3_Init+0x98>)
 8001338:	f004 fc5c 	bl	8005bf4 <HAL_TIMEx_MasterConfigSynchronization>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001342:	f7ff fe57 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	3720      	adds	r7, #32
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000aa8 	.word	0x20000aa8
 8001354:	40000400 	.word	0x40000400

08001358 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <HAL_TIM_PWM_MspInit+0x38>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d10b      	bne.n	8001382 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_TIM_PWM_MspInit+0x3c>)
 800136c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800136e:	4a09      	ldr	r2, [pc, #36]	; (8001394 <HAL_TIM_PWM_MspInit+0x3c>)
 8001370:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001374:	6613      	str	r3, [r2, #96]	; 0x60
 8001376:	4b07      	ldr	r3, [pc, #28]	; (8001394 <HAL_TIM_PWM_MspInit+0x3c>)
 8001378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001382:	bf00      	nop
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40012c00 	.word	0x40012c00
 8001394:	40021000 	.word	0x40021000

08001398 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <HAL_TIM_Base_MspInit+0x38>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d10b      	bne.n	80013c2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_TIM_Base_MspInit+0x3c>)
 80013ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ae:	4a09      	ldr	r2, [pc, #36]	; (80013d4 <HAL_TIM_Base_MspInit+0x3c>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	6593      	str	r3, [r2, #88]	; 0x58
 80013b6:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <HAL_TIM_Base_MspInit+0x3c>)
 80013b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80013c2:	bf00      	nop
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	40000400 	.word	0x40000400
 80013d4:	40021000 	.word	0x40021000

080013d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a12      	ldr	r2, [pc, #72]	; (8001440 <HAL_TIM_MspPostInit+0x68>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d11d      	bne.n	8001436 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fa:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_TIM_MspPostInit+0x6c>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	4a11      	ldr	r2, [pc, #68]	; (8001444 <HAL_TIM_MspPostInit+0x6c>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <HAL_TIM_MspPostInit+0x6c>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = CONTROL_LED_Pin;
 8001412:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001416:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001424:	2301      	movs	r3, #1
 8001426:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CONTROL_LED_GPIO_Port, &GPIO_InitStruct);
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	4619      	mov	r1, r3
 800142e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001432:	f001 fecd 	bl	80031d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001436:	bf00      	nop
 8001438:	3720      	adds	r7, #32
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40012c00 	.word	0x40012c00
 8001444:	40021000 	.word	0x40021000

08001448 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800144c:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <MX_USART2_UART_Init+0x58>)
 800144e:	4a15      	ldr	r2, [pc, #84]	; (80014a4 <MX_USART2_UART_Init+0x5c>)
 8001450:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001452:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <MX_USART2_UART_Init+0x58>)
 8001454:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001458:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MX_USART2_UART_Init+0x58>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <MX_USART2_UART_Init+0x58>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <MX_USART2_UART_Init+0x58>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <MX_USART2_UART_Init+0x58>)
 800146e:	220c      	movs	r2, #12
 8001470:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <MX_USART2_UART_Init+0x58>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <MX_USART2_UART_Init+0x58>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <MX_USART2_UART_Init+0x58>)
 8001480:	2200      	movs	r2, #0
 8001482:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <MX_USART2_UART_Init+0x58>)
 8001486:	2200      	movs	r2, #0
 8001488:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800148a:	4805      	ldr	r0, [pc, #20]	; (80014a0 <MX_USART2_UART_Init+0x58>)
 800148c:	f004 fcb8 	bl	8005e00 <HAL_UART_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001496:	f7ff fdad 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000b40 	.word	0x20000b40
 80014a4:	40004400 	.word	0x40004400

080014a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	; 0x28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a17      	ldr	r2, [pc, #92]	; (8001524 <HAL_UART_MspInit+0x7c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d128      	bne.n	800151c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ca:	4b17      	ldr	r3, [pc, #92]	; (8001528 <HAL_UART_MspInit+0x80>)
 80014cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ce:	4a16      	ldr	r2, [pc, #88]	; (8001528 <HAL_UART_MspInit+0x80>)
 80014d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d4:	6593      	str	r3, [r2, #88]	; 0x58
 80014d6:	4b14      	ldr	r3, [pc, #80]	; (8001528 <HAL_UART_MspInit+0x80>)
 80014d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <HAL_UART_MspInit+0x80>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e6:	4a10      	ldr	r2, [pc, #64]	; (8001528 <HAL_UART_MspInit+0x80>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <HAL_UART_MspInit+0x80>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014fa:	230c      	movs	r3, #12
 80014fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800150a:	2307      	movs	r3, #7
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001518:	f001 fe5a 	bl	80031d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800151c:	bf00      	nop
 800151e:	3728      	adds	r7, #40	; 0x28
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40004400 	.word	0x40004400
 8001528:	40021000 	.word	0x40021000

0800152c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800152c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001564 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001530:	f7ff fdfc 	bl	800112c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001534:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001536:	e003      	b.n	8001540 <LoopCopyDataInit>

08001538 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800153a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800153c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800153e:	3104      	adds	r1, #4

08001540 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001540:	480a      	ldr	r0, [pc, #40]	; (800156c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001544:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001546:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001548:	d3f6      	bcc.n	8001538 <CopyDataInit>
	ldr	r2, =_sbss
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <LoopForever+0x12>)
	b	LoopFillZerobss
 800154c:	e002      	b.n	8001554 <LoopFillZerobss>

0800154e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800154e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001550:	f842 3b04 	str.w	r3, [r2], #4

08001554 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <LoopForever+0x16>)
	cmp	r2, r3
 8001556:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001558:	d3f9      	bcc.n	800154e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800155a:	f007 fcc9 	bl	8008ef0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800155e:	f7ff fc9d 	bl	8000e9c <main>

08001562 <LoopForever>:

LoopForever:
    b LoopForever
 8001562:	e7fe      	b.n	8001562 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001564:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001568:	0800b920 	.word	0x0800b920
	ldr	r0, =_sdata
 800156c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001570:	2000071c 	.word	0x2000071c
	ldr	r2, =_sbss
 8001574:	2000071c 	.word	0x2000071c
	ldr	r3, = _ebss
 8001578:	20000bd8 	.word	0x20000bd8

0800157c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800157c:	e7fe      	b.n	800157c <ADC1_2_IRQHandler>
	...

08001580 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001586:	2300      	movs	r3, #0
 8001588:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <HAL_Init+0x3c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a0b      	ldr	r2, [pc, #44]	; (80015bc <HAL_Init+0x3c>)
 8001590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001594:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001596:	2003      	movs	r0, #3
 8001598:	f001 faf6 	bl	8002b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800159c:	2000      	movs	r0, #0
 800159e:	f000 f80f 	bl	80015c0 <HAL_InitTick>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	71fb      	strb	r3, [r7, #7]
 80015ac:	e001      	b.n	80015b2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015ae:	f7ff fd27 	bl	8001000 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015b2:	79fb      	ldrb	r3, [r7, #7]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40022000 	.word	0x40022000

080015c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015cc:	4b17      	ldr	r3, [pc, #92]	; (800162c <HAL_InitTick+0x6c>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d023      	beq.n	800161c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015d4:	4b16      	ldr	r3, [pc, #88]	; (8001630 <HAL_InitTick+0x70>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <HAL_InitTick+0x6c>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f001 fb01 	bl	8002bf2 <HAL_SYSTICK_Config>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10f      	bne.n	8001616 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b0f      	cmp	r3, #15
 80015fa:	d809      	bhi.n	8001610 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015fc:	2200      	movs	r2, #0
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	f04f 30ff 	mov.w	r0, #4294967295
 8001604:	f001 facb 	bl	8002b9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001608:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <HAL_InitTick+0x74>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	e007      	b.n	8001620 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	e004      	b.n	8001620 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	73fb      	strb	r3, [r7, #15]
 800161a:	e001      	b.n	8001620 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001620:	7bfb      	ldrb	r3, [r7, #15]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000008 	.word	0x20000008
 8001630:	20000000 	.word	0x20000000
 8001634:	20000004 	.word	0x20000004

08001638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_IncTick+0x20>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_IncTick+0x24>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4413      	add	r3, r2
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <HAL_IncTick+0x24>)
 800164a:	6013      	str	r3, [r2, #0]
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000008 	.word	0x20000008
 800165c:	20000bc4 	.word	0x20000bc4

08001660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return uwTick;
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <HAL_GetTick+0x14>)
 8001666:	681b      	ldr	r3, [r3, #0]
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000bc4 	.word	0x20000bc4

08001678 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	431a      	orrs	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	609a      	str	r2, [r3, #8]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	609a      	str	r2, [r3, #8]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
 80016ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3360      	adds	r3, #96	; 0x60
 80016f2:	461a      	mov	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <LL_ADC_SetOffset+0x44>)
 8001702:	4013      	ands	r3, r2
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	4313      	orrs	r3, r2
 8001710:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001718:	bf00      	nop
 800171a:	371c      	adds	r7, #28
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	03fff000 	.word	0x03fff000

08001728 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3360      	adds	r3, #96	; 0x60
 8001736:	461a      	mov	r2, r3
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001748:	4618      	mov	r0, r3
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001754:	b480      	push	{r7}
 8001756:	b087      	sub	sp, #28
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	3360      	adds	r3, #96	; 0x60
 8001764:	461a      	mov	r2, r3
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	431a      	orrs	r2, r3
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800177e:	bf00      	nop
 8001780:	371c      	adds	r7, #28
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b087      	sub	sp, #28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	3330      	adds	r3, #48	; 0x30
 80017c0:	461a      	mov	r2, r3
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	f003 030c 	and.w	r3, r3, #12
 80017cc:	4413      	add	r3, r2
 80017ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	f003 031f 	and.w	r3, r3, #31
 80017da:	211f      	movs	r1, #31
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	401a      	ands	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	0e9b      	lsrs	r3, r3, #26
 80017e8:	f003 011f 	and.w	r1, r3, #31
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	f003 031f 	and.w	r3, r3, #31
 80017f2:	fa01 f303 	lsl.w	r3, r1, r3
 80017f6:	431a      	orrs	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017fc:	bf00      	nop
 80017fe:	371c      	adds	r7, #28
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001808:	b480      	push	{r7}
 800180a:	b087      	sub	sp, #28
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	3314      	adds	r3, #20
 8001818:	461a      	mov	r2, r3
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	0e5b      	lsrs	r3, r3, #25
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	4413      	add	r3, r2
 8001826:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	0d1b      	lsrs	r3, r3, #20
 8001830:	f003 031f 	and.w	r3, r3, #31
 8001834:	2107      	movs	r1, #7
 8001836:	fa01 f303 	lsl.w	r3, r1, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	401a      	ands	r2, r3
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	0d1b      	lsrs	r3, r3, #20
 8001842:	f003 031f 	and.w	r3, r3, #31
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	fa01 f303 	lsl.w	r3, r1, r3
 800184c:	431a      	orrs	r2, r3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001852:	bf00      	nop
 8001854:	371c      	adds	r7, #28
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001878:	43db      	mvns	r3, r3
 800187a:	401a      	ands	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f003 0318 	and.w	r3, r3, #24
 8001882:	4908      	ldr	r1, [pc, #32]	; (80018a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001884:	40d9      	lsrs	r1, r3
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	400b      	ands	r3, r1
 800188a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800188e:	431a      	orrs	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001896:	bf00      	nop
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	0007ffff 	.word	0x0007ffff

080018a8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 031f 	and.w	r3, r3, #31
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80018d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6093      	str	r3, [r2, #8]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018fc:	d101      	bne.n	8001902 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001920:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001924:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001948:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800194c:	d101      	bne.n	8001952 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001970:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001974:	f043 0201 	orr.w	r2, r3, #1
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <LL_ADC_IsEnabled+0x18>
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <LL_ADC_IsEnabled+0x1a>
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019c2:	f043 0204 	orr.w	r2, r3, #4
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d101      	bne.n	80019ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d101      	bne.n	8001a14 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b089      	sub	sp, #36	; 0x24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e136      	b.n	8001cac <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d109      	bne.n	8001a60 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff f847 	bl	8000ae0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff3f 	bl	80018e8 <LL_ADC_IsDeepPowerDownEnabled>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d004      	beq.n	8001a7a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff25 	bl	80018c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff ff5a 	bl	8001938 <LL_ADC_IsInternalRegulatorEnabled>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d115      	bne.n	8001ab6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff ff3e 	bl	8001910 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a94:	4b87      	ldr	r3, [pc, #540]	; (8001cb4 <HAL_ADC_Init+0x290>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	099b      	lsrs	r3, r3, #6
 8001a9a:	4a87      	ldr	r2, [pc, #540]	; (8001cb8 <HAL_ADC_Init+0x294>)
 8001a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa0:	099b      	lsrs	r3, r3, #6
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001aa8:	e002      	b.n	8001ab0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f9      	bne.n	8001aaa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff ff3c 	bl	8001938 <LL_ADC_IsInternalRegulatorEnabled>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10d      	bne.n	8001ae2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aca:	f043 0210 	orr.w	r2, r3, #16
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad6:	f043 0201 	orr.w	r2, r3, #1
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff ff75 	bl	80019d6 <LL_ADC_REG_IsConversionOngoing>
 8001aec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f040 80cf 	bne.w	8001c9a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f040 80cb 	bne.w	8001c9a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b08:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b0c:	f043 0202 	orr.w	r2, r3, #2
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff35 	bl	8001988 <LL_ADC_IsEnabled>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d115      	bne.n	8001b50 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b24:	4865      	ldr	r0, [pc, #404]	; (8001cbc <HAL_ADC_Init+0x298>)
 8001b26:	f7ff ff2f 	bl	8001988 <LL_ADC_IsEnabled>
 8001b2a:	4604      	mov	r4, r0
 8001b2c:	4864      	ldr	r0, [pc, #400]	; (8001cc0 <HAL_ADC_Init+0x29c>)
 8001b2e:	f7ff ff2b 	bl	8001988 <LL_ADC_IsEnabled>
 8001b32:	4603      	mov	r3, r0
 8001b34:	431c      	orrs	r4, r3
 8001b36:	4863      	ldr	r0, [pc, #396]	; (8001cc4 <HAL_ADC_Init+0x2a0>)
 8001b38:	f7ff ff26 	bl	8001988 <LL_ADC_IsEnabled>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	4323      	orrs	r3, r4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d105      	bne.n	8001b50 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	485f      	ldr	r0, [pc, #380]	; (8001cc8 <HAL_ADC_Init+0x2a4>)
 8001b4c:	f7ff fd94 	bl	8001678 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	7e5b      	ldrb	r3, [r3, #25]
 8001b54:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b5a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001b60:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001b66:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b6e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d106      	bne.n	8001b8c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	3b01      	subs	r3, #1
 8001b84:	045b      	lsls	r3, r3, #17
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d009      	beq.n	8001ba8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b98:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	4b47      	ldr	r3, [pc, #284]	; (8001ccc <HAL_ADC_Init+0x2a8>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	69b9      	ldr	r1, [r7, #24]
 8001bb8:	430b      	orrs	r3, r1
 8001bba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff08 	bl	80019d6 <LL_ADC_REG_IsConversionOngoing>
 8001bc6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff15 	bl	80019fc <LL_ADC_INJ_IsConversionOngoing>
 8001bd2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d13d      	bne.n	8001c56 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d13a      	bne.n	8001c56 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001be4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bec:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bfc:	f023 0302 	bic.w	r3, r3, #2
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	69b9      	ldr	r1, [r7, #24]
 8001c06:	430b      	orrs	r3, r1
 8001c08:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d118      	bne.n	8001c46 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c1e:	f023 0304 	bic.w	r3, r3, #4
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c2a:	4311      	orrs	r1, r2
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c30:	4311      	orrs	r1, r2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c36:	430a      	orrs	r2, r1
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0201 	orr.w	r2, r2, #1
 8001c42:	611a      	str	r2, [r3, #16]
 8001c44:	e007      	b.n	8001c56 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0201 	bic.w	r2, r2, #1
 8001c54:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d10c      	bne.n	8001c78 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c64:	f023 010f 	bic.w	r1, r3, #15
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	1e5a      	subs	r2, r3, #1
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	631a      	str	r2, [r3, #48]	; 0x30
 8001c76:	e007      	b.n	8001c88 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 020f 	bic.w	r2, r2, #15
 8001c86:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8c:	f023 0303 	bic.w	r3, r3, #3
 8001c90:	f043 0201 	orr.w	r2, r3, #1
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	655a      	str	r2, [r3, #84]	; 0x54
 8001c98:	e007      	b.n	8001caa <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9e:	f043 0210 	orr.w	r2, r3, #16
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001caa:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3724      	adds	r7, #36	; 0x24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd90      	pop	{r4, r7, pc}
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	053e2d63 	.word	0x053e2d63
 8001cbc:	50040000 	.word	0x50040000
 8001cc0:	50040100 	.word	0x50040100
 8001cc4:	50040200 	.word	0x50040200
 8001cc8:	50040300 	.word	0x50040300
 8001ccc:	fff0c007 	.word	0xfff0c007

08001cd0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cdc:	4853      	ldr	r0, [pc, #332]	; (8001e2c <HAL_ADC_Start_DMA+0x15c>)
 8001cde:	f7ff fde3 	bl	80018a8 <LL_ADC_GetMultimode>
 8001ce2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fe74 	bl	80019d6 <LL_ADC_REG_IsConversionOngoing>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f040 8093 	bne.w	8001e1c <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_ADC_Start_DMA+0x34>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e08e      	b.n	8001e22 <HAL_ADC_Start_DMA+0x152>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a47      	ldr	r2, [pc, #284]	; (8001e30 <HAL_ADC_Start_DMA+0x160>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d008      	beq.n	8001d28 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d005      	beq.n	8001d28 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	2b05      	cmp	r3, #5
 8001d20:	d002      	beq.n	8001d28 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	2b09      	cmp	r3, #9
 8001d26:	d172      	bne.n	8001e0e <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f000 fc91 	bl	8002650 <ADC_Enable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001d32:	7dfb      	ldrb	r3, [r7, #23]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d165      	bne.n	8001e04 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d40:	f023 0301 	bic.w	r3, r3, #1
 8001d44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a38      	ldr	r2, [pc, #224]	; (8001e34 <HAL_ADC_Start_DMA+0x164>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d002      	beq.n	8001d5c <HAL_ADC_Start_DMA+0x8c>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	e000      	b.n	8001d5e <HAL_ADC_Start_DMA+0x8e>
 8001d5c:	4b36      	ldr	r3, [pc, #216]	; (8001e38 <HAL_ADC_Start_DMA+0x168>)
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	6812      	ldr	r2, [r2, #0]
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d002      	beq.n	8001d6c <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d105      	bne.n	8001d78 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d70:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d006      	beq.n	8001d92 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d88:	f023 0206 	bic.w	r2, r3, #6
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	659a      	str	r2, [r3, #88]	; 0x58
 8001d90:	e002      	b.n	8001d98 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9c:	4a27      	ldr	r2, [pc, #156]	; (8001e3c <HAL_ADC_Start_DMA+0x16c>)
 8001d9e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da4:	4a26      	ldr	r2, [pc, #152]	; (8001e40 <HAL_ADC_Start_DMA+0x170>)
 8001da6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dac:	4a25      	ldr	r2, [pc, #148]	; (8001e44 <HAL_ADC_Start_DMA+0x174>)
 8001dae:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	221c      	movs	r2, #28
 8001db6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0210 	orr.w	r2, r2, #16
 8001dce:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0201 	orr.w	r2, r2, #1
 8001dde:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	3340      	adds	r3, #64	; 0x40
 8001dea:	4619      	mov	r1, r3
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f001 f8ae 	bl	8002f50 <HAL_DMA_Start_IT>
 8001df4:	4603      	mov	r3, r0
 8001df6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fdd6 	bl	80019ae <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001e02:	e00d      	b.n	8001e20 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001e0c:	e008      	b.n	8001e20 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001e1a:	e001      	b.n	8001e20 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	50040300 	.word	0x50040300
 8001e30:	50040200 	.word	0x50040200
 8001e34:	50040100 	.word	0x50040100
 8001e38:	50040000 	.word	0x50040000
 8001e3c:	08002715 	.word	0x08002715
 8001e40:	080027ed 	.word	0x080027ed
 8001e44:	08002809 	.word	0x08002809

08001e48 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b0b6      	sub	sp, #216	; 0xd8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x22>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e3c7      	b.n	8002622 <HAL_ADC_ConfigChannel+0x7b2>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fd99 	bl	80019d6 <LL_ADC_REG_IsConversionOngoing>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f040 83a8 	bne.w	80025fc <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b05      	cmp	r3, #5
 8001eb2:	d824      	bhi.n	8001efe <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	3b02      	subs	r3, #2
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d81b      	bhi.n	8001ef6 <HAL_ADC_ConfigChannel+0x86>
 8001ebe:	a201      	add	r2, pc, #4	; (adr r2, 8001ec4 <HAL_ADC_ConfigChannel+0x54>)
 8001ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec4:	08001ed5 	.word	0x08001ed5
 8001ec8:	08001edd 	.word	0x08001edd
 8001ecc:	08001ee5 	.word	0x08001ee5
 8001ed0:	08001eed 	.word	0x08001eed
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	605a      	str	r2, [r3, #4]
          break;
 8001eda:	e011      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	2212      	movs	r2, #18
 8001ee0:	605a      	str	r2, [r3, #4]
          break;
 8001ee2:	e00d      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	2218      	movs	r2, #24
 8001ee8:	605a      	str	r2, [r3, #4]
          break;
 8001eea:	e009      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ef2:	605a      	str	r2, [r3, #4]
          break;
 8001ef4:	e004      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	2206      	movs	r2, #6
 8001efa:	605a      	str	r2, [r3, #4]
          break;
 8001efc:	e000      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001efe:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	6859      	ldr	r1, [r3, #4]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	f7ff fc4f 	bl	80017b0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fd5d 	bl	80019d6 <LL_ADC_REG_IsConversionOngoing>
 8001f1c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff fd69 	bl	80019fc <LL_ADC_INJ_IsConversionOngoing>
 8001f2a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f040 81a6 	bne.w	8002284 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f040 81a1 	bne.w	8002284 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	6819      	ldr	r1, [r3, #0]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	f7ff fc5a 	bl	8001808 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	695a      	ldr	r2, [r3, #20]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	08db      	lsrs	r3, r3, #3
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d00a      	beq.n	8001f8c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6818      	ldr	r0, [r3, #0]
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	6919      	ldr	r1, [r3, #16]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f86:	f7ff fbab 	bl	80016e0 <LL_ADC_SetOffset>
 8001f8a:	e17b      	b.n	8002284 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2100      	movs	r1, #0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fbc8 	bl	8001728 <LL_ADC_GetOffsetChannel>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10a      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x148>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fbbd 	bl	8001728 <LL_ADC_GetOffsetChannel>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	0e9b      	lsrs	r3, r3, #26
 8001fb2:	f003 021f 	and.w	r2, r3, #31
 8001fb6:	e01e      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x186>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fbb2 	bl	8001728 <LL_ADC_GetOffsetChannel>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001fce:	fa93 f3a3 	rbit	r3, r3
 8001fd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001fda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001fe6:	2320      	movs	r3, #32
 8001fe8:	e004      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001fea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d105      	bne.n	800200e <HAL_ADC_ConfigChannel+0x19e>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	0e9b      	lsrs	r3, r3, #26
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	e018      	b.n	8002040 <HAL_ADC_ConfigChannel+0x1d0>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002026:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800202a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002032:	2320      	movs	r3, #32
 8002034:	e004      	b.n	8002040 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002036:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800203a:	fab3 f383 	clz	r3, r3
 800203e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002040:	429a      	cmp	r2, r3
 8002042:	d106      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2200      	movs	r2, #0
 800204a:	2100      	movs	r1, #0
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fb81 	bl	8001754 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2101      	movs	r1, #1
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fb65 	bl	8001728 <LL_ADC_GetOffsetChannel>
 800205e:	4603      	mov	r3, r0
 8002060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10a      	bne.n	800207e <HAL_ADC_ConfigChannel+0x20e>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2101      	movs	r1, #1
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff fb5a 	bl	8001728 <LL_ADC_GetOffsetChannel>
 8002074:	4603      	mov	r3, r0
 8002076:	0e9b      	lsrs	r3, r3, #26
 8002078:	f003 021f 	and.w	r2, r3, #31
 800207c:	e01e      	b.n	80020bc <HAL_ADC_ConfigChannel+0x24c>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2101      	movs	r1, #1
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fb4f 	bl	8001728 <LL_ADC_GetOffsetChannel>
 800208a:	4603      	mov	r3, r0
 800208c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002094:	fa93 f3a3 	rbit	r3, r3
 8002098:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800209c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80020a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80020a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80020ac:	2320      	movs	r3, #32
 80020ae:	e004      	b.n	80020ba <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80020b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020b4:	fab3 f383 	clz	r3, r3
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d105      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x264>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	0e9b      	lsrs	r3, r3, #26
 80020ce:	f003 031f 	and.w	r3, r3, #31
 80020d2:	e018      	b.n	8002106 <HAL_ADC_ConfigChannel+0x296>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020e0:	fa93 f3a3 	rbit	r3, r3
 80020e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80020e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80020f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80020f8:	2320      	movs	r3, #32
 80020fa:	e004      	b.n	8002106 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80020fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002100:	fab3 f383 	clz	r3, r3
 8002104:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002106:	429a      	cmp	r2, r3
 8002108:	d106      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2200      	movs	r2, #0
 8002110:	2101      	movs	r1, #1
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fb1e 	bl	8001754 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2102      	movs	r1, #2
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff fb02 	bl	8001728 <LL_ADC_GetOffsetChannel>
 8002124:	4603      	mov	r3, r0
 8002126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10a      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x2d4>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2102      	movs	r1, #2
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff faf7 	bl	8001728 <LL_ADC_GetOffsetChannel>
 800213a:	4603      	mov	r3, r0
 800213c:	0e9b      	lsrs	r3, r3, #26
 800213e:	f003 021f 	and.w	r2, r3, #31
 8002142:	e01e      	b.n	8002182 <HAL_ADC_ConfigChannel+0x312>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2102      	movs	r1, #2
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff faec 	bl	8001728 <LL_ADC_GetOffsetChannel>
 8002150:	4603      	mov	r3, r0
 8002152:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002162:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002166:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800216a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002172:	2320      	movs	r3, #32
 8002174:	e004      	b.n	8002180 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002176:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800217a:	fab3 f383 	clz	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800218a:	2b00      	cmp	r3, #0
 800218c:	d105      	bne.n	800219a <HAL_ADC_ConfigChannel+0x32a>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	0e9b      	lsrs	r3, r3, #26
 8002194:	f003 031f 	and.w	r3, r3, #31
 8002198:	e016      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x358>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80021ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80021b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80021ba:	2320      	movs	r3, #32
 80021bc:	e004      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80021be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021c2:	fab3 f383 	clz	r3, r3
 80021c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d106      	bne.n	80021da <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2200      	movs	r2, #0
 80021d2:	2102      	movs	r1, #2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff fabd 	bl	8001754 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2103      	movs	r1, #3
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff faa1 	bl	8001728 <LL_ADC_GetOffsetChannel>
 80021e6:	4603      	mov	r3, r0
 80021e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10a      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x396>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2103      	movs	r1, #3
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff fa96 	bl	8001728 <LL_ADC_GetOffsetChannel>
 80021fc:	4603      	mov	r3, r0
 80021fe:	0e9b      	lsrs	r3, r3, #26
 8002200:	f003 021f 	and.w	r2, r3, #31
 8002204:	e017      	b.n	8002236 <HAL_ADC_ConfigChannel+0x3c6>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2103      	movs	r1, #3
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fa8b 	bl	8001728 <LL_ADC_GetOffsetChannel>
 8002212:	4603      	mov	r3, r0
 8002214:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002218:	fa93 f3a3 	rbit	r3, r3
 800221c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800221e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002220:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002222:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002228:	2320      	movs	r3, #32
 800222a:	e003      	b.n	8002234 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800222c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800222e:	fab3 f383 	clz	r3, r3
 8002232:	b2db      	uxtb	r3, r3
 8002234:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800223e:	2b00      	cmp	r3, #0
 8002240:	d105      	bne.n	800224e <HAL_ADC_ConfigChannel+0x3de>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	0e9b      	lsrs	r3, r3, #26
 8002248:	f003 031f 	and.w	r3, r3, #31
 800224c:	e011      	b.n	8002272 <HAL_ADC_ConfigChannel+0x402>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002254:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002256:	fa93 f3a3 	rbit	r3, r3
 800225a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800225c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800225e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002266:	2320      	movs	r3, #32
 8002268:	e003      	b.n	8002272 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800226a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800226c:	fab3 f383 	clz	r3, r3
 8002270:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002272:	429a      	cmp	r2, r3
 8002274:	d106      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2200      	movs	r2, #0
 800227c:	2103      	movs	r1, #3
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fa68 	bl	8001754 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fb7d 	bl	8001988 <LL_ADC_IsEnabled>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	f040 813f 	bne.w	8002514 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	6819      	ldr	r1, [r3, #0]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	461a      	mov	r2, r3
 80022a4:	f7ff fadc 	bl	8001860 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	4a8e      	ldr	r2, [pc, #568]	; (80024e8 <HAL_ADC_ConfigChannel+0x678>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	f040 8130 	bne.w	8002514 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10b      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x46c>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	0e9b      	lsrs	r3, r3, #26
 80022ca:	3301      	adds	r3, #1
 80022cc:	f003 031f 	and.w	r3, r3, #31
 80022d0:	2b09      	cmp	r3, #9
 80022d2:	bf94      	ite	ls
 80022d4:	2301      	movls	r3, #1
 80022d6:	2300      	movhi	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	e019      	b.n	8002310 <HAL_ADC_ConfigChannel+0x4a0>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022e4:	fa93 f3a3 	rbit	r3, r3
 80022e8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80022ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022ec:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80022ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80022f4:	2320      	movs	r3, #32
 80022f6:	e003      	b.n	8002300 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80022f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022fa:	fab3 f383 	clz	r3, r3
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	3301      	adds	r3, #1
 8002302:	f003 031f 	and.w	r3, r3, #31
 8002306:	2b09      	cmp	r3, #9
 8002308:	bf94      	ite	ls
 800230a:	2301      	movls	r3, #1
 800230c:	2300      	movhi	r3, #0
 800230e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002310:	2b00      	cmp	r3, #0
 8002312:	d079      	beq.n	8002408 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800231c:	2b00      	cmp	r3, #0
 800231e:	d107      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x4c0>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	0e9b      	lsrs	r3, r3, #26
 8002326:	3301      	adds	r3, #1
 8002328:	069b      	lsls	r3, r3, #26
 800232a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800232e:	e015      	b.n	800235c <HAL_ADC_ConfigChannel+0x4ec>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002338:	fa93 f3a3 	rbit	r3, r3
 800233c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800233e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002340:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002348:	2320      	movs	r3, #32
 800234a:	e003      	b.n	8002354 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800234c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800234e:	fab3 f383 	clz	r3, r3
 8002352:	b2db      	uxtb	r3, r3
 8002354:	3301      	adds	r3, #1
 8002356:	069b      	lsls	r3, r3, #26
 8002358:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002364:	2b00      	cmp	r3, #0
 8002366:	d109      	bne.n	800237c <HAL_ADC_ConfigChannel+0x50c>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	0e9b      	lsrs	r3, r3, #26
 800236e:	3301      	adds	r3, #1
 8002370:	f003 031f 	and.w	r3, r3, #31
 8002374:	2101      	movs	r1, #1
 8002376:	fa01 f303 	lsl.w	r3, r1, r3
 800237a:	e017      	b.n	80023ac <HAL_ADC_ConfigChannel+0x53c>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002384:	fa93 f3a3 	rbit	r3, r3
 8002388:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800238a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800238c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800238e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002394:	2320      	movs	r3, #32
 8002396:	e003      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	3301      	adds	r3, #1
 80023a2:	f003 031f 	and.w	r3, r3, #31
 80023a6:	2101      	movs	r1, #1
 80023a8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ac:	ea42 0103 	orr.w	r1, r2, r3
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10a      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x562>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	0e9b      	lsrs	r3, r3, #26
 80023c2:	3301      	adds	r3, #1
 80023c4:	f003 021f 	and.w	r2, r3, #31
 80023c8:	4613      	mov	r3, r2
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	4413      	add	r3, r2
 80023ce:	051b      	lsls	r3, r3, #20
 80023d0:	e018      	b.n	8002404 <HAL_ADC_ConfigChannel+0x594>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023da:	fa93 f3a3 	rbit	r3, r3
 80023de:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80023e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80023e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80023ea:	2320      	movs	r3, #32
 80023ec:	e003      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80023ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023f0:	fab3 f383 	clz	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	3301      	adds	r3, #1
 80023f8:	f003 021f 	and.w	r2, r3, #31
 80023fc:	4613      	mov	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4413      	add	r3, r2
 8002402:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002404:	430b      	orrs	r3, r1
 8002406:	e080      	b.n	800250a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002410:	2b00      	cmp	r3, #0
 8002412:	d107      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x5b4>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	0e9b      	lsrs	r3, r3, #26
 800241a:	3301      	adds	r3, #1
 800241c:	069b      	lsls	r3, r3, #26
 800241e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002422:	e015      	b.n	8002450 <HAL_ADC_ConfigChannel+0x5e0>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002434:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800243c:	2320      	movs	r3, #32
 800243e:	e003      	b.n	8002448 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	3301      	adds	r3, #1
 800244a:	069b      	lsls	r3, r3, #26
 800244c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002458:	2b00      	cmp	r3, #0
 800245a:	d109      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x600>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	0e9b      	lsrs	r3, r3, #26
 8002462:	3301      	adds	r3, #1
 8002464:	f003 031f 	and.w	r3, r3, #31
 8002468:	2101      	movs	r1, #1
 800246a:	fa01 f303 	lsl.w	r3, r1, r3
 800246e:	e017      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x630>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	61fb      	str	r3, [r7, #28]
  return result;
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002488:	2320      	movs	r3, #32
 800248a:	e003      	b.n	8002494 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	fab3 f383 	clz	r3, r3
 8002492:	b2db      	uxtb	r3, r3
 8002494:	3301      	adds	r3, #1
 8002496:	f003 031f 	and.w	r3, r3, #31
 800249a:	2101      	movs	r1, #1
 800249c:	fa01 f303 	lsl.w	r3, r1, r3
 80024a0:	ea42 0103 	orr.w	r1, r2, r3
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10d      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x65c>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	0e9b      	lsrs	r3, r3, #26
 80024b6:	3301      	adds	r3, #1
 80024b8:	f003 021f 	and.w	r2, r3, #31
 80024bc:	4613      	mov	r3, r2
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	4413      	add	r3, r2
 80024c2:	3b1e      	subs	r3, #30
 80024c4:	051b      	lsls	r3, r3, #20
 80024c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024ca:	e01d      	b.n	8002508 <HAL_ADC_ConfigChannel+0x698>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	fa93 f3a3 	rbit	r3, r3
 80024d8:	613b      	str	r3, [r7, #16]
  return result;
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d103      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80024e4:	2320      	movs	r3, #32
 80024e6:	e005      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x684>
 80024e8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	fab3 f383 	clz	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	3301      	adds	r3, #1
 80024f6:	f003 021f 	and.w	r2, r3, #31
 80024fa:	4613      	mov	r3, r2
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	4413      	add	r3, r2
 8002500:	3b1e      	subs	r3, #30
 8002502:	051b      	lsls	r3, r3, #20
 8002504:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002508:	430b      	orrs	r3, r1
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	6892      	ldr	r2, [r2, #8]
 800250e:	4619      	mov	r1, r3
 8002510:	f7ff f97a 	bl	8001808 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4b44      	ldr	r3, [pc, #272]	; (800262c <HAL_ADC_ConfigChannel+0x7bc>)
 800251a:	4013      	ands	r3, r2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d07a      	beq.n	8002616 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002520:	4843      	ldr	r0, [pc, #268]	; (8002630 <HAL_ADC_ConfigChannel+0x7c0>)
 8002522:	f7ff f8cf 	bl	80016c4 <LL_ADC_GetCommonPathInternalCh>
 8002526:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a41      	ldr	r2, [pc, #260]	; (8002634 <HAL_ADC_ConfigChannel+0x7c4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d12c      	bne.n	800258e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002534:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002538:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d126      	bne.n	800258e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a3c      	ldr	r2, [pc, #240]	; (8002638 <HAL_ADC_ConfigChannel+0x7c8>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d004      	beq.n	8002554 <HAL_ADC_ConfigChannel+0x6e4>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a3b      	ldr	r2, [pc, #236]	; (800263c <HAL_ADC_ConfigChannel+0x7cc>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d15d      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002554:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002558:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800255c:	4619      	mov	r1, r3
 800255e:	4834      	ldr	r0, [pc, #208]	; (8002630 <HAL_ADC_ConfigChannel+0x7c0>)
 8002560:	f7ff f89d 	bl	800169e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002564:	4b36      	ldr	r3, [pc, #216]	; (8002640 <HAL_ADC_ConfigChannel+0x7d0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	099b      	lsrs	r3, r3, #6
 800256a:	4a36      	ldr	r2, [pc, #216]	; (8002644 <HAL_ADC_ConfigChannel+0x7d4>)
 800256c:	fba2 2303 	umull	r2, r3, r2, r3
 8002570:	099b      	lsrs	r3, r3, #6
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	4613      	mov	r3, r2
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4413      	add	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800257e:	e002      	b.n	8002586 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	3b01      	subs	r3, #1
 8002584:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1f9      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800258c:	e040      	b.n	8002610 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a2d      	ldr	r2, [pc, #180]	; (8002648 <HAL_ADC_ConfigChannel+0x7d8>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d118      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x75a>
 8002598:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800259c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d112      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a23      	ldr	r2, [pc, #140]	; (8002638 <HAL_ADC_ConfigChannel+0x7c8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d004      	beq.n	80025b8 <HAL_ADC_ConfigChannel+0x748>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a22      	ldr	r2, [pc, #136]	; (800263c <HAL_ADC_ConfigChannel+0x7cc>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d12d      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025c0:	4619      	mov	r1, r3
 80025c2:	481b      	ldr	r0, [pc, #108]	; (8002630 <HAL_ADC_ConfigChannel+0x7c0>)
 80025c4:	f7ff f86b 	bl	800169e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025c8:	e024      	b.n	8002614 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a1f      	ldr	r2, [pc, #124]	; (800264c <HAL_ADC_ConfigChannel+0x7dc>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d120      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d11a      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a14      	ldr	r2, [pc, #80]	; (8002638 <HAL_ADC_ConfigChannel+0x7c8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d115      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025f2:	4619      	mov	r1, r3
 80025f4:	480e      	ldr	r0, [pc, #56]	; (8002630 <HAL_ADC_ConfigChannel+0x7c0>)
 80025f6:	f7ff f852 	bl	800169e <LL_ADC_SetCommonPathInternalCh>
 80025fa:	e00c      	b.n	8002616 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002600:	f043 0220 	orr.w	r2, r3, #32
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800260e:	e002      	b.n	8002616 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002610:	bf00      	nop
 8002612:	e000      	b.n	8002616 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002614:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800261e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002622:	4618      	mov	r0, r3
 8002624:	37d8      	adds	r7, #216	; 0xd8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	80080000 	.word	0x80080000
 8002630:	50040300 	.word	0x50040300
 8002634:	c7520000 	.word	0xc7520000
 8002638:	50040000 	.word	0x50040000
 800263c:	50040200 	.word	0x50040200
 8002640:	20000000 	.word	0x20000000
 8002644:	053e2d63 	.word	0x053e2d63
 8002648:	cb840000 	.word	0xcb840000
 800264c:	80000001 	.word	0x80000001

08002650 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff f993 	bl	8001988 <LL_ADC_IsEnabled>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d14d      	bne.n	8002704 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	4b28      	ldr	r3, [pc, #160]	; (8002710 <ADC_Enable+0xc0>)
 8002670:	4013      	ands	r3, r2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00d      	beq.n	8002692 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267a:	f043 0210 	orr.w	r2, r3, #16
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002686:	f043 0201 	orr.w	r2, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e039      	b.n	8002706 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff f962 	bl	8001960 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800269c:	f7fe ffe0 	bl	8001660 <HAL_GetTick>
 80026a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026a2:	e028      	b.n	80026f6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff f96d 	bl	8001988 <LL_ADC_IsEnabled>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d104      	bne.n	80026be <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff f951 	bl	8001960 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026be:	f7fe ffcf 	bl	8001660 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d914      	bls.n	80026f6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d00d      	beq.n	80026f6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026de:	f043 0210 	orr.w	r2, r3, #16
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ea:	f043 0201 	orr.w	r2, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e007      	b.n	8002706 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b01      	cmp	r3, #1
 8002702:	d1cf      	bne.n	80026a4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	8000003f 	.word	0x8000003f

08002714 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002726:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800272a:	2b00      	cmp	r3, #0
 800272c:	d14b      	bne.n	80027c6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002732:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d021      	beq.n	800278c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff f81c 	bl	800178a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d032      	beq.n	80027be <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d12b      	bne.n	80027be <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002776:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d11f      	bne.n	80027be <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002782:	f043 0201 	orr.w	r2, r3, #1
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	655a      	str	r2, [r3, #84]	; 0x54
 800278a:	e018      	b.n	80027be <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d111      	bne.n	80027be <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d105      	bne.n	80027be <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b6:	f043 0201 	orr.w	r2, r3, #1
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f7fe fa60 	bl	8000c84 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027c4:	e00e      	b.n	80027e4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ca:	f003 0310 	and.w	r3, r3, #16
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f7ff fb42 	bl	8001e5c <HAL_ADC_ErrorCallback>
}
 80027d8:	e004      	b.n	80027e4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	4798      	blx	r3
}
 80027e4:	bf00      	nop
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f7ff fb24 	bl	8001e48 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002800:	bf00      	nop
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002826:	f043 0204 	orr.w	r2, r3, #4
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f7ff fb14 	bl	8001e5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002834:	bf00      	nop
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <LL_ADC_IsEnabled>:
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <LL_ADC_IsEnabled+0x18>
 8002850:	2301      	movs	r3, #1
 8002852:	e000      	b.n	8002856 <LL_ADC_IsEnabled+0x1a>
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <LL_ADC_REG_IsConversionOngoing>:
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	2b04      	cmp	r3, #4
 8002874:	d101      	bne.n	800287a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	b09f      	sub	sp, #124	; 0x7c
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d101      	bne.n	80028a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028a2:	2302      	movs	r3, #2
 80028a4:	e093      	b.n	80029ce <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80028ae:	2300      	movs	r3, #0
 80028b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80028b2:	2300      	movs	r3, #0
 80028b4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a47      	ldr	r2, [pc, #284]	; (80029d8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d102      	bne.n	80028c6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80028c0:	4b46      	ldr	r3, [pc, #280]	; (80029dc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	e001      	b.n	80028ca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80028c6:	2300      	movs	r3, #0
 80028c8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10b      	bne.n	80028e8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d4:	f043 0220 	orr.w	r2, r3, #32
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e072      	b.n	80029ce <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff ffb9 	bl	8002862 <LL_ADC_REG_IsConversionOngoing>
 80028f0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff ffb3 	bl	8002862 <LL_ADC_REG_IsConversionOngoing>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d154      	bne.n	80029ac <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002902:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002904:	2b00      	cmp	r3, #0
 8002906:	d151      	bne.n	80029ac <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002908:	4b35      	ldr	r3, [pc, #212]	; (80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800290a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d02c      	beq.n	800296e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	6859      	ldr	r1, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002926:	035b      	lsls	r3, r3, #13
 8002928:	430b      	orrs	r3, r1
 800292a:	431a      	orrs	r2, r3
 800292c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800292e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002930:	4829      	ldr	r0, [pc, #164]	; (80029d8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002932:	f7ff ff83 	bl	800283c <LL_ADC_IsEnabled>
 8002936:	4604      	mov	r4, r0
 8002938:	4828      	ldr	r0, [pc, #160]	; (80029dc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800293a:	f7ff ff7f 	bl	800283c <LL_ADC_IsEnabled>
 800293e:	4603      	mov	r3, r0
 8002940:	431c      	orrs	r4, r3
 8002942:	4828      	ldr	r0, [pc, #160]	; (80029e4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002944:	f7ff ff7a 	bl	800283c <LL_ADC_IsEnabled>
 8002948:	4603      	mov	r3, r0
 800294a:	4323      	orrs	r3, r4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d137      	bne.n	80029c0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002958:	f023 030f 	bic.w	r3, r3, #15
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	6811      	ldr	r1, [r2, #0]
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	6892      	ldr	r2, [r2, #8]
 8002964:	430a      	orrs	r2, r1
 8002966:	431a      	orrs	r2, r3
 8002968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800296a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800296c:	e028      	b.n	80029c0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800296e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002978:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800297a:	4817      	ldr	r0, [pc, #92]	; (80029d8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800297c:	f7ff ff5e 	bl	800283c <LL_ADC_IsEnabled>
 8002980:	4604      	mov	r4, r0
 8002982:	4816      	ldr	r0, [pc, #88]	; (80029dc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002984:	f7ff ff5a 	bl	800283c <LL_ADC_IsEnabled>
 8002988:	4603      	mov	r3, r0
 800298a:	431c      	orrs	r4, r3
 800298c:	4815      	ldr	r0, [pc, #84]	; (80029e4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800298e:	f7ff ff55 	bl	800283c <LL_ADC_IsEnabled>
 8002992:	4603      	mov	r3, r0
 8002994:	4323      	orrs	r3, r4
 8002996:	2b00      	cmp	r3, #0
 8002998:	d112      	bne.n	80029c0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800299a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029a2:	f023 030f 	bic.w	r3, r3, #15
 80029a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029a8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029aa:	e009      	b.n	80029c0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b0:	f043 0220 	orr.w	r2, r3, #32
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80029be:	e000      	b.n	80029c2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80029ca:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	377c      	adds	r7, #124	; 0x7c
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd90      	pop	{r4, r7, pc}
 80029d6:	bf00      	nop
 80029d8:	50040000 	.word	0x50040000
 80029dc:	50040100 	.word	0x50040100
 80029e0:	50040300 	.word	0x50040300
 80029e4:	50040200 	.word	0x50040200

080029e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f8:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <__NVIC_SetPriorityGrouping+0x44>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a04:	4013      	ands	r3, r2
 8002a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a1a:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <__NVIC_SetPriorityGrouping+0x44>)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	60d3      	str	r3, [r2, #12]
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a34:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <__NVIC_GetPriorityGrouping+0x18>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	0a1b      	lsrs	r3, r3, #8
 8002a3a:	f003 0307 	and.w	r3, r3, #7
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	db0b      	blt.n	8002a76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	f003 021f 	and.w	r2, r3, #31
 8002a64:	4907      	ldr	r1, [pc, #28]	; (8002a84 <__NVIC_EnableIRQ+0x38>)
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	095b      	lsrs	r3, r3, #5
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	e000e100 	.word	0xe000e100

08002a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	6039      	str	r1, [r7, #0]
 8002a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	db0a      	blt.n	8002ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	490c      	ldr	r1, [pc, #48]	; (8002ad4 <__NVIC_SetPriority+0x4c>)
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	0112      	lsls	r2, r2, #4
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	440b      	add	r3, r1
 8002aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ab0:	e00a      	b.n	8002ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	4908      	ldr	r1, [pc, #32]	; (8002ad8 <__NVIC_SetPriority+0x50>)
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	3b04      	subs	r3, #4
 8002ac0:	0112      	lsls	r2, r2, #4
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	761a      	strb	r2, [r3, #24]
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	e000e100 	.word	0xe000e100
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b089      	sub	sp, #36	; 0x24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f1c3 0307 	rsb	r3, r3, #7
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	bf28      	it	cs
 8002afa:	2304      	movcs	r3, #4
 8002afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	3304      	adds	r3, #4
 8002b02:	2b06      	cmp	r3, #6
 8002b04:	d902      	bls.n	8002b0c <NVIC_EncodePriority+0x30>
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3b03      	subs	r3, #3
 8002b0a:	e000      	b.n	8002b0e <NVIC_EncodePriority+0x32>
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b10:	f04f 32ff 	mov.w	r2, #4294967295
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43da      	mvns	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	401a      	ands	r2, r3
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b24:	f04f 31ff 	mov.w	r1, #4294967295
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2e:	43d9      	mvns	r1, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b34:	4313      	orrs	r3, r2
         );
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3724      	adds	r7, #36	; 0x24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
	...

08002b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b54:	d301      	bcc.n	8002b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b56:	2301      	movs	r3, #1
 8002b58:	e00f      	b.n	8002b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b5a:	4a0a      	ldr	r2, [pc, #40]	; (8002b84 <SysTick_Config+0x40>)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b62:	210f      	movs	r1, #15
 8002b64:	f04f 30ff 	mov.w	r0, #4294967295
 8002b68:	f7ff ff8e 	bl	8002a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <SysTick_Config+0x40>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b72:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <SysTick_Config+0x40>)
 8002b74:	2207      	movs	r2, #7
 8002b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	e000e010 	.word	0xe000e010

08002b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff ff29 	bl	80029e8 <__NVIC_SetPriorityGrouping>
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b086      	sub	sp, #24
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
 8002baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bb0:	f7ff ff3e 	bl	8002a30 <__NVIC_GetPriorityGrouping>
 8002bb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68b9      	ldr	r1, [r7, #8]
 8002bba:	6978      	ldr	r0, [r7, #20]
 8002bbc:	f7ff ff8e 	bl	8002adc <NVIC_EncodePriority>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff ff5d 	bl	8002a88 <__NVIC_SetPriority>
}
 8002bce:	bf00      	nop
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	4603      	mov	r3, r0
 8002bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ff31 	bl	8002a4c <__NVIC_EnableIRQ>
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff ffa2 	bl	8002b44 <SysTick_Config>
 8002c00:	4603      	mov	r3, r0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e054      	b.n	8002cc8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	7f5b      	ldrb	r3, [r3, #29]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d105      	bne.n	8002c34 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7fe f886 	bl	8000d40 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	791b      	ldrb	r3, [r3, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10c      	bne.n	8002c5c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a22      	ldr	r2, [pc, #136]	; (8002cd0 <HAL_CRC_Init+0xc4>)
 8002c48:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 0218 	bic.w	r2, r2, #24
 8002c58:	609a      	str	r2, [r3, #8]
 8002c5a:	e00c      	b.n	8002c76 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6899      	ldr	r1, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	461a      	mov	r2, r3
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f834 	bl	8002cd4 <HAL_CRCEx_Polynomial_Set>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e028      	b.n	8002cc8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	795b      	ldrb	r3, [r3, #5]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d105      	bne.n	8002c8a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f04f 32ff 	mov.w	r2, #4294967295
 8002c86:	611a      	str	r2, [r3, #16]
 8002c88:	e004      	b.n	8002c94 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6912      	ldr	r2, [r2, #16]
 8002c92:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	695a      	ldr	r2, [r3, #20]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	699a      	ldr	r2, [r3, #24]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	04c11db7 	.word	0x04c11db7

08002cd4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b087      	sub	sp, #28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002ce4:	231f      	movs	r3, #31
 8002ce6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002ce8:	bf00      	nop
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1e5a      	subs	r2, r3, #1
 8002cee:	613a      	str	r2, [r7, #16]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d009      	beq.n	8002d08 <HAL_CRCEx_Polynomial_Set+0x34>
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	f003 031f 	and.w	r3, r3, #31
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_CRCEx_Polynomial_Set+0x16>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b18      	cmp	r3, #24
 8002d0c:	d846      	bhi.n	8002d9c <HAL_CRCEx_Polynomial_Set+0xc8>
 8002d0e:	a201      	add	r2, pc, #4	; (adr r2, 8002d14 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d14:	08002da3 	.word	0x08002da3
 8002d18:	08002d9d 	.word	0x08002d9d
 8002d1c:	08002d9d 	.word	0x08002d9d
 8002d20:	08002d9d 	.word	0x08002d9d
 8002d24:	08002d9d 	.word	0x08002d9d
 8002d28:	08002d9d 	.word	0x08002d9d
 8002d2c:	08002d9d 	.word	0x08002d9d
 8002d30:	08002d9d 	.word	0x08002d9d
 8002d34:	08002d91 	.word	0x08002d91
 8002d38:	08002d9d 	.word	0x08002d9d
 8002d3c:	08002d9d 	.word	0x08002d9d
 8002d40:	08002d9d 	.word	0x08002d9d
 8002d44:	08002d9d 	.word	0x08002d9d
 8002d48:	08002d9d 	.word	0x08002d9d
 8002d4c:	08002d9d 	.word	0x08002d9d
 8002d50:	08002d9d 	.word	0x08002d9d
 8002d54:	08002d85 	.word	0x08002d85
 8002d58:	08002d9d 	.word	0x08002d9d
 8002d5c:	08002d9d 	.word	0x08002d9d
 8002d60:	08002d9d 	.word	0x08002d9d
 8002d64:	08002d9d 	.word	0x08002d9d
 8002d68:	08002d9d 	.word	0x08002d9d
 8002d6c:	08002d9d 	.word	0x08002d9d
 8002d70:	08002d9d 	.word	0x08002d9d
 8002d74:	08002d79 	.word	0x08002d79
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	2b06      	cmp	r3, #6
 8002d7c:	d913      	bls.n	8002da6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002d82:	e010      	b.n	8002da6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	2b07      	cmp	r3, #7
 8002d88:	d90f      	bls.n	8002daa <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002d8e:	e00c      	b.n	8002daa <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	2b0f      	cmp	r3, #15
 8002d94:	d90b      	bls.n	8002dae <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002d9a:	e008      	b.n	8002dae <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8002da0:	e006      	b.n	8002db0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002da2:	bf00      	nop
 8002da4:	e004      	b.n	8002db0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002da6:	bf00      	nop
 8002da8:	e002      	b.n	8002db0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002daa:	bf00      	nop
 8002dac:	e000      	b.n	8002db0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002dae:	bf00      	nop
  }
  if (status == HAL_OK)
 8002db0:	7dfb      	ldrb	r3, [r7, #23]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10d      	bne.n	8002dd2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f023 0118 	bic.w	r1, r3, #24
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	371c      	adds	r7, #28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e098      	b.n	8002f24 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	461a      	mov	r2, r3
 8002df8:	4b4d      	ldr	r3, [pc, #308]	; (8002f30 <HAL_DMA_Init+0x150>)
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d80f      	bhi.n	8002e1e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	4b4b      	ldr	r3, [pc, #300]	; (8002f34 <HAL_DMA_Init+0x154>)
 8002e06:	4413      	add	r3, r2
 8002e08:	4a4b      	ldr	r2, [pc, #300]	; (8002f38 <HAL_DMA_Init+0x158>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	091b      	lsrs	r3, r3, #4
 8002e10:	009a      	lsls	r2, r3, #2
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a48      	ldr	r2, [pc, #288]	; (8002f3c <HAL_DMA_Init+0x15c>)
 8002e1a:	641a      	str	r2, [r3, #64]	; 0x40
 8002e1c:	e00e      	b.n	8002e3c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	4b46      	ldr	r3, [pc, #280]	; (8002f40 <HAL_DMA_Init+0x160>)
 8002e26:	4413      	add	r3, r2
 8002e28:	4a43      	ldr	r2, [pc, #268]	; (8002f38 <HAL_DMA_Init+0x158>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	091b      	lsrs	r3, r3, #4
 8002e30:	009a      	lsls	r2, r3, #2
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a42      	ldr	r2, [pc, #264]	; (8002f44 <HAL_DMA_Init+0x164>)
 8002e3a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e56:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002e60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e96:	d039      	beq.n	8002f0c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	4a27      	ldr	r2, [pc, #156]	; (8002f3c <HAL_DMA_Init+0x15c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d11a      	bne.n	8002ed8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ea2:	4b29      	ldr	r3, [pc, #164]	; (8002f48 <HAL_DMA_Init+0x168>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	f003 031c 	and.w	r3, r3, #28
 8002eae:	210f      	movs	r1, #15
 8002eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	4924      	ldr	r1, [pc, #144]	; (8002f48 <HAL_DMA_Init+0x168>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ebc:	4b22      	ldr	r3, [pc, #136]	; (8002f48 <HAL_DMA_Init+0x168>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6859      	ldr	r1, [r3, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec8:	f003 031c 	and.w	r3, r3, #28
 8002ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed0:	491d      	ldr	r1, [pc, #116]	; (8002f48 <HAL_DMA_Init+0x168>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	600b      	str	r3, [r1, #0]
 8002ed6:	e019      	b.n	8002f0c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ed8:	4b1c      	ldr	r3, [pc, #112]	; (8002f4c <HAL_DMA_Init+0x16c>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee0:	f003 031c 	and.w	r3, r3, #28
 8002ee4:	210f      	movs	r1, #15
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	43db      	mvns	r3, r3
 8002eec:	4917      	ldr	r1, [pc, #92]	; (8002f4c <HAL_DMA_Init+0x16c>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ef2:	4b16      	ldr	r3, [pc, #88]	; (8002f4c <HAL_DMA_Init+0x16c>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6859      	ldr	r1, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	f003 031c 	and.w	r3, r3, #28
 8002f02:	fa01 f303 	lsl.w	r3, r1, r3
 8002f06:	4911      	ldr	r1, [pc, #68]	; (8002f4c <HAL_DMA_Init+0x16c>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	40020407 	.word	0x40020407
 8002f34:	bffdfff8 	.word	0xbffdfff8
 8002f38:	cccccccd 	.word	0xcccccccd
 8002f3c:	40020000 	.word	0x40020000
 8002f40:	bffdfbf8 	.word	0xbffdfbf8
 8002f44:	40020400 	.word	0x40020400
 8002f48:	400200a8 	.word	0x400200a8
 8002f4c:	400204a8 	.word	0x400204a8

08002f50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_DMA_Start_IT+0x20>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e04b      	b.n	8003008 <HAL_DMA_Start_IT+0xb8>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d13a      	bne.n	8002ffa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0201 	bic.w	r2, r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	68b9      	ldr	r1, [r7, #8]
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f8e0 	bl	800316e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d008      	beq.n	8002fc8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f042 020e 	orr.w	r2, r2, #14
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	e00f      	b.n	8002fe8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0204 	bic.w	r2, r2, #4
 8002fd6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 020a 	orr.w	r2, r2, #10
 8002fe6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0201 	orr.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	e005      	b.n	8003006 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003002:	2302      	movs	r3, #2
 8003004:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003006:	7dfb      	ldrb	r3, [r7, #23]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302c:	f003 031c 	and.w	r3, r3, #28
 8003030:	2204      	movs	r2, #4
 8003032:	409a      	lsls	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4013      	ands	r3, r2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d026      	beq.n	800308a <HAL_DMA_IRQHandler+0x7a>
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b00      	cmp	r3, #0
 8003044:	d021      	beq.n	800308a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0320 	and.w	r3, r3, #32
 8003050:	2b00      	cmp	r3, #0
 8003052:	d107      	bne.n	8003064 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0204 	bic.w	r2, r2, #4
 8003062:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003068:	f003 021c 	and.w	r2, r3, #28
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	2104      	movs	r1, #4
 8003072:	fa01 f202 	lsl.w	r2, r1, r2
 8003076:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307c:	2b00      	cmp	r3, #0
 800307e:	d071      	beq.n	8003164 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003088:	e06c      	b.n	8003164 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308e:	f003 031c 	and.w	r3, r3, #28
 8003092:	2202      	movs	r2, #2
 8003094:	409a      	lsls	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4013      	ands	r3, r2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d02e      	beq.n	80030fc <HAL_DMA_IRQHandler+0xec>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d029      	beq.n	80030fc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10b      	bne.n	80030ce <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 020a 	bic.w	r2, r2, #10
 80030c4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	f003 021c 	and.w	r2, r3, #28
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	2102      	movs	r1, #2
 80030dc:	fa01 f202 	lsl.w	r2, r1, r2
 80030e0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d038      	beq.n	8003164 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80030fa:	e033      	b.n	8003164 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003100:	f003 031c 	and.w	r3, r3, #28
 8003104:	2208      	movs	r2, #8
 8003106:	409a      	lsls	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4013      	ands	r3, r2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d02a      	beq.n	8003166 <HAL_DMA_IRQHandler+0x156>
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	2b00      	cmp	r3, #0
 8003118:	d025      	beq.n	8003166 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 020e 	bic.w	r2, r2, #14
 8003128:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312e:	f003 021c 	and.w	r2, r3, #28
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	2101      	movs	r1, #1
 8003138:	fa01 f202 	lsl.w	r2, r1, r2
 800313c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003158:	2b00      	cmp	r3, #0
 800315a:	d004      	beq.n	8003166 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003164:	bf00      	nop
 8003166:	bf00      	nop
}
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800316e:	b480      	push	{r7}
 8003170:	b085      	sub	sp, #20
 8003172:	af00      	add	r7, sp, #0
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	607a      	str	r2, [r7, #4]
 800317a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003180:	f003 021c 	and.w	r2, r3, #28
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	2101      	movs	r1, #1
 800318a:	fa01 f202 	lsl.w	r2, r1, r2
 800318e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b10      	cmp	r3, #16
 800319e:	d108      	bne.n	80031b2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031b0:	e007      	b.n	80031c2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	60da      	str	r2, [r3, #12]
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
	...

080031d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b087      	sub	sp, #28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031de:	e17f      	b.n	80034e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	2101      	movs	r1, #1
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ec:	4013      	ands	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 8171 	beq.w	80034da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 0303 	and.w	r3, r3, #3
 8003200:	2b01      	cmp	r3, #1
 8003202:	d005      	beq.n	8003210 <HAL_GPIO_Init+0x40>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d130      	bne.n	8003272 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	2203      	movs	r2, #3
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4013      	ands	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4313      	orrs	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003246:	2201      	movs	r2, #1
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4013      	ands	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	091b      	lsrs	r3, r3, #4
 800325c:	f003 0201 	and.w	r2, r3, #1
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	2b03      	cmp	r3, #3
 800327c:	d118      	bne.n	80032b0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003282:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003284:	2201      	movs	r2, #1
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4013      	ands	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	08db      	lsrs	r3, r3, #3
 800329a:	f003 0201 	and.w	r2, r3, #1
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 0303 	and.w	r3, r3, #3
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d017      	beq.n	80032ec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	2203      	movs	r2, #3
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4013      	ands	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d123      	bne.n	8003340 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	08da      	lsrs	r2, r3, #3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3208      	adds	r2, #8
 8003300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003304:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	220f      	movs	r2, #15
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	43db      	mvns	r3, r3
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4013      	ands	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	08da      	lsrs	r2, r3, #3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3208      	adds	r2, #8
 800333a:	6939      	ldr	r1, [r7, #16]
 800333c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	2203      	movs	r2, #3
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	43db      	mvns	r3, r3
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4013      	ands	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 0203 	and.w	r2, r3, #3
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 80ac 	beq.w	80034da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003382:	4b5f      	ldr	r3, [pc, #380]	; (8003500 <HAL_GPIO_Init+0x330>)
 8003384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003386:	4a5e      	ldr	r2, [pc, #376]	; (8003500 <HAL_GPIO_Init+0x330>)
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	6613      	str	r3, [r2, #96]	; 0x60
 800338e:	4b5c      	ldr	r3, [pc, #368]	; (8003500 <HAL_GPIO_Init+0x330>)
 8003390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	60bb      	str	r3, [r7, #8]
 8003398:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800339a:	4a5a      	ldr	r2, [pc, #360]	; (8003504 <HAL_GPIO_Init+0x334>)
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	089b      	lsrs	r3, r3, #2
 80033a0:	3302      	adds	r3, #2
 80033a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	220f      	movs	r2, #15
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4013      	ands	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033c4:	d025      	beq.n	8003412 <HAL_GPIO_Init+0x242>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a4f      	ldr	r2, [pc, #316]	; (8003508 <HAL_GPIO_Init+0x338>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d01f      	beq.n	800340e <HAL_GPIO_Init+0x23e>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a4e      	ldr	r2, [pc, #312]	; (800350c <HAL_GPIO_Init+0x33c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d019      	beq.n	800340a <HAL_GPIO_Init+0x23a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a4d      	ldr	r2, [pc, #308]	; (8003510 <HAL_GPIO_Init+0x340>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d013      	beq.n	8003406 <HAL_GPIO_Init+0x236>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a4c      	ldr	r2, [pc, #304]	; (8003514 <HAL_GPIO_Init+0x344>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00d      	beq.n	8003402 <HAL_GPIO_Init+0x232>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a4b      	ldr	r2, [pc, #300]	; (8003518 <HAL_GPIO_Init+0x348>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d007      	beq.n	80033fe <HAL_GPIO_Init+0x22e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a4a      	ldr	r2, [pc, #296]	; (800351c <HAL_GPIO_Init+0x34c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d101      	bne.n	80033fa <HAL_GPIO_Init+0x22a>
 80033f6:	2306      	movs	r3, #6
 80033f8:	e00c      	b.n	8003414 <HAL_GPIO_Init+0x244>
 80033fa:	2307      	movs	r3, #7
 80033fc:	e00a      	b.n	8003414 <HAL_GPIO_Init+0x244>
 80033fe:	2305      	movs	r3, #5
 8003400:	e008      	b.n	8003414 <HAL_GPIO_Init+0x244>
 8003402:	2304      	movs	r3, #4
 8003404:	e006      	b.n	8003414 <HAL_GPIO_Init+0x244>
 8003406:	2303      	movs	r3, #3
 8003408:	e004      	b.n	8003414 <HAL_GPIO_Init+0x244>
 800340a:	2302      	movs	r3, #2
 800340c:	e002      	b.n	8003414 <HAL_GPIO_Init+0x244>
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <HAL_GPIO_Init+0x244>
 8003412:	2300      	movs	r3, #0
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	f002 0203 	and.w	r2, r2, #3
 800341a:	0092      	lsls	r2, r2, #2
 800341c:	4093      	lsls	r3, r2
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003424:	4937      	ldr	r1, [pc, #220]	; (8003504 <HAL_GPIO_Init+0x334>)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	089b      	lsrs	r3, r3, #2
 800342a:	3302      	adds	r3, #2
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003432:	4b3b      	ldr	r3, [pc, #236]	; (8003520 <HAL_GPIO_Init+0x350>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	43db      	mvns	r3, r3
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	4013      	ands	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003456:	4a32      	ldr	r2, [pc, #200]	; (8003520 <HAL_GPIO_Init+0x350>)
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800345c:	4b30      	ldr	r3, [pc, #192]	; (8003520 <HAL_GPIO_Init+0x350>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	43db      	mvns	r3, r3
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4013      	ands	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4313      	orrs	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003480:	4a27      	ldr	r2, [pc, #156]	; (8003520 <HAL_GPIO_Init+0x350>)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003486:	4b26      	ldr	r3, [pc, #152]	; (8003520 <HAL_GPIO_Init+0x350>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	43db      	mvns	r3, r3
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	4013      	ands	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034aa:	4a1d      	ldr	r2, [pc, #116]	; (8003520 <HAL_GPIO_Init+0x350>)
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80034b0:	4b1b      	ldr	r3, [pc, #108]	; (8003520 <HAL_GPIO_Init+0x350>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	43db      	mvns	r3, r3
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4013      	ands	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034d4:	4a12      	ldr	r2, [pc, #72]	; (8003520 <HAL_GPIO_Init+0x350>)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	3301      	adds	r3, #1
 80034de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f47f ae78 	bne.w	80031e0 <HAL_GPIO_Init+0x10>
  }
}
 80034f0:	bf00      	nop
 80034f2:	bf00      	nop
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40021000 	.word	0x40021000
 8003504:	40010000 	.word	0x40010000
 8003508:	48000400 	.word	0x48000400
 800350c:	48000800 	.word	0x48000800
 8003510:	48000c00 	.word	0x48000c00
 8003514:	48001000 	.word	0x48001000
 8003518:	48001400 	.word	0x48001400
 800351c:	48001800 	.word	0x48001800
 8003520:	40010400 	.word	0x40010400

08003524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	807b      	strh	r3, [r7, #2]
 8003530:	4613      	mov	r3, r2
 8003532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003534:	787b      	ldrb	r3, [r7, #1]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800353a:	887a      	ldrh	r2, [r7, #2]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003540:	e002      	b.n	8003548 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003542:	887a      	ldrh	r2, [r7, #2]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800355e:	4b08      	ldr	r3, [pc, #32]	; (8003580 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003560:	695a      	ldr	r2, [r3, #20]
 8003562:	88fb      	ldrh	r3, [r7, #6]
 8003564:	4013      	ands	r3, r2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d006      	beq.n	8003578 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800356a:	4a05      	ldr	r2, [pc, #20]	; (8003580 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800356c:	88fb      	ldrh	r3, [r7, #6]
 800356e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	4618      	mov	r0, r3
 8003574:	f7fd fbae 	bl	8000cd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003578:	bf00      	nop
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40010400 	.word	0x40010400

08003584 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003588:	4b04      	ldr	r3, [pc, #16]	; (800359c <HAL_PWREx_GetVoltageRange+0x18>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003590:	4618      	mov	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40007000 	.word	0x40007000

080035a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ae:	d130      	bne.n	8003612 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80035b0:	4b23      	ldr	r3, [pc, #140]	; (8003640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035bc:	d038      	beq.n	8003630 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035be:	4b20      	ldr	r3, [pc, #128]	; (8003640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035c6:	4a1e      	ldr	r2, [pc, #120]	; (8003640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035ce:	4b1d      	ldr	r3, [pc, #116]	; (8003644 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2232      	movs	r2, #50	; 0x32
 80035d4:	fb02 f303 	mul.w	r3, r2, r3
 80035d8:	4a1b      	ldr	r2, [pc, #108]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80035da:	fba2 2303 	umull	r2, r3, r2, r3
 80035de:	0c9b      	lsrs	r3, r3, #18
 80035e0:	3301      	adds	r3, #1
 80035e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035e4:	e002      	b.n	80035ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035ec:	4b14      	ldr	r3, [pc, #80]	; (8003640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f8:	d102      	bne.n	8003600 <HAL_PWREx_ControlVoltageScaling+0x60>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1f2      	bne.n	80035e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003600:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800360c:	d110      	bne.n	8003630 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e00f      	b.n	8003632 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003612:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800361a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800361e:	d007      	beq.n	8003630 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003620:	4b07      	ldr	r3, [pc, #28]	; (8003640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003628:	4a05      	ldr	r2, [pc, #20]	; (8003640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800362a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800362e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40007000 	.word	0x40007000
 8003644:	20000000 	.word	0x20000000
 8003648:	431bde83 	.word	0x431bde83

0800364c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e3d4      	b.n	8003e08 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800365e:	4ba1      	ldr	r3, [pc, #644]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003668:	4b9e      	ldr	r3, [pc, #632]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f003 0303 	and.w	r3, r3, #3
 8003670:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0310 	and.w	r3, r3, #16
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 80e4 	beq.w	8003848 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d007      	beq.n	8003696 <HAL_RCC_OscConfig+0x4a>
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	2b0c      	cmp	r3, #12
 800368a:	f040 808b 	bne.w	80037a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2b01      	cmp	r3, #1
 8003692:	f040 8087 	bne.w	80037a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003696:	4b93      	ldr	r3, [pc, #588]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d005      	beq.n	80036ae <HAL_RCC_OscConfig+0x62>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e3ac      	b.n	8003e08 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1a      	ldr	r2, [r3, #32]
 80036b2:	4b8c      	ldr	r3, [pc, #560]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d004      	beq.n	80036c8 <HAL_RCC_OscConfig+0x7c>
 80036be:	4b89      	ldr	r3, [pc, #548]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036c6:	e005      	b.n	80036d4 <HAL_RCC_OscConfig+0x88>
 80036c8:	4b86      	ldr	r3, [pc, #536]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 80036ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ce:	091b      	lsrs	r3, r3, #4
 80036d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d223      	bcs.n	8003720 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 fd41 	bl	8004164 <RCC_SetFlashLatencyFromMSIRange>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e38d      	b.n	8003e08 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036ec:	4b7d      	ldr	r3, [pc, #500]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a7c      	ldr	r2, [pc, #496]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 80036f2:	f043 0308 	orr.w	r3, r3, #8
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	4b7a      	ldr	r3, [pc, #488]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	4977      	ldr	r1, [pc, #476]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 8003706:	4313      	orrs	r3, r2
 8003708:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800370a:	4b76      	ldr	r3, [pc, #472]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	021b      	lsls	r3, r3, #8
 8003718:	4972      	ldr	r1, [pc, #456]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 800371a:	4313      	orrs	r3, r2
 800371c:	604b      	str	r3, [r1, #4]
 800371e:	e025      	b.n	800376c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003720:	4b70      	ldr	r3, [pc, #448]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a6f      	ldr	r2, [pc, #444]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 8003726:	f043 0308 	orr.w	r3, r3, #8
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	4b6d      	ldr	r3, [pc, #436]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	496a      	ldr	r1, [pc, #424]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 800373a:	4313      	orrs	r3, r2
 800373c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800373e:	4b69      	ldr	r3, [pc, #420]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	021b      	lsls	r3, r3, #8
 800374c:	4965      	ldr	r1, [pc, #404]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 800374e:	4313      	orrs	r3, r2
 8003750:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d109      	bne.n	800376c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	4618      	mov	r0, r3
 800375e:	f000 fd01 	bl	8004164 <RCC_SetFlashLatencyFromMSIRange>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e34d      	b.n	8003e08 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800376c:	f000 fc36 	bl	8003fdc <HAL_RCC_GetSysClockFreq>
 8003770:	4602      	mov	r2, r0
 8003772:	4b5c      	ldr	r3, [pc, #368]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	091b      	lsrs	r3, r3, #4
 8003778:	f003 030f 	and.w	r3, r3, #15
 800377c:	495a      	ldr	r1, [pc, #360]	; (80038e8 <HAL_RCC_OscConfig+0x29c>)
 800377e:	5ccb      	ldrb	r3, [r1, r3]
 8003780:	f003 031f 	and.w	r3, r3, #31
 8003784:	fa22 f303 	lsr.w	r3, r2, r3
 8003788:	4a58      	ldr	r2, [pc, #352]	; (80038ec <HAL_RCC_OscConfig+0x2a0>)
 800378a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800378c:	4b58      	ldr	r3, [pc, #352]	; (80038f0 <HAL_RCC_OscConfig+0x2a4>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f7fd ff15 	bl	80015c0 <HAL_InitTick>
 8003796:	4603      	mov	r3, r0
 8003798:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d052      	beq.n	8003846 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	e331      	b.n	8003e08 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d032      	beq.n	8003812 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037ac:	4b4d      	ldr	r3, [pc, #308]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a4c      	ldr	r2, [pc, #304]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037b8:	f7fd ff52 	bl	8001660 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037c0:	f7fd ff4e 	bl	8001660 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e31a      	b.n	8003e08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037d2:	4b44      	ldr	r3, [pc, #272]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0f0      	beq.n	80037c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037de:	4b41      	ldr	r3, [pc, #260]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a40      	ldr	r2, [pc, #256]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 80037e4:	f043 0308 	orr.w	r3, r3, #8
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	4b3e      	ldr	r3, [pc, #248]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	493b      	ldr	r1, [pc, #236]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037fc:	4b39      	ldr	r3, [pc, #228]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	021b      	lsls	r3, r3, #8
 800380a:	4936      	ldr	r1, [pc, #216]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 800380c:	4313      	orrs	r3, r2
 800380e:	604b      	str	r3, [r1, #4]
 8003810:	e01a      	b.n	8003848 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003812:	4b34      	ldr	r3, [pc, #208]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a33      	ldr	r2, [pc, #204]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 8003818:	f023 0301 	bic.w	r3, r3, #1
 800381c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800381e:	f7fd ff1f 	bl	8001660 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003826:	f7fd ff1b 	bl	8001660 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e2e7      	b.n	8003e08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003838:	4b2a      	ldr	r3, [pc, #168]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1f0      	bne.n	8003826 <HAL_RCC_OscConfig+0x1da>
 8003844:	e000      	b.n	8003848 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003846:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d074      	beq.n	800393e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	2b08      	cmp	r3, #8
 8003858:	d005      	beq.n	8003866 <HAL_RCC_OscConfig+0x21a>
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	2b0c      	cmp	r3, #12
 800385e:	d10e      	bne.n	800387e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2b03      	cmp	r3, #3
 8003864:	d10b      	bne.n	800387e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003866:	4b1f      	ldr	r3, [pc, #124]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d064      	beq.n	800393c <HAL_RCC_OscConfig+0x2f0>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d160      	bne.n	800393c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e2c4      	b.n	8003e08 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003886:	d106      	bne.n	8003896 <HAL_RCC_OscConfig+0x24a>
 8003888:	4b16      	ldr	r3, [pc, #88]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a15      	ldr	r2, [pc, #84]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 800388e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	e01d      	b.n	80038d2 <HAL_RCC_OscConfig+0x286>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800389e:	d10c      	bne.n	80038ba <HAL_RCC_OscConfig+0x26e>
 80038a0:	4b10      	ldr	r3, [pc, #64]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a0f      	ldr	r2, [pc, #60]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 80038a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	4b0d      	ldr	r3, [pc, #52]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a0c      	ldr	r2, [pc, #48]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 80038b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b6:	6013      	str	r3, [r2, #0]
 80038b8:	e00b      	b.n	80038d2 <HAL_RCC_OscConfig+0x286>
 80038ba:	4b0a      	ldr	r3, [pc, #40]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a09      	ldr	r2, [pc, #36]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 80038c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	4b07      	ldr	r3, [pc, #28]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a06      	ldr	r2, [pc, #24]	; (80038e4 <HAL_RCC_OscConfig+0x298>)
 80038cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d01c      	beq.n	8003914 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038da:	f7fd fec1 	bl	8001660 <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038e0:	e011      	b.n	8003906 <HAL_RCC_OscConfig+0x2ba>
 80038e2:	bf00      	nop
 80038e4:	40021000 	.word	0x40021000
 80038e8:	0800a2f8 	.word	0x0800a2f8
 80038ec:	20000000 	.word	0x20000000
 80038f0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f4:	f7fd feb4 	bl	8001660 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b64      	cmp	r3, #100	; 0x64
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e280      	b.n	8003e08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003906:	4baf      	ldr	r3, [pc, #700]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCC_OscConfig+0x2a8>
 8003912:	e014      	b.n	800393e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003914:	f7fd fea4 	bl	8001660 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800391c:	f7fd fea0 	bl	8001660 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b64      	cmp	r3, #100	; 0x64
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e26c      	b.n	8003e08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800392e:	4ba5      	ldr	r3, [pc, #660]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0x2d0>
 800393a:	e000      	b.n	800393e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800393c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d060      	beq.n	8003a0c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	2b04      	cmp	r3, #4
 800394e:	d005      	beq.n	800395c <HAL_RCC_OscConfig+0x310>
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	2b0c      	cmp	r3, #12
 8003954:	d119      	bne.n	800398a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2b02      	cmp	r3, #2
 800395a:	d116      	bne.n	800398a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800395c:	4b99      	ldr	r3, [pc, #612]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <HAL_RCC_OscConfig+0x328>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e249      	b.n	8003e08 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003974:	4b93      	ldr	r3, [pc, #588]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	061b      	lsls	r3, r3, #24
 8003982:	4990      	ldr	r1, [pc, #576]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 8003984:	4313      	orrs	r3, r2
 8003986:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003988:	e040      	b.n	8003a0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d023      	beq.n	80039da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003992:	4b8c      	ldr	r3, [pc, #560]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a8b      	ldr	r2, [pc, #556]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 8003998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399e:	f7fd fe5f 	bl	8001660 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a6:	f7fd fe5b 	bl	8001660 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e227      	b.n	8003e08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039b8:	4b82      	ldr	r3, [pc, #520]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0f0      	beq.n	80039a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c4:	4b7f      	ldr	r3, [pc, #508]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	061b      	lsls	r3, r3, #24
 80039d2:	497c      	ldr	r1, [pc, #496]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	604b      	str	r3, [r1, #4]
 80039d8:	e018      	b.n	8003a0c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039da:	4b7a      	ldr	r3, [pc, #488]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a79      	ldr	r2, [pc, #484]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 80039e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e6:	f7fd fe3b 	bl	8001660 <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ee:	f7fd fe37 	bl	8001660 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e203      	b.n	8003e08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a00:	4b70      	ldr	r3, [pc, #448]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1f0      	bne.n	80039ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0308 	and.w	r3, r3, #8
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d03c      	beq.n	8003a92 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d01c      	beq.n	8003a5a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a20:	4b68      	ldr	r3, [pc, #416]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 8003a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a26:	4a67      	ldr	r2, [pc, #412]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a30:	f7fd fe16 	bl	8001660 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a38:	f7fd fe12 	bl	8001660 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e1de      	b.n	8003e08 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a4a:	4b5e      	ldr	r3, [pc, #376]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 8003a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0ef      	beq.n	8003a38 <HAL_RCC_OscConfig+0x3ec>
 8003a58:	e01b      	b.n	8003a92 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a5a:	4b5a      	ldr	r3, [pc, #360]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 8003a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a60:	4a58      	ldr	r2, [pc, #352]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 8003a62:	f023 0301 	bic.w	r3, r3, #1
 8003a66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6a:	f7fd fdf9 	bl	8001660 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a72:	f7fd fdf5 	bl	8001660 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e1c1      	b.n	8003e08 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a84:	4b4f      	ldr	r3, [pc, #316]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 8003a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1ef      	bne.n	8003a72 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0304 	and.w	r3, r3, #4
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 80a6 	beq.w	8003bec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003aa4:	4b47      	ldr	r3, [pc, #284]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 8003aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10d      	bne.n	8003acc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab0:	4b44      	ldr	r3, [pc, #272]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 8003ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab4:	4a43      	ldr	r2, [pc, #268]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 8003ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aba:	6593      	str	r3, [r2, #88]	; 0x58
 8003abc:	4b41      	ldr	r3, [pc, #260]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 8003abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003acc:	4b3e      	ldr	r3, [pc, #248]	; (8003bc8 <HAL_RCC_OscConfig+0x57c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d118      	bne.n	8003b0a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ad8:	4b3b      	ldr	r3, [pc, #236]	; (8003bc8 <HAL_RCC_OscConfig+0x57c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a3a      	ldr	r2, [pc, #232]	; (8003bc8 <HAL_RCC_OscConfig+0x57c>)
 8003ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ae4:	f7fd fdbc 	bl	8001660 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aec:	f7fd fdb8 	bl	8001660 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e184      	b.n	8003e08 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003afe:	4b32      	ldr	r3, [pc, #200]	; (8003bc8 <HAL_RCC_OscConfig+0x57c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d108      	bne.n	8003b24 <HAL_RCC_OscConfig+0x4d8>
 8003b12:	4b2c      	ldr	r3, [pc, #176]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 8003b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b18:	4a2a      	ldr	r2, [pc, #168]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b22:	e024      	b.n	8003b6e <HAL_RCC_OscConfig+0x522>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	2b05      	cmp	r3, #5
 8003b2a:	d110      	bne.n	8003b4e <HAL_RCC_OscConfig+0x502>
 8003b2c:	4b25      	ldr	r3, [pc, #148]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b32:	4a24      	ldr	r2, [pc, #144]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 8003b34:	f043 0304 	orr.w	r3, r3, #4
 8003b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b3c:	4b21      	ldr	r3, [pc, #132]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 8003b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b42:	4a20      	ldr	r2, [pc, #128]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b4c:	e00f      	b.n	8003b6e <HAL_RCC_OscConfig+0x522>
 8003b4e:	4b1d      	ldr	r3, [pc, #116]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 8003b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b54:	4a1b      	ldr	r2, [pc, #108]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 8003b56:	f023 0301 	bic.w	r3, r3, #1
 8003b5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b5e:	4b19      	ldr	r3, [pc, #100]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 8003b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b64:	4a17      	ldr	r2, [pc, #92]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 8003b66:	f023 0304 	bic.w	r3, r3, #4
 8003b6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d016      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b76:	f7fd fd73 	bl	8001660 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b7c:	e00a      	b.n	8003b94 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7e:	f7fd fd6f 	bl	8001660 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e139      	b.n	8003e08 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <HAL_RCC_OscConfig+0x578>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0ed      	beq.n	8003b7e <HAL_RCC_OscConfig+0x532>
 8003ba2:	e01a      	b.n	8003bda <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba4:	f7fd fd5c 	bl	8001660 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003baa:	e00f      	b.n	8003bcc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bac:	f7fd fd58 	bl	8001660 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d906      	bls.n	8003bcc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e122      	b.n	8003e08 <HAL_RCC_OscConfig+0x7bc>
 8003bc2:	bf00      	nop
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bcc:	4b90      	ldr	r3, [pc, #576]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1e8      	bne.n	8003bac <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bda:	7ffb      	ldrb	r3, [r7, #31]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d105      	bne.n	8003bec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be0:	4b8b      	ldr	r3, [pc, #556]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be4:	4a8a      	ldr	r2, [pc, #552]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bea:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 8108 	beq.w	8003e06 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	f040 80d0 	bne.w	8003da0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c00:	4b83      	ldr	r3, [pc, #524]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f003 0203 	and.w	r2, r3, #3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d130      	bne.n	8003c76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d127      	bne.n	8003c76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c30:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d11f      	bne.n	8003c76 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c40:	2a07      	cmp	r2, #7
 8003c42:	bf14      	ite	ne
 8003c44:	2201      	movne	r2, #1
 8003c46:	2200      	moveq	r2, #0
 8003c48:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d113      	bne.n	8003c76 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c58:	085b      	lsrs	r3, r3, #1
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d109      	bne.n	8003c76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	085b      	lsrs	r3, r3, #1
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d06e      	beq.n	8003d54 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	2b0c      	cmp	r3, #12
 8003c7a:	d069      	beq.n	8003d50 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c7c:	4b64      	ldr	r3, [pc, #400]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d105      	bne.n	8003c94 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c88:	4b61      	ldr	r3, [pc, #388]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0b7      	b.n	8003e08 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c98:	4b5d      	ldr	r3, [pc, #372]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a5c      	ldr	r2, [pc, #368]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ca2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ca4:	f7fd fcdc 	bl	8001660 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cac:	f7fd fcd8 	bl	8001660 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e0a4      	b.n	8003e08 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cbe:	4b54      	ldr	r3, [pc, #336]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cca:	4b51      	ldr	r3, [pc, #324]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	4b51      	ldr	r3, [pc, #324]	; (8003e14 <HAL_RCC_OscConfig+0x7c8>)
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003cda:	3a01      	subs	r2, #1
 8003cdc:	0112      	lsls	r2, r2, #4
 8003cde:	4311      	orrs	r1, r2
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ce4:	0212      	lsls	r2, r2, #8
 8003ce6:	4311      	orrs	r1, r2
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cec:	0852      	lsrs	r2, r2, #1
 8003cee:	3a01      	subs	r2, #1
 8003cf0:	0552      	lsls	r2, r2, #21
 8003cf2:	4311      	orrs	r1, r2
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003cf8:	0852      	lsrs	r2, r2, #1
 8003cfa:	3a01      	subs	r2, #1
 8003cfc:	0652      	lsls	r2, r2, #25
 8003cfe:	4311      	orrs	r1, r2
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d04:	0912      	lsrs	r2, r2, #4
 8003d06:	0452      	lsls	r2, r2, #17
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	4941      	ldr	r1, [pc, #260]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d10:	4b3f      	ldr	r3, [pc, #252]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a3e      	ldr	r2, [pc, #248]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003d16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d1c:	4b3c      	ldr	r3, [pc, #240]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	4a3b      	ldr	r2, [pc, #236]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d28:	f7fd fc9a 	bl	8001660 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d30:	f7fd fc96 	bl	8001660 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e062      	b.n	8003e08 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d42:	4b33      	ldr	r3, [pc, #204]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d4e:	e05a      	b.n	8003e06 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e059      	b.n	8003e08 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d54:	4b2e      	ldr	r3, [pc, #184]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d152      	bne.n	8003e06 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d60:	4b2b      	ldr	r3, [pc, #172]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a2a      	ldr	r2, [pc, #168]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003d66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d6c:	4b28      	ldr	r3, [pc, #160]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	4a27      	ldr	r2, [pc, #156]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003d72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d78:	f7fd fc72 	bl	8001660 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d80:	f7fd fc6e 	bl	8001660 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e03a      	b.n	8003e08 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d92:	4b1f      	ldr	r3, [pc, #124]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0f0      	beq.n	8003d80 <HAL_RCC_OscConfig+0x734>
 8003d9e:	e032      	b.n	8003e06 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	2b0c      	cmp	r3, #12
 8003da4:	d02d      	beq.n	8003e02 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da6:	4b1a      	ldr	r3, [pc, #104]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a19      	ldr	r2, [pc, #100]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003dac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003db0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003db2:	4b17      	ldr	r3, [pc, #92]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d105      	bne.n	8003dca <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003dbe:	4b14      	ldr	r3, [pc, #80]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	4a13      	ldr	r2, [pc, #76]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003dc4:	f023 0303 	bic.w	r3, r3, #3
 8003dc8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003dca:	4b11      	ldr	r3, [pc, #68]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	4a10      	ldr	r2, [pc, #64]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003dd0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dda:	f7fd fc41 	bl	8001660 <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de2:	f7fd fc3d 	bl	8001660 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e009      	b.n	8003e08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df4:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <HAL_RCC_OscConfig+0x7c4>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1f0      	bne.n	8003de2 <HAL_RCC_OscConfig+0x796>
 8003e00:	e001      	b.n	8003e06 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e000      	b.n	8003e08 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3720      	adds	r7, #32
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40021000 	.word	0x40021000
 8003e14:	f99d808c 	.word	0xf99d808c

08003e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0c8      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e2c:	4b66      	ldr	r3, [pc, #408]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b0>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d910      	bls.n	8003e5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3a:	4b63      	ldr	r3, [pc, #396]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f023 0207 	bic.w	r2, r3, #7
 8003e42:	4961      	ldr	r1, [pc, #388]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b0>)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4a:	4b5f      	ldr	r3, [pc, #380]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d001      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e0b0      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d04c      	beq.n	8003f02 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d107      	bne.n	8003e80 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e70:	4b56      	ldr	r3, [pc, #344]	; (8003fcc <HAL_RCC_ClockConfig+0x1b4>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d121      	bne.n	8003ec0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e09e      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d107      	bne.n	8003e98 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e88:	4b50      	ldr	r3, [pc, #320]	; (8003fcc <HAL_RCC_ClockConfig+0x1b4>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d115      	bne.n	8003ec0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e092      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d107      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ea0:	4b4a      	ldr	r3, [pc, #296]	; (8003fcc <HAL_RCC_ClockConfig+0x1b4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d109      	bne.n	8003ec0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e086      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eb0:	4b46      	ldr	r3, [pc, #280]	; (8003fcc <HAL_RCC_ClockConfig+0x1b4>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e07e      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ec0:	4b42      	ldr	r3, [pc, #264]	; (8003fcc <HAL_RCC_ClockConfig+0x1b4>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f023 0203 	bic.w	r2, r3, #3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	493f      	ldr	r1, [pc, #252]	; (8003fcc <HAL_RCC_ClockConfig+0x1b4>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed2:	f7fd fbc5 	bl	8001660 <HAL_GetTick>
 8003ed6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ed8:	e00a      	b.n	8003ef0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eda:	f7fd fbc1 	bl	8001660 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e066      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef0:	4b36      	ldr	r3, [pc, #216]	; (8003fcc <HAL_RCC_ClockConfig+0x1b4>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 020c 	and.w	r2, r3, #12
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d1eb      	bne.n	8003eda <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d008      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f0e:	4b2f      	ldr	r3, [pc, #188]	; (8003fcc <HAL_RCC_ClockConfig+0x1b4>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	492c      	ldr	r1, [pc, #176]	; (8003fcc <HAL_RCC_ClockConfig+0x1b4>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f20:	4b29      	ldr	r3, [pc, #164]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b0>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d210      	bcs.n	8003f50 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2e:	4b26      	ldr	r3, [pc, #152]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b0>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f023 0207 	bic.w	r2, r3, #7
 8003f36:	4924      	ldr	r1, [pc, #144]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b0>)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3e:	4b22      	ldr	r3, [pc, #136]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d001      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e036      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d008      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f5c:	4b1b      	ldr	r3, [pc, #108]	; (8003fcc <HAL_RCC_ClockConfig+0x1b4>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	4918      	ldr	r1, [pc, #96]	; (8003fcc <HAL_RCC_ClockConfig+0x1b4>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d009      	beq.n	8003f8e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f7a:	4b14      	ldr	r3, [pc, #80]	; (8003fcc <HAL_RCC_ClockConfig+0x1b4>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	4910      	ldr	r1, [pc, #64]	; (8003fcc <HAL_RCC_ClockConfig+0x1b4>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f8e:	f000 f825 	bl	8003fdc <HAL_RCC_GetSysClockFreq>
 8003f92:	4602      	mov	r2, r0
 8003f94:	4b0d      	ldr	r3, [pc, #52]	; (8003fcc <HAL_RCC_ClockConfig+0x1b4>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	091b      	lsrs	r3, r3, #4
 8003f9a:	f003 030f 	and.w	r3, r3, #15
 8003f9e:	490c      	ldr	r1, [pc, #48]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa0:	5ccb      	ldrb	r3, [r1, r3]
 8003fa2:	f003 031f 	and.w	r3, r3, #31
 8003fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8003faa:	4a0a      	ldr	r2, [pc, #40]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003fae:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fd fb04 	bl	80015c0 <HAL_InitTick>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	72fb      	strb	r3, [r7, #11]

  return status;
 8003fbc:	7afb      	ldrb	r3, [r7, #11]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40022000 	.word	0x40022000
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	0800a2f8 	.word	0x0800a2f8
 8003fd4:	20000000 	.word	0x20000000
 8003fd8:	20000004 	.word	0x20000004

08003fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b089      	sub	sp, #36	; 0x24
 8003fe0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61fb      	str	r3, [r7, #28]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fea:	4b3e      	ldr	r3, [pc, #248]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 030c 	and.w	r3, r3, #12
 8003ff2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ff4:	4b3b      	ldr	r3, [pc, #236]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f003 0303 	and.w	r3, r3, #3
 8003ffc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d005      	beq.n	8004010 <HAL_RCC_GetSysClockFreq+0x34>
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	2b0c      	cmp	r3, #12
 8004008:	d121      	bne.n	800404e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d11e      	bne.n	800404e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004010:	4b34      	ldr	r3, [pc, #208]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	2b00      	cmp	r3, #0
 800401a:	d107      	bne.n	800402c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800401c:	4b31      	ldr	r3, [pc, #196]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800401e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004022:	0a1b      	lsrs	r3, r3, #8
 8004024:	f003 030f 	and.w	r3, r3, #15
 8004028:	61fb      	str	r3, [r7, #28]
 800402a:	e005      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800402c:	4b2d      	ldr	r3, [pc, #180]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	091b      	lsrs	r3, r3, #4
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004038:	4a2b      	ldr	r2, [pc, #172]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004040:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10d      	bne.n	8004064 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800404c:	e00a      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	2b04      	cmp	r3, #4
 8004052:	d102      	bne.n	800405a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004054:	4b25      	ldr	r3, [pc, #148]	; (80040ec <HAL_RCC_GetSysClockFreq+0x110>)
 8004056:	61bb      	str	r3, [r7, #24]
 8004058:	e004      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	2b08      	cmp	r3, #8
 800405e:	d101      	bne.n	8004064 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004060:	4b23      	ldr	r3, [pc, #140]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004062:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	2b0c      	cmp	r3, #12
 8004068:	d134      	bne.n	80040d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800406a:	4b1e      	ldr	r3, [pc, #120]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2b02      	cmp	r3, #2
 8004078:	d003      	beq.n	8004082 <HAL_RCC_GetSysClockFreq+0xa6>
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2b03      	cmp	r3, #3
 800407e:	d003      	beq.n	8004088 <HAL_RCC_GetSysClockFreq+0xac>
 8004080:	e005      	b.n	800408e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004082:	4b1a      	ldr	r3, [pc, #104]	; (80040ec <HAL_RCC_GetSysClockFreq+0x110>)
 8004084:	617b      	str	r3, [r7, #20]
      break;
 8004086:	e005      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004088:	4b19      	ldr	r3, [pc, #100]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800408a:	617b      	str	r3, [r7, #20]
      break;
 800408c:	e002      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	617b      	str	r3, [r7, #20]
      break;
 8004092:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004094:	4b13      	ldr	r3, [pc, #76]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	091b      	lsrs	r3, r3, #4
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	3301      	adds	r3, #1
 80040a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040a2:	4b10      	ldr	r3, [pc, #64]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	0a1b      	lsrs	r3, r3, #8
 80040a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	fb02 f203 	mul.w	r2, r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040ba:	4b0a      	ldr	r3, [pc, #40]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	0e5b      	lsrs	r3, r3, #25
 80040c0:	f003 0303 	and.w	r3, r3, #3
 80040c4:	3301      	adds	r3, #1
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040d4:	69bb      	ldr	r3, [r7, #24]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3724      	adds	r7, #36	; 0x24
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	40021000 	.word	0x40021000
 80040e8:	0800a310 	.word	0x0800a310
 80040ec:	00f42400 	.word	0x00f42400
 80040f0:	007a1200 	.word	0x007a1200

080040f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040f8:	4b03      	ldr	r3, [pc, #12]	; (8004108 <HAL_RCC_GetHCLKFreq+0x14>)
 80040fa:	681b      	ldr	r3, [r3, #0]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	20000000 	.word	0x20000000

0800410c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004110:	f7ff fff0 	bl	80040f4 <HAL_RCC_GetHCLKFreq>
 8004114:	4602      	mov	r2, r0
 8004116:	4b06      	ldr	r3, [pc, #24]	; (8004130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	0a1b      	lsrs	r3, r3, #8
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	4904      	ldr	r1, [pc, #16]	; (8004134 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004122:	5ccb      	ldrb	r3, [r1, r3]
 8004124:	f003 031f 	and.w	r3, r3, #31
 8004128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800412c:	4618      	mov	r0, r3
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40021000 	.word	0x40021000
 8004134:	0800a308 	.word	0x0800a308

08004138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800413c:	f7ff ffda 	bl	80040f4 <HAL_RCC_GetHCLKFreq>
 8004140:	4602      	mov	r2, r0
 8004142:	4b06      	ldr	r3, [pc, #24]	; (800415c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	0adb      	lsrs	r3, r3, #11
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	4904      	ldr	r1, [pc, #16]	; (8004160 <HAL_RCC_GetPCLK2Freq+0x28>)
 800414e:	5ccb      	ldrb	r3, [r1, r3]
 8004150:	f003 031f 	and.w	r3, r3, #31
 8004154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004158:	4618      	mov	r0, r3
 800415a:	bd80      	pop	{r7, pc}
 800415c:	40021000 	.word	0x40021000
 8004160:	0800a308 	.word	0x0800a308

08004164 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800416c:	2300      	movs	r3, #0
 800416e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004170:	4b2a      	ldr	r3, [pc, #168]	; (800421c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800417c:	f7ff fa02 	bl	8003584 <HAL_PWREx_GetVoltageRange>
 8004180:	6178      	str	r0, [r7, #20]
 8004182:	e014      	b.n	80041ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004184:	4b25      	ldr	r3, [pc, #148]	; (800421c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004188:	4a24      	ldr	r2, [pc, #144]	; (800421c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800418a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800418e:	6593      	str	r3, [r2, #88]	; 0x58
 8004190:	4b22      	ldr	r3, [pc, #136]	; (800421c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800419c:	f7ff f9f2 	bl	8003584 <HAL_PWREx_GetVoltageRange>
 80041a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041a2:	4b1e      	ldr	r3, [pc, #120]	; (800421c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a6:	4a1d      	ldr	r2, [pc, #116]	; (800421c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b4:	d10b      	bne.n	80041ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b80      	cmp	r3, #128	; 0x80
 80041ba:	d919      	bls.n	80041f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2ba0      	cmp	r3, #160	; 0xa0
 80041c0:	d902      	bls.n	80041c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041c2:	2302      	movs	r3, #2
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	e013      	b.n	80041f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041c8:	2301      	movs	r3, #1
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	e010      	b.n	80041f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b80      	cmp	r3, #128	; 0x80
 80041d2:	d902      	bls.n	80041da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80041d4:	2303      	movs	r3, #3
 80041d6:	613b      	str	r3, [r7, #16]
 80041d8:	e00a      	b.n	80041f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b80      	cmp	r3, #128	; 0x80
 80041de:	d102      	bne.n	80041e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041e0:	2302      	movs	r3, #2
 80041e2:	613b      	str	r3, [r7, #16]
 80041e4:	e004      	b.n	80041f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b70      	cmp	r3, #112	; 0x70
 80041ea:	d101      	bne.n	80041f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041ec:	2301      	movs	r3, #1
 80041ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041f0:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f023 0207 	bic.w	r2, r3, #7
 80041f8:	4909      	ldr	r1, [pc, #36]	; (8004220 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004200:	4b07      	ldr	r3, [pc, #28]	; (8004220 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	429a      	cmp	r2, r3
 800420c:	d001      	beq.n	8004212 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40021000 	.word	0x40021000
 8004220:	40022000 	.word	0x40022000

08004224 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800422c:	2300      	movs	r3, #0
 800422e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004230:	2300      	movs	r3, #0
 8004232:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800423c:	2b00      	cmp	r3, #0
 800423e:	d041      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004244:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004248:	d02a      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800424a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800424e:	d824      	bhi.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004250:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004254:	d008      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004256:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800425a:	d81e      	bhi.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00a      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004260:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004264:	d010      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004266:	e018      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004268:	4b86      	ldr	r3, [pc, #536]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	4a85      	ldr	r2, [pc, #532]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004272:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004274:	e015      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3304      	adds	r3, #4
 800427a:	2100      	movs	r1, #0
 800427c:	4618      	mov	r0, r3
 800427e:	f000 fabb 	bl	80047f8 <RCCEx_PLLSAI1_Config>
 8004282:	4603      	mov	r3, r0
 8004284:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004286:	e00c      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3320      	adds	r3, #32
 800428c:	2100      	movs	r1, #0
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fba6 	bl	80049e0 <RCCEx_PLLSAI2_Config>
 8004294:	4603      	mov	r3, r0
 8004296:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004298:	e003      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	74fb      	strb	r3, [r7, #19]
      break;
 800429e:	e000      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80042a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042a2:	7cfb      	ldrb	r3, [r7, #19]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10b      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042a8:	4b76      	ldr	r3, [pc, #472]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042b6:	4973      	ldr	r1, [pc, #460]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042be:	e001      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c0:	7cfb      	ldrb	r3, [r7, #19]
 80042c2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d041      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042d8:	d02a      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80042da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042de:	d824      	bhi.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042e4:	d008      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042ea:	d81e      	bhi.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00a      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80042f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042f4:	d010      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80042f6:	e018      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042f8:	4b62      	ldr	r3, [pc, #392]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	4a61      	ldr	r2, [pc, #388]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004302:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004304:	e015      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	3304      	adds	r3, #4
 800430a:	2100      	movs	r1, #0
 800430c:	4618      	mov	r0, r3
 800430e:	f000 fa73 	bl	80047f8 <RCCEx_PLLSAI1_Config>
 8004312:	4603      	mov	r3, r0
 8004314:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004316:	e00c      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3320      	adds	r3, #32
 800431c:	2100      	movs	r1, #0
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fb5e 	bl	80049e0 <RCCEx_PLLSAI2_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004328:	e003      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	74fb      	strb	r3, [r7, #19]
      break;
 800432e:	e000      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004330:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004332:	7cfb      	ldrb	r3, [r7, #19]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10b      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004338:	4b52      	ldr	r3, [pc, #328]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800433a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004346:	494f      	ldr	r1, [pc, #316]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800434e:	e001      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004350:	7cfb      	ldrb	r3, [r7, #19]
 8004352:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 80a0 	beq.w	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004362:	2300      	movs	r3, #0
 8004364:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004366:	4b47      	ldr	r3, [pc, #284]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004376:	2300      	movs	r3, #0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00d      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800437c:	4b41      	ldr	r3, [pc, #260]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800437e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004380:	4a40      	ldr	r2, [pc, #256]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004386:	6593      	str	r3, [r2, #88]	; 0x58
 8004388:	4b3e      	ldr	r3, [pc, #248]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800438a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004394:	2301      	movs	r3, #1
 8004396:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004398:	4b3b      	ldr	r3, [pc, #236]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a3a      	ldr	r2, [pc, #232]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800439e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043a4:	f7fd f95c 	bl	8001660 <HAL_GetTick>
 80043a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043aa:	e009      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ac:	f7fd f958 	bl	8001660 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d902      	bls.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	74fb      	strb	r3, [r7, #19]
        break;
 80043be:	e005      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043c0:	4b31      	ldr	r3, [pc, #196]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0ef      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80043cc:	7cfb      	ldrb	r3, [r7, #19]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d15c      	bne.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043d2:	4b2c      	ldr	r3, [pc, #176]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d01f      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d019      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043f0:	4b24      	ldr	r3, [pc, #144]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043fc:	4b21      	ldr	r3, [pc, #132]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004402:	4a20      	ldr	r2, [pc, #128]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800440c:	4b1d      	ldr	r3, [pc, #116]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800440e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004412:	4a1c      	ldr	r2, [pc, #112]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800441c:	4a19      	ldr	r2, [pc, #100]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d016      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442e:	f7fd f917 	bl	8001660 <HAL_GetTick>
 8004432:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004434:	e00b      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004436:	f7fd f913 	bl	8001660 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	f241 3288 	movw	r2, #5000	; 0x1388
 8004444:	4293      	cmp	r3, r2
 8004446:	d902      	bls.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	74fb      	strb	r3, [r7, #19]
            break;
 800444c:	e006      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800444e:	4b0d      	ldr	r3, [pc, #52]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0ec      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800445c:	7cfb      	ldrb	r3, [r7, #19]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10c      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004462:	4b08      	ldr	r3, [pc, #32]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004468:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004472:	4904      	ldr	r1, [pc, #16]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800447a:	e009      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800447c:	7cfb      	ldrb	r3, [r7, #19]
 800447e:	74bb      	strb	r3, [r7, #18]
 8004480:	e006      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004482:	bf00      	nop
 8004484:	40021000 	.word	0x40021000
 8004488:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800448c:	7cfb      	ldrb	r3, [r7, #19]
 800448e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004490:	7c7b      	ldrb	r3, [r7, #17]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d105      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004496:	4b9e      	ldr	r3, [pc, #632]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449a:	4a9d      	ldr	r2, [pc, #628]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800449c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00a      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044ae:	4b98      	ldr	r3, [pc, #608]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b4:	f023 0203 	bic.w	r2, r3, #3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044bc:	4994      	ldr	r1, [pc, #592]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00a      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044d0:	4b8f      	ldr	r3, [pc, #572]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d6:	f023 020c 	bic.w	r2, r3, #12
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044de:	498c      	ldr	r1, [pc, #560]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0304 	and.w	r3, r3, #4
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044f2:	4b87      	ldr	r3, [pc, #540]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	4983      	ldr	r1, [pc, #524]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004502:	4313      	orrs	r3, r2
 8004504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0308 	and.w	r3, r3, #8
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00a      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004514:	4b7e      	ldr	r3, [pc, #504]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004522:	497b      	ldr	r1, [pc, #492]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004524:	4313      	orrs	r3, r2
 8004526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0310 	and.w	r3, r3, #16
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004536:	4b76      	ldr	r3, [pc, #472]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004544:	4972      	ldr	r1, [pc, #456]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004546:	4313      	orrs	r3, r2
 8004548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0320 	and.w	r3, r3, #32
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004558:	4b6d      	ldr	r3, [pc, #436]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004566:	496a      	ldr	r1, [pc, #424]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004568:	4313      	orrs	r3, r2
 800456a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800457a:	4b65      	ldr	r3, [pc, #404]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004580:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004588:	4961      	ldr	r1, [pc, #388]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800459c:	4b5c      	ldr	r3, [pc, #368]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045aa:	4959      	ldr	r1, [pc, #356]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045be:	4b54      	ldr	r3, [pc, #336]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045cc:	4950      	ldr	r1, [pc, #320]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045e0:	4b4b      	ldr	r3, [pc, #300]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ee:	4948      	ldr	r1, [pc, #288]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004602:	4b43      	ldr	r3, [pc, #268]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004608:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004610:	493f      	ldr	r1, [pc, #252]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d028      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004624:	4b3a      	ldr	r3, [pc, #232]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004632:	4937      	ldr	r1, [pc, #220]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800463e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004642:	d106      	bne.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004644:	4b32      	ldr	r3, [pc, #200]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	4a31      	ldr	r2, [pc, #196]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800464a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800464e:	60d3      	str	r3, [r2, #12]
 8004650:	e011      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004656:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800465a:	d10c      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3304      	adds	r3, #4
 8004660:	2101      	movs	r1, #1
 8004662:	4618      	mov	r0, r3
 8004664:	f000 f8c8 	bl	80047f8 <RCCEx_PLLSAI1_Config>
 8004668:	4603      	mov	r3, r0
 800466a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800466c:	7cfb      	ldrb	r3, [r7, #19]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004672:	7cfb      	ldrb	r3, [r7, #19]
 8004674:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d028      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004682:	4b23      	ldr	r3, [pc, #140]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004688:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004690:	491f      	ldr	r1, [pc, #124]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046a0:	d106      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046a2:	4b1b      	ldr	r3, [pc, #108]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	4a1a      	ldr	r2, [pc, #104]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ac:	60d3      	str	r3, [r2, #12]
 80046ae:	e011      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046b8:	d10c      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3304      	adds	r3, #4
 80046be:	2101      	movs	r1, #1
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 f899 	bl	80047f8 <RCCEx_PLLSAI1_Config>
 80046c6:	4603      	mov	r3, r0
 80046c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046ca:	7cfb      	ldrb	r3, [r7, #19]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80046d0:	7cfb      	ldrb	r3, [r7, #19]
 80046d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d02b      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046e0:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ee:	4908      	ldr	r1, [pc, #32]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046fe:	d109      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004700:	4b03      	ldr	r3, [pc, #12]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	4a02      	ldr	r2, [pc, #8]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004706:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800470a:	60d3      	str	r3, [r2, #12]
 800470c:	e014      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800470e:	bf00      	nop
 8004710:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004718:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800471c:	d10c      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3304      	adds	r3, #4
 8004722:	2101      	movs	r1, #1
 8004724:	4618      	mov	r0, r3
 8004726:	f000 f867 	bl	80047f8 <RCCEx_PLLSAI1_Config>
 800472a:	4603      	mov	r3, r0
 800472c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800472e:	7cfb      	ldrb	r3, [r7, #19]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004734:	7cfb      	ldrb	r3, [r7, #19]
 8004736:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d02f      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004744:	4b2b      	ldr	r3, [pc, #172]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004752:	4928      	ldr	r1, [pc, #160]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004754:	4313      	orrs	r3, r2
 8004756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800475e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004762:	d10d      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3304      	adds	r3, #4
 8004768:	2102      	movs	r1, #2
 800476a:	4618      	mov	r0, r3
 800476c:	f000 f844 	bl	80047f8 <RCCEx_PLLSAI1_Config>
 8004770:	4603      	mov	r3, r0
 8004772:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004774:	7cfb      	ldrb	r3, [r7, #19]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d014      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800477a:	7cfb      	ldrb	r3, [r7, #19]
 800477c:	74bb      	strb	r3, [r7, #18]
 800477e:	e011      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004788:	d10c      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	3320      	adds	r3, #32
 800478e:	2102      	movs	r1, #2
 8004790:	4618      	mov	r0, r3
 8004792:	f000 f925 	bl	80049e0 <RCCEx_PLLSAI2_Config>
 8004796:	4603      	mov	r3, r0
 8004798:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800479a:	7cfb      	ldrb	r3, [r7, #19]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80047a0:	7cfb      	ldrb	r3, [r7, #19]
 80047a2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047b0:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047be:	490d      	ldr	r1, [pc, #52]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00b      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047d2:	4b08      	ldr	r3, [pc, #32]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047e2:	4904      	ldr	r1, [pc, #16]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	40021000 	.word	0x40021000

080047f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004802:	2300      	movs	r3, #0
 8004804:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004806:	4b75      	ldr	r3, [pc, #468]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d018      	beq.n	8004844 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004812:	4b72      	ldr	r3, [pc, #456]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f003 0203 	and.w	r2, r3, #3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	429a      	cmp	r2, r3
 8004820:	d10d      	bne.n	800483e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
       ||
 8004826:	2b00      	cmp	r3, #0
 8004828:	d009      	beq.n	800483e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800482a:	4b6c      	ldr	r3, [pc, #432]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	091b      	lsrs	r3, r3, #4
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
       ||
 800483a:	429a      	cmp	r2, r3
 800483c:	d047      	beq.n	80048ce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	73fb      	strb	r3, [r7, #15]
 8004842:	e044      	b.n	80048ce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2b03      	cmp	r3, #3
 800484a:	d018      	beq.n	800487e <RCCEx_PLLSAI1_Config+0x86>
 800484c:	2b03      	cmp	r3, #3
 800484e:	d825      	bhi.n	800489c <RCCEx_PLLSAI1_Config+0xa4>
 8004850:	2b01      	cmp	r3, #1
 8004852:	d002      	beq.n	800485a <RCCEx_PLLSAI1_Config+0x62>
 8004854:	2b02      	cmp	r3, #2
 8004856:	d009      	beq.n	800486c <RCCEx_PLLSAI1_Config+0x74>
 8004858:	e020      	b.n	800489c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800485a:	4b60      	ldr	r3, [pc, #384]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d11d      	bne.n	80048a2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800486a:	e01a      	b.n	80048a2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800486c:	4b5b      	ldr	r3, [pc, #364]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004874:	2b00      	cmp	r3, #0
 8004876:	d116      	bne.n	80048a6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800487c:	e013      	b.n	80048a6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800487e:	4b57      	ldr	r3, [pc, #348]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10f      	bne.n	80048aa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800488a:	4b54      	ldr	r3, [pc, #336]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d109      	bne.n	80048aa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800489a:	e006      	b.n	80048aa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	73fb      	strb	r3, [r7, #15]
      break;
 80048a0:	e004      	b.n	80048ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048a2:	bf00      	nop
 80048a4:	e002      	b.n	80048ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048a6:	bf00      	nop
 80048a8:	e000      	b.n	80048ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10d      	bne.n	80048ce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048b2:	4b4a      	ldr	r3, [pc, #296]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6819      	ldr	r1, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	430b      	orrs	r3, r1
 80048c8:	4944      	ldr	r1, [pc, #272]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d17d      	bne.n	80049d0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048d4:	4b41      	ldr	r3, [pc, #260]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a40      	ldr	r2, [pc, #256]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80048da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e0:	f7fc febe 	bl	8001660 <HAL_GetTick>
 80048e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048e6:	e009      	b.n	80048fc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048e8:	f7fc feba 	bl	8001660 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d902      	bls.n	80048fc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	73fb      	strb	r3, [r7, #15]
        break;
 80048fa:	e005      	b.n	8004908 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048fc:	4b37      	ldr	r3, [pc, #220]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1ef      	bne.n	80048e8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004908:	7bfb      	ldrb	r3, [r7, #15]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d160      	bne.n	80049d0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d111      	bne.n	8004938 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004914:	4b31      	ldr	r3, [pc, #196]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800491c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6892      	ldr	r2, [r2, #8]
 8004924:	0211      	lsls	r1, r2, #8
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	68d2      	ldr	r2, [r2, #12]
 800492a:	0912      	lsrs	r2, r2, #4
 800492c:	0452      	lsls	r2, r2, #17
 800492e:	430a      	orrs	r2, r1
 8004930:	492a      	ldr	r1, [pc, #168]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004932:	4313      	orrs	r3, r2
 8004934:	610b      	str	r3, [r1, #16]
 8004936:	e027      	b.n	8004988 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d112      	bne.n	8004964 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800493e:	4b27      	ldr	r3, [pc, #156]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004946:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6892      	ldr	r2, [r2, #8]
 800494e:	0211      	lsls	r1, r2, #8
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	6912      	ldr	r2, [r2, #16]
 8004954:	0852      	lsrs	r2, r2, #1
 8004956:	3a01      	subs	r2, #1
 8004958:	0552      	lsls	r2, r2, #21
 800495a:	430a      	orrs	r2, r1
 800495c:	491f      	ldr	r1, [pc, #124]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800495e:	4313      	orrs	r3, r2
 8004960:	610b      	str	r3, [r1, #16]
 8004962:	e011      	b.n	8004988 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004964:	4b1d      	ldr	r3, [pc, #116]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800496c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6892      	ldr	r2, [r2, #8]
 8004974:	0211      	lsls	r1, r2, #8
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6952      	ldr	r2, [r2, #20]
 800497a:	0852      	lsrs	r2, r2, #1
 800497c:	3a01      	subs	r2, #1
 800497e:	0652      	lsls	r2, r2, #25
 8004980:	430a      	orrs	r2, r1
 8004982:	4916      	ldr	r1, [pc, #88]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004984:	4313      	orrs	r3, r2
 8004986:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004988:	4b14      	ldr	r3, [pc, #80]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a13      	ldr	r2, [pc, #76]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800498e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004992:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004994:	f7fc fe64 	bl	8001660 <HAL_GetTick>
 8004998:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800499a:	e009      	b.n	80049b0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800499c:	f7fc fe60 	bl	8001660 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d902      	bls.n	80049b0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	73fb      	strb	r3, [r7, #15]
          break;
 80049ae:	e005      	b.n	80049bc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049b0:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d0ef      	beq.n	800499c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d106      	bne.n	80049d0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049c2:	4b06      	ldr	r3, [pc, #24]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	4904      	ldr	r1, [pc, #16]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	40021000 	.word	0x40021000

080049e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049ee:	4b6a      	ldr	r3, [pc, #424]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f003 0303 	and.w	r3, r3, #3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d018      	beq.n	8004a2c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80049fa:	4b67      	ldr	r3, [pc, #412]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f003 0203 	and.w	r2, r3, #3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d10d      	bne.n	8004a26 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
       ||
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d009      	beq.n	8004a26 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a12:	4b61      	ldr	r3, [pc, #388]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	091b      	lsrs	r3, r3, #4
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
       ||
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d047      	beq.n	8004ab6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	73fb      	strb	r3, [r7, #15]
 8004a2a:	e044      	b.n	8004ab6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	d018      	beq.n	8004a66 <RCCEx_PLLSAI2_Config+0x86>
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d825      	bhi.n	8004a84 <RCCEx_PLLSAI2_Config+0xa4>
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d002      	beq.n	8004a42 <RCCEx_PLLSAI2_Config+0x62>
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d009      	beq.n	8004a54 <RCCEx_PLLSAI2_Config+0x74>
 8004a40:	e020      	b.n	8004a84 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a42:	4b55      	ldr	r3, [pc, #340]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d11d      	bne.n	8004a8a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a52:	e01a      	b.n	8004a8a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a54:	4b50      	ldr	r3, [pc, #320]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d116      	bne.n	8004a8e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a64:	e013      	b.n	8004a8e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a66:	4b4c      	ldr	r3, [pc, #304]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10f      	bne.n	8004a92 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a72:	4b49      	ldr	r3, [pc, #292]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d109      	bne.n	8004a92 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a82:	e006      	b.n	8004a92 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	73fb      	strb	r3, [r7, #15]
      break;
 8004a88:	e004      	b.n	8004a94 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a8a:	bf00      	nop
 8004a8c:	e002      	b.n	8004a94 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a8e:	bf00      	nop
 8004a90:	e000      	b.n	8004a94 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a92:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a94:	7bfb      	ldrb	r3, [r7, #15]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10d      	bne.n	8004ab6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a9a:	4b3f      	ldr	r3, [pc, #252]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6819      	ldr	r1, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	430b      	orrs	r3, r1
 8004ab0:	4939      	ldr	r1, [pc, #228]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ab6:	7bfb      	ldrb	r3, [r7, #15]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d167      	bne.n	8004b8c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004abc:	4b36      	ldr	r3, [pc, #216]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a35      	ldr	r2, [pc, #212]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ac6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ac8:	f7fc fdca 	bl	8001660 <HAL_GetTick>
 8004acc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ace:	e009      	b.n	8004ae4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ad0:	f7fc fdc6 	bl	8001660 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d902      	bls.n	8004ae4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	73fb      	strb	r3, [r7, #15]
        break;
 8004ae2:	e005      	b.n	8004af0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ae4:	4b2c      	ldr	r3, [pc, #176]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1ef      	bne.n	8004ad0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d14a      	bne.n	8004b8c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d111      	bne.n	8004b20 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004afc:	4b26      	ldr	r3, [pc, #152]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6892      	ldr	r2, [r2, #8]
 8004b0c:	0211      	lsls	r1, r2, #8
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	68d2      	ldr	r2, [r2, #12]
 8004b12:	0912      	lsrs	r2, r2, #4
 8004b14:	0452      	lsls	r2, r2, #17
 8004b16:	430a      	orrs	r2, r1
 8004b18:	491f      	ldr	r1, [pc, #124]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	614b      	str	r3, [r1, #20]
 8004b1e:	e011      	b.n	8004b44 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b20:	4b1d      	ldr	r3, [pc, #116]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6892      	ldr	r2, [r2, #8]
 8004b30:	0211      	lsls	r1, r2, #8
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	6912      	ldr	r2, [r2, #16]
 8004b36:	0852      	lsrs	r2, r2, #1
 8004b38:	3a01      	subs	r2, #1
 8004b3a:	0652      	lsls	r2, r2, #25
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	4916      	ldr	r1, [pc, #88]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b44:	4b14      	ldr	r3, [pc, #80]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a13      	ldr	r2, [pc, #76]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b50:	f7fc fd86 	bl	8001660 <HAL_GetTick>
 8004b54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b56:	e009      	b.n	8004b6c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b58:	f7fc fd82 	bl	8001660 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d902      	bls.n	8004b6c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	73fb      	strb	r3, [r7, #15]
          break;
 8004b6a:	e005      	b.n	8004b78 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0ef      	beq.n	8004b58 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d106      	bne.n	8004b8c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b7e:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b80:	695a      	ldr	r2, [r3, #20]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	4904      	ldr	r1, [pc, #16]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	40021000 	.word	0x40021000

08004b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e049      	b.n	8004c42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d106      	bne.n	8004bc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fc fbe8 	bl	8001398 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4610      	mov	r0, r2
 8004bdc:	f000 fbda 	bl	8005394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
	...

08004c4c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d001      	beq.n	8004c64 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e047      	b.n	8004cf4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a23      	ldr	r2, [pc, #140]	; (8004d00 <HAL_TIM_Base_Start+0xb4>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d01d      	beq.n	8004cb2 <HAL_TIM_Base_Start+0x66>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c7e:	d018      	beq.n	8004cb2 <HAL_TIM_Base_Start+0x66>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a1f      	ldr	r2, [pc, #124]	; (8004d04 <HAL_TIM_Base_Start+0xb8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d013      	beq.n	8004cb2 <HAL_TIM_Base_Start+0x66>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a1e      	ldr	r2, [pc, #120]	; (8004d08 <HAL_TIM_Base_Start+0xbc>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d00e      	beq.n	8004cb2 <HAL_TIM_Base_Start+0x66>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a1c      	ldr	r2, [pc, #112]	; (8004d0c <HAL_TIM_Base_Start+0xc0>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d009      	beq.n	8004cb2 <HAL_TIM_Base_Start+0x66>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a1b      	ldr	r2, [pc, #108]	; (8004d10 <HAL_TIM_Base_Start+0xc4>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d004      	beq.n	8004cb2 <HAL_TIM_Base_Start+0x66>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a19      	ldr	r2, [pc, #100]	; (8004d14 <HAL_TIM_Base_Start+0xc8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d115      	bne.n	8004cde <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	4b17      	ldr	r3, [pc, #92]	; (8004d18 <HAL_TIM_Base_Start+0xcc>)
 8004cba:	4013      	ands	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2b06      	cmp	r3, #6
 8004cc2:	d015      	beq.n	8004cf0 <HAL_TIM_Base_Start+0xa4>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cca:	d011      	beq.n	8004cf0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cdc:	e008      	b.n	8004cf0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f042 0201 	orr.w	r2, r2, #1
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	e000      	b.n	8004cf2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	40012c00 	.word	0x40012c00
 8004d04:	40000400 	.word	0x40000400
 8004d08:	40000800 	.word	0x40000800
 8004d0c:	40000c00 	.word	0x40000c00
 8004d10:	40013400 	.word	0x40013400
 8004d14:	40014000 	.word	0x40014000
 8004d18:	00010007 	.word	0x00010007

08004d1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e049      	b.n	8004dc2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d106      	bne.n	8004d48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7fc fb08 	bl	8001358 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3304      	adds	r3, #4
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	f000 fb1a 	bl	8005394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
	...

08004dcc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d109      	bne.n	8004df0 <HAL_TIM_PWM_Start+0x24>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	bf14      	ite	ne
 8004de8:	2301      	movne	r3, #1
 8004dea:	2300      	moveq	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	e03c      	b.n	8004e6a <HAL_TIM_PWM_Start+0x9e>
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	d109      	bne.n	8004e0a <HAL_TIM_PWM_Start+0x3e>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	bf14      	ite	ne
 8004e02:	2301      	movne	r3, #1
 8004e04:	2300      	moveq	r3, #0
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	e02f      	b.n	8004e6a <HAL_TIM_PWM_Start+0x9e>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	d109      	bne.n	8004e24 <HAL_TIM_PWM_Start+0x58>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	bf14      	ite	ne
 8004e1c:	2301      	movne	r3, #1
 8004e1e:	2300      	moveq	r3, #0
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	e022      	b.n	8004e6a <HAL_TIM_PWM_Start+0x9e>
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	2b0c      	cmp	r3, #12
 8004e28:	d109      	bne.n	8004e3e <HAL_TIM_PWM_Start+0x72>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	bf14      	ite	ne
 8004e36:	2301      	movne	r3, #1
 8004e38:	2300      	moveq	r3, #0
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	e015      	b.n	8004e6a <HAL_TIM_PWM_Start+0x9e>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b10      	cmp	r3, #16
 8004e42:	d109      	bne.n	8004e58 <HAL_TIM_PWM_Start+0x8c>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	bf14      	ite	ne
 8004e50:	2301      	movne	r3, #1
 8004e52:	2300      	moveq	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	e008      	b.n	8004e6a <HAL_TIM_PWM_Start+0x9e>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	bf14      	ite	ne
 8004e64:	2301      	movne	r3, #1
 8004e66:	2300      	moveq	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e09c      	b.n	8004fac <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d104      	bne.n	8004e82 <HAL_TIM_PWM_Start+0xb6>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e80:	e023      	b.n	8004eca <HAL_TIM_PWM_Start+0xfe>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	d104      	bne.n	8004e92 <HAL_TIM_PWM_Start+0xc6>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e90:	e01b      	b.n	8004eca <HAL_TIM_PWM_Start+0xfe>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d104      	bne.n	8004ea2 <HAL_TIM_PWM_Start+0xd6>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ea0:	e013      	b.n	8004eca <HAL_TIM_PWM_Start+0xfe>
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b0c      	cmp	r3, #12
 8004ea6:	d104      	bne.n	8004eb2 <HAL_TIM_PWM_Start+0xe6>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004eb0:	e00b      	b.n	8004eca <HAL_TIM_PWM_Start+0xfe>
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b10      	cmp	r3, #16
 8004eb6:	d104      	bne.n	8004ec2 <HAL_TIM_PWM_Start+0xf6>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ec0:	e003      	b.n	8004eca <HAL_TIM_PWM_Start+0xfe>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2202      	movs	r2, #2
 8004ec6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	6839      	ldr	r1, [r7, #0]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fe68 	bl	8005ba8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a35      	ldr	r2, [pc, #212]	; (8004fb4 <HAL_TIM_PWM_Start+0x1e8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d013      	beq.n	8004f0a <HAL_TIM_PWM_Start+0x13e>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a34      	ldr	r2, [pc, #208]	; (8004fb8 <HAL_TIM_PWM_Start+0x1ec>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d00e      	beq.n	8004f0a <HAL_TIM_PWM_Start+0x13e>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a32      	ldr	r2, [pc, #200]	; (8004fbc <HAL_TIM_PWM_Start+0x1f0>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d009      	beq.n	8004f0a <HAL_TIM_PWM_Start+0x13e>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a31      	ldr	r2, [pc, #196]	; (8004fc0 <HAL_TIM_PWM_Start+0x1f4>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d004      	beq.n	8004f0a <HAL_TIM_PWM_Start+0x13e>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a2f      	ldr	r2, [pc, #188]	; (8004fc4 <HAL_TIM_PWM_Start+0x1f8>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d101      	bne.n	8004f0e <HAL_TIM_PWM_Start+0x142>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e000      	b.n	8004f10 <HAL_TIM_PWM_Start+0x144>
 8004f0e:	2300      	movs	r3, #0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d007      	beq.n	8004f24 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f22:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a22      	ldr	r2, [pc, #136]	; (8004fb4 <HAL_TIM_PWM_Start+0x1e8>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d01d      	beq.n	8004f6a <HAL_TIM_PWM_Start+0x19e>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f36:	d018      	beq.n	8004f6a <HAL_TIM_PWM_Start+0x19e>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a22      	ldr	r2, [pc, #136]	; (8004fc8 <HAL_TIM_PWM_Start+0x1fc>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d013      	beq.n	8004f6a <HAL_TIM_PWM_Start+0x19e>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a21      	ldr	r2, [pc, #132]	; (8004fcc <HAL_TIM_PWM_Start+0x200>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00e      	beq.n	8004f6a <HAL_TIM_PWM_Start+0x19e>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a1f      	ldr	r2, [pc, #124]	; (8004fd0 <HAL_TIM_PWM_Start+0x204>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d009      	beq.n	8004f6a <HAL_TIM_PWM_Start+0x19e>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a17      	ldr	r2, [pc, #92]	; (8004fb8 <HAL_TIM_PWM_Start+0x1ec>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d004      	beq.n	8004f6a <HAL_TIM_PWM_Start+0x19e>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a15      	ldr	r2, [pc, #84]	; (8004fbc <HAL_TIM_PWM_Start+0x1f0>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d115      	bne.n	8004f96 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	4b18      	ldr	r3, [pc, #96]	; (8004fd4 <HAL_TIM_PWM_Start+0x208>)
 8004f72:	4013      	ands	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2b06      	cmp	r3, #6
 8004f7a:	d015      	beq.n	8004fa8 <HAL_TIM_PWM_Start+0x1dc>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f82:	d011      	beq.n	8004fa8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f042 0201 	orr.w	r2, r2, #1
 8004f92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f94:	e008      	b.n	8004fa8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f042 0201 	orr.w	r2, r2, #1
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	e000      	b.n	8004faa <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	40012c00 	.word	0x40012c00
 8004fb8:	40013400 	.word	0x40013400
 8004fbc:	40014000 	.word	0x40014000
 8004fc0:	40014400 	.word	0x40014400
 8004fc4:	40014800 	.word	0x40014800
 8004fc8:	40000400 	.word	0x40000400
 8004fcc:	40000800 	.word	0x40000800
 8004fd0:	40000c00 	.word	0x40000c00
 8004fd4:	00010007 	.word	0x00010007

08004fd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d101      	bne.n	8004ff6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e0ff      	b.n	80051f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b14      	cmp	r3, #20
 8005002:	f200 80f0 	bhi.w	80051e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005006:	a201      	add	r2, pc, #4	; (adr r2, 800500c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500c:	08005061 	.word	0x08005061
 8005010:	080051e7 	.word	0x080051e7
 8005014:	080051e7 	.word	0x080051e7
 8005018:	080051e7 	.word	0x080051e7
 800501c:	080050a1 	.word	0x080050a1
 8005020:	080051e7 	.word	0x080051e7
 8005024:	080051e7 	.word	0x080051e7
 8005028:	080051e7 	.word	0x080051e7
 800502c:	080050e3 	.word	0x080050e3
 8005030:	080051e7 	.word	0x080051e7
 8005034:	080051e7 	.word	0x080051e7
 8005038:	080051e7 	.word	0x080051e7
 800503c:	08005123 	.word	0x08005123
 8005040:	080051e7 	.word	0x080051e7
 8005044:	080051e7 	.word	0x080051e7
 8005048:	080051e7 	.word	0x080051e7
 800504c:	08005165 	.word	0x08005165
 8005050:	080051e7 	.word	0x080051e7
 8005054:	080051e7 	.word	0x080051e7
 8005058:	080051e7 	.word	0x080051e7
 800505c:	080051a5 	.word	0x080051a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68b9      	ldr	r1, [r7, #8]
 8005066:	4618      	mov	r0, r3
 8005068:	f000 fa2e 	bl	80054c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	699a      	ldr	r2, [r3, #24]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0208 	orr.w	r2, r2, #8
 800507a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	699a      	ldr	r2, [r3, #24]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0204 	bic.w	r2, r2, #4
 800508a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6999      	ldr	r1, [r3, #24]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	691a      	ldr	r2, [r3, #16]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	619a      	str	r2, [r3, #24]
      break;
 800509e:	e0a5      	b.n	80051ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 fa9e 	bl	80055e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699a      	ldr	r2, [r3, #24]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699a      	ldr	r2, [r3, #24]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6999      	ldr	r1, [r3, #24]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	021a      	lsls	r2, r3, #8
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	430a      	orrs	r2, r1
 80050de:	619a      	str	r2, [r3, #24]
      break;
 80050e0:	e084      	b.n	80051ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68b9      	ldr	r1, [r7, #8]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f000 fb07 	bl	80056fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	69da      	ldr	r2, [r3, #28]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f042 0208 	orr.w	r2, r2, #8
 80050fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	69da      	ldr	r2, [r3, #28]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0204 	bic.w	r2, r2, #4
 800510c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	69d9      	ldr	r1, [r3, #28]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	691a      	ldr	r2, [r3, #16]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	61da      	str	r2, [r3, #28]
      break;
 8005120:	e064      	b.n	80051ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68b9      	ldr	r1, [r7, #8]
 8005128:	4618      	mov	r0, r3
 800512a:	f000 fb6f 	bl	800580c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69da      	ldr	r2, [r3, #28]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800513c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69da      	ldr	r2, [r3, #28]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800514c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	69d9      	ldr	r1, [r3, #28]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	021a      	lsls	r2, r3, #8
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	61da      	str	r2, [r3, #28]
      break;
 8005162:	e043      	b.n	80051ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68b9      	ldr	r1, [r7, #8]
 800516a:	4618      	mov	r0, r3
 800516c:	f000 fbb8 	bl	80058e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0208 	orr.w	r2, r2, #8
 800517e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0204 	bic.w	r2, r2, #4
 800518e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	691a      	ldr	r2, [r3, #16]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051a2:	e023      	b.n	80051ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68b9      	ldr	r1, [r7, #8]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 fbfc 	bl	80059a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	021a      	lsls	r2, r3, #8
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051e4:	e002      	b.n	80051ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	75fb      	strb	r3, [r7, #23]
      break;
 80051ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3718      	adds	r7, #24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop

08005200 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005214:	2b01      	cmp	r3, #1
 8005216:	d101      	bne.n	800521c <HAL_TIM_ConfigClockSource+0x1c>
 8005218:	2302      	movs	r3, #2
 800521a:	e0b6      	b.n	800538a <HAL_TIM_ConfigClockSource+0x18a>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800523a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800523e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005246:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005258:	d03e      	beq.n	80052d8 <HAL_TIM_ConfigClockSource+0xd8>
 800525a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800525e:	f200 8087 	bhi.w	8005370 <HAL_TIM_ConfigClockSource+0x170>
 8005262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005266:	f000 8086 	beq.w	8005376 <HAL_TIM_ConfigClockSource+0x176>
 800526a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800526e:	d87f      	bhi.n	8005370 <HAL_TIM_ConfigClockSource+0x170>
 8005270:	2b70      	cmp	r3, #112	; 0x70
 8005272:	d01a      	beq.n	80052aa <HAL_TIM_ConfigClockSource+0xaa>
 8005274:	2b70      	cmp	r3, #112	; 0x70
 8005276:	d87b      	bhi.n	8005370 <HAL_TIM_ConfigClockSource+0x170>
 8005278:	2b60      	cmp	r3, #96	; 0x60
 800527a:	d050      	beq.n	800531e <HAL_TIM_ConfigClockSource+0x11e>
 800527c:	2b60      	cmp	r3, #96	; 0x60
 800527e:	d877      	bhi.n	8005370 <HAL_TIM_ConfigClockSource+0x170>
 8005280:	2b50      	cmp	r3, #80	; 0x50
 8005282:	d03c      	beq.n	80052fe <HAL_TIM_ConfigClockSource+0xfe>
 8005284:	2b50      	cmp	r3, #80	; 0x50
 8005286:	d873      	bhi.n	8005370 <HAL_TIM_ConfigClockSource+0x170>
 8005288:	2b40      	cmp	r3, #64	; 0x40
 800528a:	d058      	beq.n	800533e <HAL_TIM_ConfigClockSource+0x13e>
 800528c:	2b40      	cmp	r3, #64	; 0x40
 800528e:	d86f      	bhi.n	8005370 <HAL_TIM_ConfigClockSource+0x170>
 8005290:	2b30      	cmp	r3, #48	; 0x30
 8005292:	d064      	beq.n	800535e <HAL_TIM_ConfigClockSource+0x15e>
 8005294:	2b30      	cmp	r3, #48	; 0x30
 8005296:	d86b      	bhi.n	8005370 <HAL_TIM_ConfigClockSource+0x170>
 8005298:	2b20      	cmp	r3, #32
 800529a:	d060      	beq.n	800535e <HAL_TIM_ConfigClockSource+0x15e>
 800529c:	2b20      	cmp	r3, #32
 800529e:	d867      	bhi.n	8005370 <HAL_TIM_ConfigClockSource+0x170>
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d05c      	beq.n	800535e <HAL_TIM_ConfigClockSource+0x15e>
 80052a4:	2b10      	cmp	r3, #16
 80052a6:	d05a      	beq.n	800535e <HAL_TIM_ConfigClockSource+0x15e>
 80052a8:	e062      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6818      	ldr	r0, [r3, #0]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	6899      	ldr	r1, [r3, #8]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f000 fc55 	bl	8005b68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	609a      	str	r2, [r3, #8]
      break;
 80052d6:	e04f      	b.n	8005378 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6818      	ldr	r0, [r3, #0]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	6899      	ldr	r1, [r3, #8]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f000 fc3e 	bl	8005b68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689a      	ldr	r2, [r3, #8]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052fa:	609a      	str	r2, [r3, #8]
      break;
 80052fc:	e03c      	b.n	8005378 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6818      	ldr	r0, [r3, #0]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	6859      	ldr	r1, [r3, #4]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	461a      	mov	r2, r3
 800530c:	f000 fbb2 	bl	8005a74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2150      	movs	r1, #80	; 0x50
 8005316:	4618      	mov	r0, r3
 8005318:	f000 fc0b 	bl	8005b32 <TIM_ITRx_SetConfig>
      break;
 800531c:	e02c      	b.n	8005378 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6818      	ldr	r0, [r3, #0]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	6859      	ldr	r1, [r3, #4]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	461a      	mov	r2, r3
 800532c:	f000 fbd1 	bl	8005ad2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2160      	movs	r1, #96	; 0x60
 8005336:	4618      	mov	r0, r3
 8005338:	f000 fbfb 	bl	8005b32 <TIM_ITRx_SetConfig>
      break;
 800533c:	e01c      	b.n	8005378 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6818      	ldr	r0, [r3, #0]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	6859      	ldr	r1, [r3, #4]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	461a      	mov	r2, r3
 800534c:	f000 fb92 	bl	8005a74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2140      	movs	r1, #64	; 0x40
 8005356:	4618      	mov	r0, r3
 8005358:	f000 fbeb 	bl	8005b32 <TIM_ITRx_SetConfig>
      break;
 800535c:	e00c      	b.n	8005378 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4619      	mov	r1, r3
 8005368:	4610      	mov	r0, r2
 800536a:	f000 fbe2 	bl	8005b32 <TIM_ITRx_SetConfig>
      break;
 800536e:	e003      	b.n	8005378 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	73fb      	strb	r3, [r7, #15]
      break;
 8005374:	e000      	b.n	8005378 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005376:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005388:	7bfb      	ldrb	r3, [r7, #15]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
	...

08005394 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a40      	ldr	r2, [pc, #256]	; (80054a8 <TIM_Base_SetConfig+0x114>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d013      	beq.n	80053d4 <TIM_Base_SetConfig+0x40>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b2:	d00f      	beq.n	80053d4 <TIM_Base_SetConfig+0x40>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a3d      	ldr	r2, [pc, #244]	; (80054ac <TIM_Base_SetConfig+0x118>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d00b      	beq.n	80053d4 <TIM_Base_SetConfig+0x40>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a3c      	ldr	r2, [pc, #240]	; (80054b0 <TIM_Base_SetConfig+0x11c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d007      	beq.n	80053d4 <TIM_Base_SetConfig+0x40>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a3b      	ldr	r2, [pc, #236]	; (80054b4 <TIM_Base_SetConfig+0x120>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d003      	beq.n	80053d4 <TIM_Base_SetConfig+0x40>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a3a      	ldr	r2, [pc, #232]	; (80054b8 <TIM_Base_SetConfig+0x124>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d108      	bne.n	80053e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a2f      	ldr	r2, [pc, #188]	; (80054a8 <TIM_Base_SetConfig+0x114>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d01f      	beq.n	800542e <TIM_Base_SetConfig+0x9a>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f4:	d01b      	beq.n	800542e <TIM_Base_SetConfig+0x9a>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a2c      	ldr	r2, [pc, #176]	; (80054ac <TIM_Base_SetConfig+0x118>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d017      	beq.n	800542e <TIM_Base_SetConfig+0x9a>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a2b      	ldr	r2, [pc, #172]	; (80054b0 <TIM_Base_SetConfig+0x11c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d013      	beq.n	800542e <TIM_Base_SetConfig+0x9a>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a2a      	ldr	r2, [pc, #168]	; (80054b4 <TIM_Base_SetConfig+0x120>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d00f      	beq.n	800542e <TIM_Base_SetConfig+0x9a>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a29      	ldr	r2, [pc, #164]	; (80054b8 <TIM_Base_SetConfig+0x124>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00b      	beq.n	800542e <TIM_Base_SetConfig+0x9a>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a28      	ldr	r2, [pc, #160]	; (80054bc <TIM_Base_SetConfig+0x128>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d007      	beq.n	800542e <TIM_Base_SetConfig+0x9a>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a27      	ldr	r2, [pc, #156]	; (80054c0 <TIM_Base_SetConfig+0x12c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d003      	beq.n	800542e <TIM_Base_SetConfig+0x9a>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a26      	ldr	r2, [pc, #152]	; (80054c4 <TIM_Base_SetConfig+0x130>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d108      	bne.n	8005440 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	4313      	orrs	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a10      	ldr	r2, [pc, #64]	; (80054a8 <TIM_Base_SetConfig+0x114>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00f      	beq.n	800548c <TIM_Base_SetConfig+0xf8>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a12      	ldr	r2, [pc, #72]	; (80054b8 <TIM_Base_SetConfig+0x124>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d00b      	beq.n	800548c <TIM_Base_SetConfig+0xf8>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a11      	ldr	r2, [pc, #68]	; (80054bc <TIM_Base_SetConfig+0x128>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d007      	beq.n	800548c <TIM_Base_SetConfig+0xf8>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a10      	ldr	r2, [pc, #64]	; (80054c0 <TIM_Base_SetConfig+0x12c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d003      	beq.n	800548c <TIM_Base_SetConfig+0xf8>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a0f      	ldr	r2, [pc, #60]	; (80054c4 <TIM_Base_SetConfig+0x130>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d103      	bne.n	8005494 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	691a      	ldr	r2, [r3, #16]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	615a      	str	r2, [r3, #20]
}
 800549a:	bf00      	nop
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	40012c00 	.word	0x40012c00
 80054ac:	40000400 	.word	0x40000400
 80054b0:	40000800 	.word	0x40000800
 80054b4:	40000c00 	.word	0x40000c00
 80054b8:	40013400 	.word	0x40013400
 80054bc:	40014000 	.word	0x40014000
 80054c0:	40014400 	.word	0x40014400
 80054c4:	40014800 	.word	0x40014800

080054c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b087      	sub	sp, #28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	f023 0201 	bic.w	r2, r3, #1
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f023 0303 	bic.w	r3, r3, #3
 8005502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	4313      	orrs	r3, r2
 800550c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f023 0302 	bic.w	r3, r3, #2
 8005514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	4313      	orrs	r3, r2
 800551e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a2c      	ldr	r2, [pc, #176]	; (80055d4 <TIM_OC1_SetConfig+0x10c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d00f      	beq.n	8005548 <TIM_OC1_SetConfig+0x80>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a2b      	ldr	r2, [pc, #172]	; (80055d8 <TIM_OC1_SetConfig+0x110>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d00b      	beq.n	8005548 <TIM_OC1_SetConfig+0x80>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a2a      	ldr	r2, [pc, #168]	; (80055dc <TIM_OC1_SetConfig+0x114>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d007      	beq.n	8005548 <TIM_OC1_SetConfig+0x80>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a29      	ldr	r2, [pc, #164]	; (80055e0 <TIM_OC1_SetConfig+0x118>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d003      	beq.n	8005548 <TIM_OC1_SetConfig+0x80>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a28      	ldr	r2, [pc, #160]	; (80055e4 <TIM_OC1_SetConfig+0x11c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d10c      	bne.n	8005562 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f023 0308 	bic.w	r3, r3, #8
 800554e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	4313      	orrs	r3, r2
 8005558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f023 0304 	bic.w	r3, r3, #4
 8005560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a1b      	ldr	r2, [pc, #108]	; (80055d4 <TIM_OC1_SetConfig+0x10c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d00f      	beq.n	800558a <TIM_OC1_SetConfig+0xc2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a1a      	ldr	r2, [pc, #104]	; (80055d8 <TIM_OC1_SetConfig+0x110>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d00b      	beq.n	800558a <TIM_OC1_SetConfig+0xc2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a19      	ldr	r2, [pc, #100]	; (80055dc <TIM_OC1_SetConfig+0x114>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d007      	beq.n	800558a <TIM_OC1_SetConfig+0xc2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a18      	ldr	r2, [pc, #96]	; (80055e0 <TIM_OC1_SetConfig+0x118>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d003      	beq.n	800558a <TIM_OC1_SetConfig+0xc2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a17      	ldr	r2, [pc, #92]	; (80055e4 <TIM_OC1_SetConfig+0x11c>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d111      	bne.n	80055ae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	621a      	str	r2, [r3, #32]
}
 80055c8:	bf00      	nop
 80055ca:	371c      	adds	r7, #28
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	40012c00 	.word	0x40012c00
 80055d8:	40013400 	.word	0x40013400
 80055dc:	40014000 	.word	0x40014000
 80055e0:	40014400 	.word	0x40014400
 80055e4:	40014800 	.word	0x40014800

080055e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	f023 0210 	bic.w	r2, r3, #16
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800561a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	021b      	lsls	r3, r3, #8
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	4313      	orrs	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f023 0320 	bic.w	r3, r3, #32
 8005636:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	011b      	lsls	r3, r3, #4
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a28      	ldr	r2, [pc, #160]	; (80056e8 <TIM_OC2_SetConfig+0x100>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d003      	beq.n	8005654 <TIM_OC2_SetConfig+0x6c>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a27      	ldr	r2, [pc, #156]	; (80056ec <TIM_OC2_SetConfig+0x104>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d10d      	bne.n	8005670 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800565a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	011b      	lsls	r3, r3, #4
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	4313      	orrs	r3, r2
 8005666:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800566e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a1d      	ldr	r2, [pc, #116]	; (80056e8 <TIM_OC2_SetConfig+0x100>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d00f      	beq.n	8005698 <TIM_OC2_SetConfig+0xb0>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a1c      	ldr	r2, [pc, #112]	; (80056ec <TIM_OC2_SetConfig+0x104>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d00b      	beq.n	8005698 <TIM_OC2_SetConfig+0xb0>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a1b      	ldr	r2, [pc, #108]	; (80056f0 <TIM_OC2_SetConfig+0x108>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d007      	beq.n	8005698 <TIM_OC2_SetConfig+0xb0>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a1a      	ldr	r2, [pc, #104]	; (80056f4 <TIM_OC2_SetConfig+0x10c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d003      	beq.n	8005698 <TIM_OC2_SetConfig+0xb0>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a19      	ldr	r2, [pc, #100]	; (80056f8 <TIM_OC2_SetConfig+0x110>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d113      	bne.n	80056c0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800569e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	4313      	orrs	r3, r2
 80056be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	621a      	str	r2, [r3, #32]
}
 80056da:	bf00      	nop
 80056dc:	371c      	adds	r7, #28
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	40012c00 	.word	0x40012c00
 80056ec:	40013400 	.word	0x40013400
 80056f0:	40014000 	.word	0x40014000
 80056f4:	40014400 	.word	0x40014400
 80056f8:	40014800 	.word	0x40014800

080056fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b087      	sub	sp, #28
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800572a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 0303 	bic.w	r3, r3, #3
 8005736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	021b      	lsls	r3, r3, #8
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	4313      	orrs	r3, r2
 8005754:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a27      	ldr	r2, [pc, #156]	; (80057f8 <TIM_OC3_SetConfig+0xfc>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d003      	beq.n	8005766 <TIM_OC3_SetConfig+0x6a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a26      	ldr	r2, [pc, #152]	; (80057fc <TIM_OC3_SetConfig+0x100>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d10d      	bne.n	8005782 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800576c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	021b      	lsls	r3, r3, #8
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	4313      	orrs	r3, r2
 8005778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a1c      	ldr	r2, [pc, #112]	; (80057f8 <TIM_OC3_SetConfig+0xfc>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d00f      	beq.n	80057aa <TIM_OC3_SetConfig+0xae>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a1b      	ldr	r2, [pc, #108]	; (80057fc <TIM_OC3_SetConfig+0x100>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d00b      	beq.n	80057aa <TIM_OC3_SetConfig+0xae>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a1a      	ldr	r2, [pc, #104]	; (8005800 <TIM_OC3_SetConfig+0x104>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d007      	beq.n	80057aa <TIM_OC3_SetConfig+0xae>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a19      	ldr	r2, [pc, #100]	; (8005804 <TIM_OC3_SetConfig+0x108>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d003      	beq.n	80057aa <TIM_OC3_SetConfig+0xae>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a18      	ldr	r2, [pc, #96]	; (8005808 <TIM_OC3_SetConfig+0x10c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d113      	bne.n	80057d2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	011b      	lsls	r3, r3, #4
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	621a      	str	r2, [r3, #32]
}
 80057ec:	bf00      	nop
 80057ee:	371c      	adds	r7, #28
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	40012c00 	.word	0x40012c00
 80057fc:	40013400 	.word	0x40013400
 8005800:	40014000 	.word	0x40014000
 8005804:	40014400 	.word	0x40014400
 8005808:	40014800 	.word	0x40014800

0800580c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800583a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800583e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	021b      	lsls	r3, r3, #8
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4313      	orrs	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800585a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	031b      	lsls	r3, r3, #12
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4313      	orrs	r3, r2
 8005866:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a18      	ldr	r2, [pc, #96]	; (80058cc <TIM_OC4_SetConfig+0xc0>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d00f      	beq.n	8005890 <TIM_OC4_SetConfig+0x84>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a17      	ldr	r2, [pc, #92]	; (80058d0 <TIM_OC4_SetConfig+0xc4>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d00b      	beq.n	8005890 <TIM_OC4_SetConfig+0x84>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a16      	ldr	r2, [pc, #88]	; (80058d4 <TIM_OC4_SetConfig+0xc8>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d007      	beq.n	8005890 <TIM_OC4_SetConfig+0x84>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a15      	ldr	r2, [pc, #84]	; (80058d8 <TIM_OC4_SetConfig+0xcc>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d003      	beq.n	8005890 <TIM_OC4_SetConfig+0x84>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a14      	ldr	r2, [pc, #80]	; (80058dc <TIM_OC4_SetConfig+0xd0>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d109      	bne.n	80058a4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005896:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	019b      	lsls	r3, r3, #6
 800589e:	697a      	ldr	r2, [r7, #20]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	621a      	str	r2, [r3, #32]
}
 80058be:	bf00      	nop
 80058c0:	371c      	adds	r7, #28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	40012c00 	.word	0x40012c00
 80058d0:	40013400 	.word	0x40013400
 80058d4:	40014000 	.word	0x40014000
 80058d8:	40014400 	.word	0x40014400
 80058dc:	40014800 	.word	0x40014800

080058e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800590e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	4313      	orrs	r3, r2
 800591c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005924:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	041b      	lsls	r3, r3, #16
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	4313      	orrs	r3, r2
 8005930:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a17      	ldr	r2, [pc, #92]	; (8005994 <TIM_OC5_SetConfig+0xb4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d00f      	beq.n	800595a <TIM_OC5_SetConfig+0x7a>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a16      	ldr	r2, [pc, #88]	; (8005998 <TIM_OC5_SetConfig+0xb8>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00b      	beq.n	800595a <TIM_OC5_SetConfig+0x7a>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a15      	ldr	r2, [pc, #84]	; (800599c <TIM_OC5_SetConfig+0xbc>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d007      	beq.n	800595a <TIM_OC5_SetConfig+0x7a>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a14      	ldr	r2, [pc, #80]	; (80059a0 <TIM_OC5_SetConfig+0xc0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d003      	beq.n	800595a <TIM_OC5_SetConfig+0x7a>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a13      	ldr	r2, [pc, #76]	; (80059a4 <TIM_OC5_SetConfig+0xc4>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d109      	bne.n	800596e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005960:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	021b      	lsls	r3, r3, #8
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	4313      	orrs	r3, r2
 800596c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	621a      	str	r2, [r3, #32]
}
 8005988:	bf00      	nop
 800598a:	371c      	adds	r7, #28
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	40012c00 	.word	0x40012c00
 8005998:	40013400 	.word	0x40013400
 800599c:	40014000 	.word	0x40014000
 80059a0:	40014400 	.word	0x40014400
 80059a4:	40014800 	.word	0x40014800

080059a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	021b      	lsls	r3, r3, #8
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	051b      	lsls	r3, r3, #20
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a18      	ldr	r2, [pc, #96]	; (8005a60 <TIM_OC6_SetConfig+0xb8>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d00f      	beq.n	8005a24 <TIM_OC6_SetConfig+0x7c>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a17      	ldr	r2, [pc, #92]	; (8005a64 <TIM_OC6_SetConfig+0xbc>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d00b      	beq.n	8005a24 <TIM_OC6_SetConfig+0x7c>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a16      	ldr	r2, [pc, #88]	; (8005a68 <TIM_OC6_SetConfig+0xc0>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d007      	beq.n	8005a24 <TIM_OC6_SetConfig+0x7c>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a15      	ldr	r2, [pc, #84]	; (8005a6c <TIM_OC6_SetConfig+0xc4>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d003      	beq.n	8005a24 <TIM_OC6_SetConfig+0x7c>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a14      	ldr	r2, [pc, #80]	; (8005a70 <TIM_OC6_SetConfig+0xc8>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d109      	bne.n	8005a38 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	029b      	lsls	r3, r3, #10
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	621a      	str	r2, [r3, #32]
}
 8005a52:	bf00      	nop
 8005a54:	371c      	adds	r7, #28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	40012c00 	.word	0x40012c00
 8005a64:	40013400 	.word	0x40013400
 8005a68:	40014000 	.word	0x40014000
 8005a6c:	40014400 	.word	0x40014400
 8005a70:	40014800 	.word	0x40014800

08005a74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b087      	sub	sp, #28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	f023 0201 	bic.w	r2, r3, #1
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	011b      	lsls	r3, r3, #4
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f023 030a 	bic.w	r3, r3, #10
 8005ab0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	621a      	str	r2, [r3, #32]
}
 8005ac6:	bf00      	nop
 8005ac8:	371c      	adds	r7, #28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b087      	sub	sp, #28
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	60f8      	str	r0, [r7, #12]
 8005ada:	60b9      	str	r1, [r7, #8]
 8005adc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	f023 0210 	bic.w	r2, r3, #16
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005afc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	031b      	lsls	r3, r3, #12
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	011b      	lsls	r3, r3, #4
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	621a      	str	r2, [r3, #32]
}
 8005b26:	bf00      	nop
 8005b28:	371c      	adds	r7, #28
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b085      	sub	sp, #20
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	f043 0307 	orr.w	r3, r3, #7
 8005b54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	609a      	str	r2, [r3, #8]
}
 8005b5c:	bf00      	nop
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
 8005b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	021a      	lsls	r2, r3, #8
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	609a      	str	r2, [r3, #8]
}
 8005b9c:	bf00      	nop
 8005b9e:	371c      	adds	r7, #28
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	f003 031f 	and.w	r3, r3, #31
 8005bba:	2201      	movs	r2, #1
 8005bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6a1a      	ldr	r2, [r3, #32]
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	43db      	mvns	r3, r3
 8005bca:	401a      	ands	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6a1a      	ldr	r2, [r3, #32]
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f003 031f 	and.w	r3, r3, #31
 8005bda:	6879      	ldr	r1, [r7, #4]
 8005bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8005be0:	431a      	orrs	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	621a      	str	r2, [r3, #32]
}
 8005be6:	bf00      	nop
 8005be8:	371c      	adds	r7, #28
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
	...

08005bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d101      	bne.n	8005c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	e068      	b.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a2e      	ldr	r2, [pc, #184]	; (8005cec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d004      	beq.n	8005c40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a2d      	ldr	r2, [pc, #180]	; (8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d108      	bne.n	8005c52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a1e      	ldr	r2, [pc, #120]	; (8005cec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d01d      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c7e:	d018      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a1b      	ldr	r2, [pc, #108]	; (8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d013      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a1a      	ldr	r2, [pc, #104]	; (8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d00e      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a18      	ldr	r2, [pc, #96]	; (8005cfc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d009      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a13      	ldr	r2, [pc, #76]	; (8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d004      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a14      	ldr	r2, [pc, #80]	; (8005d00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d10c      	bne.n	8005ccc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	40012c00 	.word	0x40012c00
 8005cf0:	40013400 	.word	0x40013400
 8005cf4:	40000400 	.word	0x40000400
 8005cf8:	40000800 	.word	0x40000800
 8005cfc:	40000c00 	.word	0x40000c00
 8005d00:	40014000 	.word	0x40014000

08005d04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d101      	bne.n	8005d20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	e065      	b.n	8005dec <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d86:	4313      	orrs	r3, r2
 8005d88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	041b      	lsls	r3, r3, #16
 8005d96:	4313      	orrs	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a16      	ldr	r2, [pc, #88]	; (8005df8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d004      	beq.n	8005dae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a14      	ldr	r2, [pc, #80]	; (8005dfc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d115      	bne.n	8005dda <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	051b      	lsls	r3, r3, #20
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	69db      	ldr	r3, [r3, #28]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3714      	adds	r7, #20
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	40012c00 	.word	0x40012c00
 8005dfc:	40013400 	.word	0x40013400

08005e00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e040      	b.n	8005e94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d106      	bne.n	8005e28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7fb fb40 	bl	80014a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2224      	movs	r2, #36	; 0x24
 8005e2c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 0201 	bic.w	r2, r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f82c 	bl	8005e9c <UART_SetConfig>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d101      	bne.n	8005e4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e022      	b.n	8005e94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d002      	beq.n	8005e5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 faaa 	bl	80063b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689a      	ldr	r2, [r3, #8]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0201 	orr.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fb31 	bl	80064f4 <UART_CheckIdleState>
 8005e92:	4603      	mov	r3, r0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e9c:	b5b0      	push	{r4, r5, r7, lr}
 8005e9e:	b088      	sub	sp, #32
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689a      	ldr	r2, [r3, #8]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	431a      	orrs	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	4bad      	ldr	r3, [pc, #692]	; (800617c <UART_SetConfig+0x2e0>)
 8005ec8:	4013      	ands	r3, r2
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6812      	ldr	r2, [r2, #0]
 8005ece:	69f9      	ldr	r1, [r7, #28]
 8005ed0:	430b      	orrs	r3, r1
 8005ed2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68da      	ldr	r2, [r3, #12]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4aa2      	ldr	r2, [pc, #648]	; (8006180 <UART_SetConfig+0x2e4>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d004      	beq.n	8005f04 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	69fa      	ldr	r2, [r7, #28]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	69fa      	ldr	r2, [r7, #28]
 8005f14:	430a      	orrs	r2, r1
 8005f16:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a99      	ldr	r2, [pc, #612]	; (8006184 <UART_SetConfig+0x2e8>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d121      	bne.n	8005f66 <UART_SetConfig+0xca>
 8005f22:	4b99      	ldr	r3, [pc, #612]	; (8006188 <UART_SetConfig+0x2ec>)
 8005f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f28:	f003 0303 	and.w	r3, r3, #3
 8005f2c:	2b03      	cmp	r3, #3
 8005f2e:	d817      	bhi.n	8005f60 <UART_SetConfig+0xc4>
 8005f30:	a201      	add	r2, pc, #4	; (adr r2, 8005f38 <UART_SetConfig+0x9c>)
 8005f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f36:	bf00      	nop
 8005f38:	08005f49 	.word	0x08005f49
 8005f3c:	08005f55 	.word	0x08005f55
 8005f40:	08005f4f 	.word	0x08005f4f
 8005f44:	08005f5b 	.word	0x08005f5b
 8005f48:	2301      	movs	r3, #1
 8005f4a:	76fb      	strb	r3, [r7, #27]
 8005f4c:	e0e7      	b.n	800611e <UART_SetConfig+0x282>
 8005f4e:	2302      	movs	r3, #2
 8005f50:	76fb      	strb	r3, [r7, #27]
 8005f52:	e0e4      	b.n	800611e <UART_SetConfig+0x282>
 8005f54:	2304      	movs	r3, #4
 8005f56:	76fb      	strb	r3, [r7, #27]
 8005f58:	e0e1      	b.n	800611e <UART_SetConfig+0x282>
 8005f5a:	2308      	movs	r3, #8
 8005f5c:	76fb      	strb	r3, [r7, #27]
 8005f5e:	e0de      	b.n	800611e <UART_SetConfig+0x282>
 8005f60:	2310      	movs	r3, #16
 8005f62:	76fb      	strb	r3, [r7, #27]
 8005f64:	e0db      	b.n	800611e <UART_SetConfig+0x282>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a88      	ldr	r2, [pc, #544]	; (800618c <UART_SetConfig+0x2f0>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d132      	bne.n	8005fd6 <UART_SetConfig+0x13a>
 8005f70:	4b85      	ldr	r3, [pc, #532]	; (8006188 <UART_SetConfig+0x2ec>)
 8005f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f76:	f003 030c 	and.w	r3, r3, #12
 8005f7a:	2b0c      	cmp	r3, #12
 8005f7c:	d828      	bhi.n	8005fd0 <UART_SetConfig+0x134>
 8005f7e:	a201      	add	r2, pc, #4	; (adr r2, 8005f84 <UART_SetConfig+0xe8>)
 8005f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f84:	08005fb9 	.word	0x08005fb9
 8005f88:	08005fd1 	.word	0x08005fd1
 8005f8c:	08005fd1 	.word	0x08005fd1
 8005f90:	08005fd1 	.word	0x08005fd1
 8005f94:	08005fc5 	.word	0x08005fc5
 8005f98:	08005fd1 	.word	0x08005fd1
 8005f9c:	08005fd1 	.word	0x08005fd1
 8005fa0:	08005fd1 	.word	0x08005fd1
 8005fa4:	08005fbf 	.word	0x08005fbf
 8005fa8:	08005fd1 	.word	0x08005fd1
 8005fac:	08005fd1 	.word	0x08005fd1
 8005fb0:	08005fd1 	.word	0x08005fd1
 8005fb4:	08005fcb 	.word	0x08005fcb
 8005fb8:	2300      	movs	r3, #0
 8005fba:	76fb      	strb	r3, [r7, #27]
 8005fbc:	e0af      	b.n	800611e <UART_SetConfig+0x282>
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	76fb      	strb	r3, [r7, #27]
 8005fc2:	e0ac      	b.n	800611e <UART_SetConfig+0x282>
 8005fc4:	2304      	movs	r3, #4
 8005fc6:	76fb      	strb	r3, [r7, #27]
 8005fc8:	e0a9      	b.n	800611e <UART_SetConfig+0x282>
 8005fca:	2308      	movs	r3, #8
 8005fcc:	76fb      	strb	r3, [r7, #27]
 8005fce:	e0a6      	b.n	800611e <UART_SetConfig+0x282>
 8005fd0:	2310      	movs	r3, #16
 8005fd2:	76fb      	strb	r3, [r7, #27]
 8005fd4:	e0a3      	b.n	800611e <UART_SetConfig+0x282>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a6d      	ldr	r2, [pc, #436]	; (8006190 <UART_SetConfig+0x2f4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d120      	bne.n	8006022 <UART_SetConfig+0x186>
 8005fe0:	4b69      	ldr	r3, [pc, #420]	; (8006188 <UART_SetConfig+0x2ec>)
 8005fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005fea:	2b30      	cmp	r3, #48	; 0x30
 8005fec:	d013      	beq.n	8006016 <UART_SetConfig+0x17a>
 8005fee:	2b30      	cmp	r3, #48	; 0x30
 8005ff0:	d814      	bhi.n	800601c <UART_SetConfig+0x180>
 8005ff2:	2b20      	cmp	r3, #32
 8005ff4:	d009      	beq.n	800600a <UART_SetConfig+0x16e>
 8005ff6:	2b20      	cmp	r3, #32
 8005ff8:	d810      	bhi.n	800601c <UART_SetConfig+0x180>
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <UART_SetConfig+0x168>
 8005ffe:	2b10      	cmp	r3, #16
 8006000:	d006      	beq.n	8006010 <UART_SetConfig+0x174>
 8006002:	e00b      	b.n	800601c <UART_SetConfig+0x180>
 8006004:	2300      	movs	r3, #0
 8006006:	76fb      	strb	r3, [r7, #27]
 8006008:	e089      	b.n	800611e <UART_SetConfig+0x282>
 800600a:	2302      	movs	r3, #2
 800600c:	76fb      	strb	r3, [r7, #27]
 800600e:	e086      	b.n	800611e <UART_SetConfig+0x282>
 8006010:	2304      	movs	r3, #4
 8006012:	76fb      	strb	r3, [r7, #27]
 8006014:	e083      	b.n	800611e <UART_SetConfig+0x282>
 8006016:	2308      	movs	r3, #8
 8006018:	76fb      	strb	r3, [r7, #27]
 800601a:	e080      	b.n	800611e <UART_SetConfig+0x282>
 800601c:	2310      	movs	r3, #16
 800601e:	76fb      	strb	r3, [r7, #27]
 8006020:	e07d      	b.n	800611e <UART_SetConfig+0x282>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a5b      	ldr	r2, [pc, #364]	; (8006194 <UART_SetConfig+0x2f8>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d120      	bne.n	800606e <UART_SetConfig+0x1d2>
 800602c:	4b56      	ldr	r3, [pc, #344]	; (8006188 <UART_SetConfig+0x2ec>)
 800602e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006032:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006036:	2bc0      	cmp	r3, #192	; 0xc0
 8006038:	d013      	beq.n	8006062 <UART_SetConfig+0x1c6>
 800603a:	2bc0      	cmp	r3, #192	; 0xc0
 800603c:	d814      	bhi.n	8006068 <UART_SetConfig+0x1cc>
 800603e:	2b80      	cmp	r3, #128	; 0x80
 8006040:	d009      	beq.n	8006056 <UART_SetConfig+0x1ba>
 8006042:	2b80      	cmp	r3, #128	; 0x80
 8006044:	d810      	bhi.n	8006068 <UART_SetConfig+0x1cc>
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <UART_SetConfig+0x1b4>
 800604a:	2b40      	cmp	r3, #64	; 0x40
 800604c:	d006      	beq.n	800605c <UART_SetConfig+0x1c0>
 800604e:	e00b      	b.n	8006068 <UART_SetConfig+0x1cc>
 8006050:	2300      	movs	r3, #0
 8006052:	76fb      	strb	r3, [r7, #27]
 8006054:	e063      	b.n	800611e <UART_SetConfig+0x282>
 8006056:	2302      	movs	r3, #2
 8006058:	76fb      	strb	r3, [r7, #27]
 800605a:	e060      	b.n	800611e <UART_SetConfig+0x282>
 800605c:	2304      	movs	r3, #4
 800605e:	76fb      	strb	r3, [r7, #27]
 8006060:	e05d      	b.n	800611e <UART_SetConfig+0x282>
 8006062:	2308      	movs	r3, #8
 8006064:	76fb      	strb	r3, [r7, #27]
 8006066:	e05a      	b.n	800611e <UART_SetConfig+0x282>
 8006068:	2310      	movs	r3, #16
 800606a:	76fb      	strb	r3, [r7, #27]
 800606c:	e057      	b.n	800611e <UART_SetConfig+0x282>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a49      	ldr	r2, [pc, #292]	; (8006198 <UART_SetConfig+0x2fc>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d125      	bne.n	80060c4 <UART_SetConfig+0x228>
 8006078:	4b43      	ldr	r3, [pc, #268]	; (8006188 <UART_SetConfig+0x2ec>)
 800607a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800607e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006082:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006086:	d017      	beq.n	80060b8 <UART_SetConfig+0x21c>
 8006088:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800608c:	d817      	bhi.n	80060be <UART_SetConfig+0x222>
 800608e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006092:	d00b      	beq.n	80060ac <UART_SetConfig+0x210>
 8006094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006098:	d811      	bhi.n	80060be <UART_SetConfig+0x222>
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <UART_SetConfig+0x20a>
 800609e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060a2:	d006      	beq.n	80060b2 <UART_SetConfig+0x216>
 80060a4:	e00b      	b.n	80060be <UART_SetConfig+0x222>
 80060a6:	2300      	movs	r3, #0
 80060a8:	76fb      	strb	r3, [r7, #27]
 80060aa:	e038      	b.n	800611e <UART_SetConfig+0x282>
 80060ac:	2302      	movs	r3, #2
 80060ae:	76fb      	strb	r3, [r7, #27]
 80060b0:	e035      	b.n	800611e <UART_SetConfig+0x282>
 80060b2:	2304      	movs	r3, #4
 80060b4:	76fb      	strb	r3, [r7, #27]
 80060b6:	e032      	b.n	800611e <UART_SetConfig+0x282>
 80060b8:	2308      	movs	r3, #8
 80060ba:	76fb      	strb	r3, [r7, #27]
 80060bc:	e02f      	b.n	800611e <UART_SetConfig+0x282>
 80060be:	2310      	movs	r3, #16
 80060c0:	76fb      	strb	r3, [r7, #27]
 80060c2:	e02c      	b.n	800611e <UART_SetConfig+0x282>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a2d      	ldr	r2, [pc, #180]	; (8006180 <UART_SetConfig+0x2e4>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d125      	bne.n	800611a <UART_SetConfig+0x27e>
 80060ce:	4b2e      	ldr	r3, [pc, #184]	; (8006188 <UART_SetConfig+0x2ec>)
 80060d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060dc:	d017      	beq.n	800610e <UART_SetConfig+0x272>
 80060de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060e2:	d817      	bhi.n	8006114 <UART_SetConfig+0x278>
 80060e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060e8:	d00b      	beq.n	8006102 <UART_SetConfig+0x266>
 80060ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ee:	d811      	bhi.n	8006114 <UART_SetConfig+0x278>
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d003      	beq.n	80060fc <UART_SetConfig+0x260>
 80060f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060f8:	d006      	beq.n	8006108 <UART_SetConfig+0x26c>
 80060fa:	e00b      	b.n	8006114 <UART_SetConfig+0x278>
 80060fc:	2300      	movs	r3, #0
 80060fe:	76fb      	strb	r3, [r7, #27]
 8006100:	e00d      	b.n	800611e <UART_SetConfig+0x282>
 8006102:	2302      	movs	r3, #2
 8006104:	76fb      	strb	r3, [r7, #27]
 8006106:	e00a      	b.n	800611e <UART_SetConfig+0x282>
 8006108:	2304      	movs	r3, #4
 800610a:	76fb      	strb	r3, [r7, #27]
 800610c:	e007      	b.n	800611e <UART_SetConfig+0x282>
 800610e:	2308      	movs	r3, #8
 8006110:	76fb      	strb	r3, [r7, #27]
 8006112:	e004      	b.n	800611e <UART_SetConfig+0x282>
 8006114:	2310      	movs	r3, #16
 8006116:	76fb      	strb	r3, [r7, #27]
 8006118:	e001      	b.n	800611e <UART_SetConfig+0x282>
 800611a:	2310      	movs	r3, #16
 800611c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a17      	ldr	r2, [pc, #92]	; (8006180 <UART_SetConfig+0x2e4>)
 8006124:	4293      	cmp	r3, r2
 8006126:	f040 8087 	bne.w	8006238 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800612a:	7efb      	ldrb	r3, [r7, #27]
 800612c:	2b08      	cmp	r3, #8
 800612e:	d837      	bhi.n	80061a0 <UART_SetConfig+0x304>
 8006130:	a201      	add	r2, pc, #4	; (adr r2, 8006138 <UART_SetConfig+0x29c>)
 8006132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006136:	bf00      	nop
 8006138:	0800615d 	.word	0x0800615d
 800613c:	080061a1 	.word	0x080061a1
 8006140:	08006165 	.word	0x08006165
 8006144:	080061a1 	.word	0x080061a1
 8006148:	0800616b 	.word	0x0800616b
 800614c:	080061a1 	.word	0x080061a1
 8006150:	080061a1 	.word	0x080061a1
 8006154:	080061a1 	.word	0x080061a1
 8006158:	08006173 	.word	0x08006173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800615c:	f7fd ffd6 	bl	800410c <HAL_RCC_GetPCLK1Freq>
 8006160:	6178      	str	r0, [r7, #20]
        break;
 8006162:	e022      	b.n	80061aa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006164:	4b0d      	ldr	r3, [pc, #52]	; (800619c <UART_SetConfig+0x300>)
 8006166:	617b      	str	r3, [r7, #20]
        break;
 8006168:	e01f      	b.n	80061aa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800616a:	f7fd ff37 	bl	8003fdc <HAL_RCC_GetSysClockFreq>
 800616e:	6178      	str	r0, [r7, #20]
        break;
 8006170:	e01b      	b.n	80061aa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006176:	617b      	str	r3, [r7, #20]
        break;
 8006178:	e017      	b.n	80061aa <UART_SetConfig+0x30e>
 800617a:	bf00      	nop
 800617c:	efff69f3 	.word	0xefff69f3
 8006180:	40008000 	.word	0x40008000
 8006184:	40013800 	.word	0x40013800
 8006188:	40021000 	.word	0x40021000
 800618c:	40004400 	.word	0x40004400
 8006190:	40004800 	.word	0x40004800
 8006194:	40004c00 	.word	0x40004c00
 8006198:	40005000 	.word	0x40005000
 800619c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	76bb      	strb	r3, [r7, #26]
        break;
 80061a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 80f1 	beq.w	8006394 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	4613      	mov	r3, r2
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	4413      	add	r3, r2
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d305      	bcc.n	80061ce <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d902      	bls.n	80061d4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	76bb      	strb	r3, [r7, #26]
 80061d2:	e0df      	b.n	8006394 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f04f 0100 	mov.w	r1, #0
 80061dc:	f04f 0200 	mov.w	r2, #0
 80061e0:	f04f 0300 	mov.w	r3, #0
 80061e4:	020b      	lsls	r3, r1, #8
 80061e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80061ea:	0202      	lsls	r2, r0, #8
 80061ec:	6879      	ldr	r1, [r7, #4]
 80061ee:	6849      	ldr	r1, [r1, #4]
 80061f0:	0849      	lsrs	r1, r1, #1
 80061f2:	4608      	mov	r0, r1
 80061f4:	f04f 0100 	mov.w	r1, #0
 80061f8:	1814      	adds	r4, r2, r0
 80061fa:	eb43 0501 	adc.w	r5, r3, r1
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	461a      	mov	r2, r3
 8006204:	f04f 0300 	mov.w	r3, #0
 8006208:	4620      	mov	r0, r4
 800620a:	4629      	mov	r1, r5
 800620c:	f7fa fa74 	bl	80006f8 <__aeabi_uldivmod>
 8006210:	4602      	mov	r2, r0
 8006212:	460b      	mov	r3, r1
 8006214:	4613      	mov	r3, r2
 8006216:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800621e:	d308      	bcc.n	8006232 <UART_SetConfig+0x396>
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006226:	d204      	bcs.n	8006232 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	60da      	str	r2, [r3, #12]
 8006230:	e0b0      	b.n	8006394 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	76bb      	strb	r3, [r7, #26]
 8006236:	e0ad      	b.n	8006394 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006240:	d15b      	bne.n	80062fa <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8006242:	7efb      	ldrb	r3, [r7, #27]
 8006244:	2b08      	cmp	r3, #8
 8006246:	d828      	bhi.n	800629a <UART_SetConfig+0x3fe>
 8006248:	a201      	add	r2, pc, #4	; (adr r2, 8006250 <UART_SetConfig+0x3b4>)
 800624a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624e:	bf00      	nop
 8006250:	08006275 	.word	0x08006275
 8006254:	0800627d 	.word	0x0800627d
 8006258:	08006285 	.word	0x08006285
 800625c:	0800629b 	.word	0x0800629b
 8006260:	0800628b 	.word	0x0800628b
 8006264:	0800629b 	.word	0x0800629b
 8006268:	0800629b 	.word	0x0800629b
 800626c:	0800629b 	.word	0x0800629b
 8006270:	08006293 	.word	0x08006293
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006274:	f7fd ff4a 	bl	800410c <HAL_RCC_GetPCLK1Freq>
 8006278:	6178      	str	r0, [r7, #20]
        break;
 800627a:	e013      	b.n	80062a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800627c:	f7fd ff5c 	bl	8004138 <HAL_RCC_GetPCLK2Freq>
 8006280:	6178      	str	r0, [r7, #20]
        break;
 8006282:	e00f      	b.n	80062a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006284:	4b49      	ldr	r3, [pc, #292]	; (80063ac <UART_SetConfig+0x510>)
 8006286:	617b      	str	r3, [r7, #20]
        break;
 8006288:	e00c      	b.n	80062a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800628a:	f7fd fea7 	bl	8003fdc <HAL_RCC_GetSysClockFreq>
 800628e:	6178      	str	r0, [r7, #20]
        break;
 8006290:	e008      	b.n	80062a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006296:	617b      	str	r3, [r7, #20]
        break;
 8006298:	e004      	b.n	80062a4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	76bb      	strb	r3, [r7, #26]
        break;
 80062a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d074      	beq.n	8006394 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	005a      	lsls	r2, r3, #1
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	085b      	lsrs	r3, r3, #1
 80062b4:	441a      	add	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80062be:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	2b0f      	cmp	r3, #15
 80062c4:	d916      	bls.n	80062f4 <UART_SetConfig+0x458>
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062cc:	d212      	bcs.n	80062f4 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	f023 030f 	bic.w	r3, r3, #15
 80062d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	085b      	lsrs	r3, r3, #1
 80062dc:	b29b      	uxth	r3, r3
 80062de:	f003 0307 	and.w	r3, r3, #7
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	89fb      	ldrh	r3, [r7, #14]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	89fa      	ldrh	r2, [r7, #14]
 80062f0:	60da      	str	r2, [r3, #12]
 80062f2:	e04f      	b.n	8006394 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	76bb      	strb	r3, [r7, #26]
 80062f8:	e04c      	b.n	8006394 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062fa:	7efb      	ldrb	r3, [r7, #27]
 80062fc:	2b08      	cmp	r3, #8
 80062fe:	d828      	bhi.n	8006352 <UART_SetConfig+0x4b6>
 8006300:	a201      	add	r2, pc, #4	; (adr r2, 8006308 <UART_SetConfig+0x46c>)
 8006302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006306:	bf00      	nop
 8006308:	0800632d 	.word	0x0800632d
 800630c:	08006335 	.word	0x08006335
 8006310:	0800633d 	.word	0x0800633d
 8006314:	08006353 	.word	0x08006353
 8006318:	08006343 	.word	0x08006343
 800631c:	08006353 	.word	0x08006353
 8006320:	08006353 	.word	0x08006353
 8006324:	08006353 	.word	0x08006353
 8006328:	0800634b 	.word	0x0800634b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800632c:	f7fd feee 	bl	800410c <HAL_RCC_GetPCLK1Freq>
 8006330:	6178      	str	r0, [r7, #20]
        break;
 8006332:	e013      	b.n	800635c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006334:	f7fd ff00 	bl	8004138 <HAL_RCC_GetPCLK2Freq>
 8006338:	6178      	str	r0, [r7, #20]
        break;
 800633a:	e00f      	b.n	800635c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800633c:	4b1b      	ldr	r3, [pc, #108]	; (80063ac <UART_SetConfig+0x510>)
 800633e:	617b      	str	r3, [r7, #20]
        break;
 8006340:	e00c      	b.n	800635c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006342:	f7fd fe4b 	bl	8003fdc <HAL_RCC_GetSysClockFreq>
 8006346:	6178      	str	r0, [r7, #20]
        break;
 8006348:	e008      	b.n	800635c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800634a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800634e:	617b      	str	r3, [r7, #20]
        break;
 8006350:	e004      	b.n	800635c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006352:	2300      	movs	r3, #0
 8006354:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	76bb      	strb	r3, [r7, #26]
        break;
 800635a:	bf00      	nop
    }

    if (pclk != 0U)
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d018      	beq.n	8006394 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	085a      	lsrs	r2, r3, #1
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	441a      	add	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	fbb2 f3f3 	udiv	r3, r2, r3
 8006374:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	2b0f      	cmp	r3, #15
 800637a:	d909      	bls.n	8006390 <UART_SetConfig+0x4f4>
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006382:	d205      	bcs.n	8006390 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	b29a      	uxth	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	60da      	str	r2, [r3, #12]
 800638e:	e001      	b.n	8006394 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80063a0:	7ebb      	ldrb	r3, [r7, #26]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3720      	adds	r7, #32
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bdb0      	pop	{r4, r5, r7, pc}
 80063aa:	bf00      	nop
 80063ac:	00f42400 	.word	0x00f42400

080063b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00a      	beq.n	80063da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00a      	beq.n	80063fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	430a      	orrs	r2, r1
 80063fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	f003 0304 	and.w	r3, r3, #4
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00a      	beq.n	800641e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006422:	f003 0308 	and.w	r3, r3, #8
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006444:	f003 0310 	and.w	r3, r3, #16
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00a      	beq.n	8006462 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006466:	f003 0320 	and.w	r3, r3, #32
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648c:	2b00      	cmp	r3, #0
 800648e:	d01a      	beq.n	80064c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064ae:	d10a      	bne.n	80064c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00a      	beq.n	80064e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	605a      	str	r2, [r3, #4]
  }
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af02      	add	r7, sp, #8
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006504:	f7fb f8ac 	bl	8001660 <HAL_GetTick>
 8006508:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0308 	and.w	r3, r3, #8
 8006514:	2b08      	cmp	r3, #8
 8006516:	d10e      	bne.n	8006536 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006518:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f82d 	bl	8006586 <UART_WaitOnFlagUntilTimeout>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e023      	b.n	800657e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	2b04      	cmp	r3, #4
 8006542:	d10e      	bne.n	8006562 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006544:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f817 	bl	8006586 <UART_WaitOnFlagUntilTimeout>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e00d      	b.n	800657e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2220      	movs	r2, #32
 8006566:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2220      	movs	r2, #32
 800656c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b09c      	sub	sp, #112	; 0x70
 800658a:	af00      	add	r7, sp, #0
 800658c:	60f8      	str	r0, [r7, #12]
 800658e:	60b9      	str	r1, [r7, #8]
 8006590:	603b      	str	r3, [r7, #0]
 8006592:	4613      	mov	r3, r2
 8006594:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006596:	e0a5      	b.n	80066e4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800659a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659e:	f000 80a1 	beq.w	80066e4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065a2:	f7fb f85d 	bl	8001660 <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d302      	bcc.n	80065b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80065b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d13e      	bne.n	8006636 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065c0:	e853 3f00 	ldrex	r3, [r3]
 80065c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80065c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065cc:	667b      	str	r3, [r7, #100]	; 0x64
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065d8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065de:	e841 2300 	strex	r3, r2, [r1]
 80065e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80065e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1e6      	bne.n	80065b8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3308      	adds	r3, #8
 80065f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f4:	e853 3f00 	ldrex	r3, [r3]
 80065f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fc:	f023 0301 	bic.w	r3, r3, #1
 8006600:	663b      	str	r3, [r7, #96]	; 0x60
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	3308      	adds	r3, #8
 8006608:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800660a:	64ba      	str	r2, [r7, #72]	; 0x48
 800660c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006610:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e5      	bne.n	80065ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2220      	movs	r2, #32
 8006622:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2220      	movs	r2, #32
 8006628:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e067      	b.n	8006706 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b00      	cmp	r3, #0
 8006642:	d04f      	beq.n	80066e4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800664e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006652:	d147      	bne.n	80066e4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800665c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006666:	e853 3f00 	ldrex	r3, [r3]
 800666a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006672:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	461a      	mov	r2, r3
 800667a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800667c:	637b      	str	r3, [r7, #52]	; 0x34
 800667e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006680:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006684:	e841 2300 	strex	r3, r2, [r1]
 8006688:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800668a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1e6      	bne.n	800665e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	3308      	adds	r3, #8
 8006696:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	e853 3f00 	ldrex	r3, [r3]
 800669e:	613b      	str	r3, [r7, #16]
   return(result);
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	f023 0301 	bic.w	r3, r3, #1
 80066a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3308      	adds	r3, #8
 80066ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80066b0:	623a      	str	r2, [r7, #32]
 80066b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b4:	69f9      	ldr	r1, [r7, #28]
 80066b6:	6a3a      	ldr	r2, [r7, #32]
 80066b8:	e841 2300 	strex	r3, r2, [r1]
 80066bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1e5      	bne.n	8006690 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2220      	movs	r2, #32
 80066c8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2220      	movs	r2, #32
 80066ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e010      	b.n	8006706 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	69da      	ldr	r2, [r3, #28]
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	4013      	ands	r3, r2
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	bf0c      	ite	eq
 80066f4:	2301      	moveq	r3, #1
 80066f6:	2300      	movne	r3, #0
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	461a      	mov	r2, r3
 80066fc:	79fb      	ldrb	r3, [r7, #7]
 80066fe:	429a      	cmp	r2, r3
 8006700:	f43f af4a 	beq.w	8006598 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3770      	adds	r7, #112	; 0x70
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
	...

08006710 <ai_log_err>:
AI_ALIGNED(4)
static ai_u8 out_data_s[AI_NETWORK_OUT_1_SIZE_BYTES];
#endif

static void ai_log_err(const ai_error err, const char *fct)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d009      	beq.n	8006734 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8006720:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8006722:	461a      	mov	r2, r3
        err.type, err.code);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800672a:	6839      	ldr	r1, [r7, #0]
 800672c:	4806      	ldr	r0, [pc, #24]	; (8006748 <ai_log_err+0x38>)
 800672e:	f002 fcc3 	bl	80090b8 <iprintf>
 8006732:	e008      	b.n	8006746 <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8006734:	793b      	ldrb	r3, [r7, #4]
 8006736:	4619      	mov	r1, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800673e:	461a      	mov	r2, r3
 8006740:	4802      	ldr	r0, [pc, #8]	; (800674c <ai_log_err+0x3c>)
 8006742:	f002 fcb9 	bl	80090b8 <iprintf>

  do {} while (1);
 8006746:	e7fe      	b.n	8006746 <ai_log_err+0x36>
 8006748:	0800a1c0 	.word	0x0800a1c0
 800674c:	0800a1f4 	.word	0x0800a1f4

08006750 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle w_addr, ai_handle act_addr)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b090      	sub	sp, #64	; 0x40
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  ai_error err;

  /* 1 - Create an instance of the model */
  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 800675a:	2100      	movs	r1, #0
 800675c:	4837      	ldr	r0, [pc, #220]	; (800683c <ai_boostrap+0xec>)
 800675e:	f000 fa75 	bl	8006c4c <ai_network_create>
 8006762:	4603      	mov	r3, r0
 8006764:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (err.type != AI_ERROR_NONE) {
 8006766:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800676a:	2b00      	cmp	r3, #0
 800676c:	d006      	beq.n	800677c <ai_boostrap+0x2c>
    ai_log_err(err, "ai_network_create");
 800676e:	4934      	ldr	r1, [pc, #208]	; (8006840 <ai_boostrap+0xf0>)
 8006770:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006772:	f7ff ffcd 	bl	8006710 <ai_log_err>
    return -1;
 8006776:	f04f 33ff 	mov.w	r3, #4294967295
 800677a:	e05b      	b.n	8006834 <ai_boostrap+0xe4>
  }

  /* 2 - Initialize the instance */
  const ai_network_params params = AI_NETWORK_PARAMS_INIT(
 800677c:	4b31      	ldr	r3, [pc, #196]	; (8006844 <ai_boostrap+0xf4>)
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	2301      	movs	r3, #1
 8006782:	823b      	strh	r3, [r7, #16]
 8006784:	2301      	movs	r3, #1
 8006786:	827b      	strh	r3, [r7, #18]
 8006788:	2301      	movs	r3, #1
 800678a:	82bb      	strh	r3, [r7, #20]
 800678c:	f241 43c4 	movw	r3, #5316	; 0x14c4
 8006790:	61bb      	str	r3, [r7, #24]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	61fb      	str	r3, [r7, #28]
 8006796:	2300      	movs	r3, #0
 8006798:	623b      	str	r3, [r7, #32]
 800679a:	4b2b      	ldr	r3, [pc, #172]	; (8006848 <ai_boostrap+0xf8>)
 800679c:	627b      	str	r3, [r7, #36]	; 0x24
 800679e:	2301      	movs	r3, #1
 80067a0:	853b      	strh	r3, [r7, #40]	; 0x28
 80067a2:	2301      	movs	r3, #1
 80067a4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80067a6:	2301      	movs	r3, #1
 80067a8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80067aa:	2380      	movs	r3, #128	; 0x80
 80067ac:	633b      	str	r3, [r7, #48]	; 0x30
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	637b      	str	r3, [r7, #52]	; 0x34
 80067b2:	2300      	movs	r3, #0
 80067b4:	63bb      	str	r3, [r7, #56]	; 0x38
      AI_NETWORK_DATA_WEIGHTS(w_addr),
      AI_NETWORK_DATA_ACTIVATIONS(act_addr) );

  if (!ai_network_init(network, &params)) {
 80067b6:	4b21      	ldr	r3, [pc, #132]	; (800683c <ai_boostrap+0xec>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f107 020c 	add.w	r2, r7, #12
 80067be:	4611      	mov	r1, r2
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 fa65 	bl	8006c90 <ai_network_init>
 80067c6:	4603      	mov	r3, r0
 80067c8:	f083 0301 	eor.w	r3, r3, #1
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00d      	beq.n	80067ee <ai_boostrap+0x9e>
      err = ai_network_get_error(network);
 80067d2:	4b1a      	ldr	r3, [pc, #104]	; (800683c <ai_boostrap+0xec>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 fa2c 	bl	8006c34 <ai_network_get_error>
 80067dc:	4603      	mov	r3, r0
 80067de:	63fb      	str	r3, [r7, #60]	; 0x3c
      ai_log_err(err, "ai_network_init");
 80067e0:	491a      	ldr	r1, [pc, #104]	; (800684c <ai_boostrap+0xfc>)
 80067e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80067e4:	f7ff ff94 	bl	8006710 <ai_log_err>
      return -1;
 80067e8:	f04f 33ff 	mov.w	r3, #4294967295
 80067ec:	e022      	b.n	8006834 <ai_boostrap+0xe4>
    }

  /* 3 - Retrieve the network info of the created instance */
  if (!ai_network_get_info(network, &network_info)) {
 80067ee:	4b13      	ldr	r3, [pc, #76]	; (800683c <ai_boostrap+0xec>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4917      	ldr	r1, [pc, #92]	; (8006850 <ai_boostrap+0x100>)
 80067f4:	4618      	mov	r0, r3
 80067f6:	f000 f9bf 	bl	8006b78 <ai_network_get_info>
 80067fa:	4603      	mov	r3, r0
 80067fc:	f083 0301 	eor.w	r3, r3, #1
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d015      	beq.n	8006832 <ai_boostrap+0xe2>
    err = ai_network_get_error(network);
 8006806:	4b0d      	ldr	r3, [pc, #52]	; (800683c <ai_boostrap+0xec>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4618      	mov	r0, r3
 800680c:	f000 fa12 	bl	8006c34 <ai_network_get_error>
 8006810:	4603      	mov	r3, r0
 8006812:	63fb      	str	r3, [r7, #60]	; 0x3c
    ai_log_err(err, "ai_network_get_error");
 8006814:	490f      	ldr	r1, [pc, #60]	; (8006854 <ai_boostrap+0x104>)
 8006816:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006818:	f7ff ff7a 	bl	8006710 <ai_log_err>
    ai_network_destroy(network);
 800681c:	4b07      	ldr	r3, [pc, #28]	; (800683c <ai_boostrap+0xec>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4618      	mov	r0, r3
 8006822:	f000 fa29 	bl	8006c78 <ai_network_destroy>
    network = AI_HANDLE_NULL;
 8006826:	4b05      	ldr	r3, [pc, #20]	; (800683c <ai_boostrap+0xec>)
 8006828:	2200      	movs	r2, #0
 800682a:	601a      	str	r2, [r3, #0]
    return -3;
 800682c:	f06f 0302 	mvn.w	r3, #2
 8006830:	e000      	b.n	8006834 <ai_boostrap+0xe4>
  }

  return 0;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3740      	adds	r7, #64	; 0x40
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	20000750 	.word	0x20000750
 8006840:	0800a224 	.word	0x0800a224
 8006844:	40040440 	.word	0x40040440
 8006848:	00040440 	.word	0x00040440
 800684c:	0800a238 	.word	0x0800a238
 8006850:	20000754 	.word	0x20000754
 8006854:	0800a248 	.word	0x0800a248

08006858 <ai_run>:

static int ai_run(void *data_in, void *data_out)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  ai_i32 batch;

  ai_buffer *ai_input = network_info.inputs;
 8006862:	4b14      	ldr	r3, [pc, #80]	; (80068b4 <ai_run+0x5c>)
 8006864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006866:	617b      	str	r3, [r7, #20]
  ai_buffer *ai_output = network_info.outputs;
 8006868:	4b12      	ldr	r3, [pc, #72]	; (80068b4 <ai_run+0x5c>)
 800686a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686c:	613b      	str	r3, [r7, #16]

  ai_input[0].data = AI_HANDLE_PTR(data_in);
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	611a      	str	r2, [r3, #16]
  ai_output[0].data = AI_HANDLE_PTR(data_out);
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	611a      	str	r2, [r3, #16]

  batch = ai_network_run(network, ai_input, ai_output);
 800687a:	4b0f      	ldr	r3, [pc, #60]	; (80068b8 <ai_run+0x60>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	6979      	ldr	r1, [r7, #20]
 8006882:	4618      	mov	r0, r3
 8006884:	f000 fa40 	bl	8006d08 <ai_network_run>
 8006888:	60f8      	str	r0, [r7, #12]
  if (batch != 1) {
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d00c      	beq.n	80068aa <ai_run+0x52>
    ai_log_err(ai_network_get_error(network),
 8006890:	4b09      	ldr	r3, [pc, #36]	; (80068b8 <ai_run+0x60>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4618      	mov	r0, r3
 8006896:	f000 f9cd 	bl	8006c34 <ai_network_get_error>
 800689a:	4603      	mov	r3, r0
 800689c:	4907      	ldr	r1, [pc, #28]	; (80068bc <ai_run+0x64>)
 800689e:	4618      	mov	r0, r3
 80068a0:	f7ff ff36 	bl	8006710 <ai_log_err>
        "ai_network_run");
    return -1;
 80068a4:	f04f 33ff 	mov.w	r3, #4294967295
 80068a8:	e000      	b.n	80068ac <ai_run+0x54>
  }

  return 0;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3718      	adds	r7, #24
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	20000754 	.word	0x20000754
 80068b8:	20000750 	.word	0x20000750
 80068bc:	0800a260 	.word	0x0800a260

080068c0 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 80068c4:	4805      	ldr	r0, [pc, #20]	; (80068dc <MX_X_CUBE_AI_Init+0x1c>)
 80068c6:	f002 fc7d 	bl	80091c4 <puts>

  ai_boostrap(ai_network_data_weights_get(), activations);
 80068ca:	f000 fa2d 	bl	8006d28 <ai_network_data_weights_get>
 80068ce:	4603      	mov	r3, r0
 80068d0:	4903      	ldr	r1, [pc, #12]	; (80068e0 <MX_X_CUBE_AI_Init+0x20>)
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7ff ff3c 	bl	8006750 <ai_boostrap>
    /* USER CODE END 5 */
}
 80068d8:	bf00      	nop
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	0800a270 	.word	0x0800a270
 80068e0:	200007c8 	.word	0x200007c8
 80068e4:	00000000 	.word	0x00000000

080068e8 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
	uint32_t i = 0;
 80068ee:	2300      	movs	r3, #0
 80068f0:	607b      	str	r3, [r7, #4]
	static uint32_t cnt = 0;

	static float nn_input[NETWORK_INPUT_DATA_SIZE] = { 0 };
	float nn_output;

	if(true == adc_data_is_ready)
 80068f2:	4b31      	ldr	r3, [pc, #196]	; (80069b8 <MX_X_CUBE_AI_Process+0xd0>)
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d055      	beq.n	80069a8 <MX_X_CUBE_AI_Process+0xc0>
	{
		adc_data_is_ready = false;
 80068fc:	4b2e      	ldr	r3, [pc, #184]	; (80069b8 <MX_X_CUBE_AI_Process+0xd0>)
 80068fe:	2200      	movs	r2, #0
 8006900:	701a      	strb	r2, [r3, #0]

		cnt++;
 8006902:	4b2e      	ldr	r3, [pc, #184]	; (80069bc <MX_X_CUBE_AI_Process+0xd4>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	3301      	adds	r3, #1
 8006908:	4a2c      	ldr	r2, [pc, #176]	; (80069bc <MX_X_CUBE_AI_Process+0xd4>)
 800690a:	6013      	str	r3, [r2, #0]

		for(i=0; i<(NETWORK_INPUT_DATA_SIZE-1); i++ )
 800690c:	2300      	movs	r3, #0
 800690e:	607b      	str	r3, [r7, #4]
 8006910:	e00d      	b.n	800692e <MX_X_CUBE_AI_Process+0x46>
		{
			nn_input[i] = nn_input[i+1];
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	3301      	adds	r3, #1
 8006916:	4a2a      	ldr	r2, [pc, #168]	; (80069c0 <MX_X_CUBE_AI_Process+0xd8>)
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	4928      	ldr	r1, [pc, #160]	; (80069c0 <MX_X_CUBE_AI_Process+0xd8>)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	440b      	add	r3, r1
 8006926:	601a      	str	r2, [r3, #0]
		for(i=0; i<(NETWORK_INPUT_DATA_SIZE-1); i++ )
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	3301      	adds	r3, #1
 800692c:	607b      	str	r3, [r7, #4]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2b3e      	cmp	r3, #62	; 0x3e
 8006932:	d9ee      	bls.n	8006912 <MX_X_CUBE_AI_Process+0x2a>
		}

		nn_input[NETWORK_INPUT_DATA_SIZE-1] = ((float)distance_cm/DISTANCE_MAX_VALUE);
 8006934:	4b23      	ldr	r3, [pc, #140]	; (80069c4 <MX_X_CUBE_AI_Process+0xdc>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	ee07 3a90 	vmov	s15, r3
 800693c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006940:	eddf 6a21 	vldr	s13, [pc, #132]	; 80069c8 <MX_X_CUBE_AI_Process+0xe0>
 8006944:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006948:	4b1d      	ldr	r3, [pc, #116]	; (80069c0 <MX_X_CUBE_AI_Process+0xd8>)
 800694a:	edc3 7a3f 	vstr	s15, [r3, #252]	; 0xfc

		if(cnt > (NETWORK_INPUT_DATA_SIZE-1))
 800694e:	4b1b      	ldr	r3, [pc, #108]	; (80069bc <MX_X_CUBE_AI_Process+0xd4>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2b3f      	cmp	r3, #63	; 0x3f
 8006954:	d928      	bls.n	80069a8 <MX_X_CUBE_AI_Process+0xc0>
		{
			ai_run(nn_input, &nn_output);
 8006956:	463b      	mov	r3, r7
 8006958:	4619      	mov	r1, r3
 800695a:	4819      	ldr	r0, [pc, #100]	; (80069c0 <MX_X_CUBE_AI_Process+0xd8>)
 800695c:	f7ff ff7c 	bl	8006858 <ai_run>
			cnt = NETWORK_INPUT_DATA_SIZE;
 8006960:	4b16      	ldr	r3, [pc, #88]	; (80069bc <MX_X_CUBE_AI_Process+0xd4>)
 8006962:	2240      	movs	r2, #64	; 0x40
 8006964:	601a      	str	r2, [r3, #0]

			if (nn_output > 0.7)
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	4618      	mov	r0, r3
 800696a:	f7f9 fde5 	bl	8000538 <__aeabi_f2d>
 800696e:	a310      	add	r3, pc, #64	; (adr r3, 80069b0 <MX_X_CUBE_AI_Process+0xc8>)
 8006970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006974:	f7f9 feb6 	bl	80006e4 <__aeabi_dcmpgt>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d100      	bne.n	8006980 <MX_X_CUBE_AI_Process+0x98>
				}
			}
		}
	}
    /* USER CODE END 6 */
}
 800697e:	e013      	b.n	80069a8 <MX_X_CUBE_AI_Process+0xc0>
				cnt = 0;
 8006980:	4b0e      	ldr	r3, [pc, #56]	; (80069bc <MX_X_CUBE_AI_Process+0xd4>)
 8006982:	2200      	movs	r2, #0
 8006984:	601a      	str	r2, [r3, #0]
				if(false == gesture_is_detected)
 8006986:	4b11      	ldr	r3, [pc, #68]	; (80069cc <MX_X_CUBE_AI_Process+0xe4>)
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	f083 0301 	eor.w	r3, r3, #1
 800698e:	b2db      	uxtb	r3, r3
 8006990:	2b00      	cmp	r3, #0
 8006992:	d009      	beq.n	80069a8 <MX_X_CUBE_AI_Process+0xc0>
					HAL_GPIO_WritePin(DETECT_LED_GPIO_Port, DETECT_LED_Pin, GPIO_PIN_SET);
 8006994:	2201      	movs	r2, #1
 8006996:	f44f 7100 	mov.w	r1, #512	; 0x200
 800699a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800699e:	f7fc fdc1 	bl	8003524 <HAL_GPIO_WritePin>
					gesture_is_detected = true;
 80069a2:	4b0a      	ldr	r3, [pc, #40]	; (80069cc <MX_X_CUBE_AI_Process+0xe4>)
 80069a4:	2201      	movs	r2, #1
 80069a6:	701a      	strb	r2, [r3, #0]
}
 80069a8:	bf00      	nop
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	66666666 	.word	0x66666666
 80069b4:	3fe66666 	.word	0x3fe66666
 80069b8:	20000741 	.word	0x20000741
 80069bc:	20000848 	.word	0x20000848
 80069c0:	2000084c 	.word	0x2000084c
 80069c4:	2000073c 	.word	0x2000073c
 80069c8:	42a00000 	.word	0x42a00000
 80069cc:	20000742 	.word	0x20000742

080069d0 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 80069da:	2300      	movs	r3, #0
 80069dc:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 80069de:	f107 030c 	add.w	r3, r7, #12
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	2101      	movs	r1, #1
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 f9e0 	bl	8006dac <ai_platform_get_activations_map>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d02f      	beq.n	8006a52 <network_configure_activations+0x82>
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 80069f2:	4b1a      	ldr	r3, [pc, #104]	; (8006a5c <network_configure_activations+0x8c>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 80069f8:	4b18      	ldr	r3, [pc, #96]	; (8006a5c <network_configure_activations+0x8c>)
 80069fa:	2200      	movs	r2, #0
 80069fc:	60da      	str	r2, [r3, #12]
    dense_55_output_array.data = AI_PTR(activations_map[0] + 0);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4a17      	ldr	r2, [pc, #92]	; (8006a60 <network_configure_activations+0x90>)
 8006a02:	6093      	str	r3, [r2, #8]
    dense_55_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4a16      	ldr	r2, [pc, #88]	; (8006a60 <network_configure_activations+0x90>)
 8006a08:	60d3      	str	r3, [r2, #12]
    dense_55_nl_output_array.data = AI_PTR(activations_map[0] + 0);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4a15      	ldr	r2, [pc, #84]	; (8006a64 <network_configure_activations+0x94>)
 8006a0e:	6093      	str	r3, [r2, #8]
    dense_55_nl_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	4a14      	ldr	r2, [pc, #80]	; (8006a64 <network_configure_activations+0x94>)
 8006a14:	60d3      	str	r3, [r2, #12]
    dense_56_output_array.data = AI_PTR(activations_map[0] + 64);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	3340      	adds	r3, #64	; 0x40
 8006a1a:	4a13      	ldr	r2, [pc, #76]	; (8006a68 <network_configure_activations+0x98>)
 8006a1c:	6093      	str	r3, [r2, #8]
    dense_56_output_array.data_start = AI_PTR(activations_map[0] + 64);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	3340      	adds	r3, #64	; 0x40
 8006a22:	4a11      	ldr	r2, [pc, #68]	; (8006a68 <network_configure_activations+0x98>)
 8006a24:	60d3      	str	r3, [r2, #12]
    dense_56_nl_output_array.data = AI_PTR(activations_map[0] + 0);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	4a10      	ldr	r2, [pc, #64]	; (8006a6c <network_configure_activations+0x9c>)
 8006a2a:	6093      	str	r3, [r2, #8]
    dense_56_nl_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4a0f      	ldr	r2, [pc, #60]	; (8006a6c <network_configure_activations+0x9c>)
 8006a30:	60d3      	str	r3, [r2, #12]
    dense_57_output_array.data = AI_PTR(activations_map[0] + 64);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	3340      	adds	r3, #64	; 0x40
 8006a36:	4a0e      	ldr	r2, [pc, #56]	; (8006a70 <network_configure_activations+0xa0>)
 8006a38:	6093      	str	r3, [r2, #8]
    dense_57_output_array.data_start = AI_PTR(activations_map[0] + 64);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	3340      	adds	r3, #64	; 0x40
 8006a3e:	4a0c      	ldr	r2, [pc, #48]	; (8006a70 <network_configure_activations+0xa0>)
 8006a40:	60d3      	str	r3, [r2, #12]
    dense_57_nl_output_array.data = AI_PTR(NULL);
 8006a42:	4b0c      	ldr	r3, [pc, #48]	; (8006a74 <network_configure_activations+0xa4>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	609a      	str	r2, [r3, #8]
    dense_57_nl_output_array.data_start = AI_PTR(NULL);
 8006a48:	4b0a      	ldr	r3, [pc, #40]	; (8006a74 <network_configure_activations+0xa4>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	60da      	str	r2, [r3, #12]
    
    return true;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e000      	b.n	8006a54 <network_configure_activations+0x84>
  }
  return false;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	2000000c 	.word	0x2000000c
 8006a60:	2000001c 	.word	0x2000001c
 8006a64:	2000002c 	.word	0x2000002c
 8006a68:	2000003c 	.word	0x2000003c
 8006a6c:	2000004c 	.word	0x2000004c
 8006a70:	2000005c 	.word	0x2000005c
 8006a74:	2000006c 	.word	0x2000006c

08006a78 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8006a82:	2300      	movs	r3, #0
 8006a84:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8006a86:	f107 030c 	add.w	r3, r7, #12
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	2101      	movs	r1, #1
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 f958 	bl	8006d44 <ai_platform_get_weights_map>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d05d      	beq.n	8006b56 <network_configure_weights+0xde>
    /* Updating weights with array addresses */
    
    dense_55_weights_array.format |= AI_FMT_FLAG_CONST;
 8006a9a:	4b31      	ldr	r3, [pc, #196]	; (8006b60 <network_configure_weights+0xe8>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006aa2:	4a2f      	ldr	r2, [pc, #188]	; (8006b60 <network_configure_weights+0xe8>)
 8006aa4:	6013      	str	r3, [r2, #0]
    dense_55_weights_array.data = AI_PTR(weights_map[0] + 0);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	4a2d      	ldr	r2, [pc, #180]	; (8006b60 <network_configure_weights+0xe8>)
 8006aaa:	6093      	str	r3, [r2, #8]
    dense_55_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4a2c      	ldr	r2, [pc, #176]	; (8006b60 <network_configure_weights+0xe8>)
 8006ab0:	60d3      	str	r3, [r2, #12]
    dense_55_bias_array.format |= AI_FMT_FLAG_CONST;
 8006ab2:	4b2c      	ldr	r3, [pc, #176]	; (8006b64 <network_configure_weights+0xec>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006aba:	4a2a      	ldr	r2, [pc, #168]	; (8006b64 <network_configure_weights+0xec>)
 8006abc:	6013      	str	r3, [r2, #0]
    dense_55_bias_array.data = AI_PTR(weights_map[0] + 4096);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ac4:	4a27      	ldr	r2, [pc, #156]	; (8006b64 <network_configure_weights+0xec>)
 8006ac6:	6093      	str	r3, [r2, #8]
    dense_55_bias_array.data_start = AI_PTR(weights_map[0] + 4096);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ace:	4a25      	ldr	r2, [pc, #148]	; (8006b64 <network_configure_weights+0xec>)
 8006ad0:	60d3      	str	r3, [r2, #12]
    dense_56_weights_array.format |= AI_FMT_FLAG_CONST;
 8006ad2:	4b25      	ldr	r3, [pc, #148]	; (8006b68 <network_configure_weights+0xf0>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ada:	4a23      	ldr	r2, [pc, #140]	; (8006b68 <network_configure_weights+0xf0>)
 8006adc:	6013      	str	r3, [r2, #0]
    dense_56_weights_array.data = AI_PTR(weights_map[0] + 4160);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8006ae4:	4a20      	ldr	r2, [pc, #128]	; (8006b68 <network_configure_weights+0xf0>)
 8006ae6:	6093      	str	r3, [r2, #8]
    dense_56_weights_array.data_start = AI_PTR(weights_map[0] + 4160);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8006aee:	4a1e      	ldr	r2, [pc, #120]	; (8006b68 <network_configure_weights+0xf0>)
 8006af0:	60d3      	str	r3, [r2, #12]
    dense_56_bias_array.format |= AI_FMT_FLAG_CONST;
 8006af2:	4b1e      	ldr	r3, [pc, #120]	; (8006b6c <network_configure_weights+0xf4>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006afa:	4a1c      	ldr	r2, [pc, #112]	; (8006b6c <network_configure_weights+0xf4>)
 8006afc:	6013      	str	r3, [r2, #0]
    dense_56_bias_array.data = AI_PTR(weights_map[0] + 5184);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8006b04:	4a19      	ldr	r2, [pc, #100]	; (8006b6c <network_configure_weights+0xf4>)
 8006b06:	6093      	str	r3, [r2, #8]
    dense_56_bias_array.data_start = AI_PTR(weights_map[0] + 5184);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8006b0e:	4a17      	ldr	r2, [pc, #92]	; (8006b6c <network_configure_weights+0xf4>)
 8006b10:	60d3      	str	r3, [r2, #12]
    dense_57_weights_array.format |= AI_FMT_FLAG_CONST;
 8006b12:	4b17      	ldr	r3, [pc, #92]	; (8006b70 <network_configure_weights+0xf8>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b1a:	4a15      	ldr	r2, [pc, #84]	; (8006b70 <network_configure_weights+0xf8>)
 8006b1c:	6013      	str	r3, [r2, #0]
    dense_57_weights_array.data = AI_PTR(weights_map[0] + 5248);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8006b24:	4a12      	ldr	r2, [pc, #72]	; (8006b70 <network_configure_weights+0xf8>)
 8006b26:	6093      	str	r3, [r2, #8]
    dense_57_weights_array.data_start = AI_PTR(weights_map[0] + 5248);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 8006b2e:	4a10      	ldr	r2, [pc, #64]	; (8006b70 <network_configure_weights+0xf8>)
 8006b30:	60d3      	str	r3, [r2, #12]
    dense_57_bias_array.format |= AI_FMT_FLAG_CONST;
 8006b32:	4b10      	ldr	r3, [pc, #64]	; (8006b74 <network_configure_weights+0xfc>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b3a:	4a0e      	ldr	r2, [pc, #56]	; (8006b74 <network_configure_weights+0xfc>)
 8006b3c:	6013      	str	r3, [r2, #0]
    dense_57_bias_array.data = AI_PTR(weights_map[0] + 5312);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f503 53a6 	add.w	r3, r3, #5312	; 0x14c0
 8006b44:	4a0b      	ldr	r2, [pc, #44]	; (8006b74 <network_configure_weights+0xfc>)
 8006b46:	6093      	str	r3, [r2, #8]
    dense_57_bias_array.data_start = AI_PTR(weights_map[0] + 5312);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f503 53a6 	add.w	r3, r3, #5312	; 0x14c0
 8006b4e:	4a09      	ldr	r2, [pc, #36]	; (8006b74 <network_configure_weights+0xfc>)
 8006b50:	60d3      	str	r3, [r2, #12]
    return true;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e000      	b.n	8006b58 <network_configure_weights+0xe0>
  }
  return false;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	2000007c 	.word	0x2000007c
 8006b64:	2000008c 	.word	0x2000008c
 8006b68:	2000009c 	.word	0x2000009c
 8006b6c:	200000ac 	.word	0x200000ac
 8006b70:	200000bc 	.word	0x200000bc
 8006b74:	200000cc 	.word	0x200000cc

08006b78 <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/
AI_DEPRECATED
AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b0a0      	sub	sp, #128	; 0x80
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fa72 	bl	800706c <ai_platform_context_acquire>
 8006b88:	67f8      	str	r0, [r7, #124]	; 0x7c

  if (report && net_ctx)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d041      	beq.n	8006c14 <ai_network_get_info+0x9c>
 8006b90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d03e      	beq.n	8006c14 <ai_network_get_info+0x9c>
  {
    ai_network_report r = {
 8006b96:	f107 0308 	add.w	r3, r7, #8
 8006b9a:	2274      	movs	r2, #116	; 0x74
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f002 f9d8 	bl	8008f54 <memset>
 8006ba4:	4b1e      	ldr	r3, [pc, #120]	; (8006c20 <ai_network_get_info+0xa8>)
 8006ba6:	60bb      	str	r3, [r7, #8]
 8006ba8:	4b1e      	ldr	r3, [pc, #120]	; (8006c24 <ai_network_get_info+0xac>)
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	4b1e      	ldr	r3, [pc, #120]	; (8006c28 <ai_network_get_info+0xb0>)
 8006bae:	613b      	str	r3, [r7, #16]
 8006bb0:	4b1e      	ldr	r3, [pc, #120]	; (8006c2c <ai_network_get_info+0xb4>)
 8006bb2:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8006bb4:	f000 f92e 	bl	8006e14 <ai_platform_runtime_get_revision>
 8006bb8:	4603      	mov	r3, r0
    ai_network_report r = {
 8006bba:	61bb      	str	r3, [r7, #24]
      .runtime_version   = ai_platform_runtime_get_version(),
 8006bbc:	f000 f96c 	bl	8006e98 <ai_platform_runtime_get_version>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	61fb      	str	r3, [r7, #28]
    ai_network_report r = {
 8006bc4:	4b1a      	ldr	r3, [pc, #104]	; (8006c30 <ai_network_get_info+0xb8>)
 8006bc6:	623b      	str	r3, [r7, #32]
 8006bc8:	2307      	movs	r3, #7
 8006bca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8006bce:	f000 f9a5 	bl	8006f1c <ai_platform_api_get_version>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8006bd6:	f000 f9f5 	bl	8006fc4 <ai_platform_interface_api_get_version>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	633b      	str	r3, [r7, #48]	; 0x30
    ai_network_report r = {
 8006bde:	f240 535b 	movw	r3, #1371	; 0x55b
 8006be2:	637b      	str	r3, [r7, #52]	; 0x34
      .activations       = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8006be4:	f107 0308 	add.w	r3, r7, #8
 8006be8:	4619      	mov	r1, r3
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fb00 	bl	80071f0 <ai_platform_api_get_network_report>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	f083 0301 	eor.w	r3, r3, #1
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d001      	beq.n	8006c00 <ai_network_get_info+0x88>
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	e00a      	b.n	8006c16 <ai_network_get_info+0x9e>

    *report = r;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	4618      	mov	r0, r3
 8006c04:	f107 0308 	add.w	r3, r7, #8
 8006c08:	2274      	movs	r2, #116	; 0x74
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	f002 f994 	bl	8008f38 <memcpy>
    return true;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e000      	b.n	8006c16 <ai_network_get_info+0x9e>
  }
  return false;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3780      	adds	r7, #128	; 0x80
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	0800a290 	.word	0x0800a290
 8006c24:	0800a298 	.word	0x0800a298
 8006c28:	0800a2bc 	.word	0x0800a2bc
 8006c2c:	0800a2d8 	.word	0x0800a2d8
 8006c30:	0800a2f0 	.word	0x0800a2f0

08006c34 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 fa5d 	bl	80070fc <ai_platform_network_get_error>
 8006c42:	4603      	mov	r3, r0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af02      	add	r7, sp, #8
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8006c56:	2300      	movs	r3, #0
 8006c58:	9301      	str	r3, [sp, #4]
 8006c5a:	2304      	movs	r3, #4
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	2301      	movs	r3, #1
 8006c60:	4a04      	ldr	r2, [pc, #16]	; (8006c74 <ai_network_create+0x28>)
 8006c62:	6839      	ldr	r1, [r7, #0]
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fd65 	bl	8007734 <ai_platform_network_create>
 8006c6a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	2000066c 	.word	0x2000066c

08006c78 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 fe2d 	bl	80078e0 <ai_platform_network_destroy>
 8006c86:	4603      	mov	r3, r0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fe97 	bl	80079d0 <ai_platform_network_init>
 8006ca2:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <ai_network_init+0x1e>
 8006caa:	2300      	movs	r3, #0
 8006cac:	e028      	b.n	8006d00 <ai_network_init+0x70>

  ai_bool ok = true;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f7ff fedf 	bl	8006a78 <network_configure_weights>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	7afb      	ldrb	r3, [r7, #11]
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	bf14      	ite	ne
 8006cc6:	2301      	movne	r3, #1
 8006cc8:	2300      	moveq	r3, #0
 8006cca:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8006ccc:	6839      	ldr	r1, [r7, #0]
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f7ff fe7e 	bl	80069d0 <network_configure_activations>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	7afb      	ldrb	r3, [r7, #11]
 8006cda:	4013      	ands	r3, r2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	bf14      	ite	ne
 8006ce0:	2301      	movne	r3, #1
 8006ce2:	2300      	moveq	r3, #0
 8006ce4:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 ff84 	bl	8007bf4 <ai_platform_network_post_init>
 8006cec:	4603      	mov	r3, r0
 8006cee:	461a      	mov	r2, r3
 8006cf0:	7afb      	ldrb	r3, [r7, #11]
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	bf14      	ite	ne
 8006cf8:	2301      	movne	r3, #1
 8006cfa:	2300      	moveq	r3, #0
 8006cfc:	72fb      	strb	r3, [r7, #11]

  return ok;
 8006cfe:	7afb      	ldrb	r3, [r7, #11]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	68b9      	ldr	r1, [r7, #8]
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f000 ffff 	bl	8007d1c <ai_platform_network_process>
 8006d1e:	4603      	mov	r3, r0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <ai_network_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_network_data_weights_get(void)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	af00      	add	r7, sp, #0
    AI_PTR(AI_MAGIC_MARKER),
    AI_PTR(s_network_weights_array_u64),
    AI_PTR(AI_MAGIC_MARKER)
  };

  return AI_HANDLE_PTR(s_network_weights_map);
 8006d2c:	4b02      	ldr	r3, [pc, #8]	; (8006d38 <ai_network_data_weights_get+0x10>)

}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	0800b848 	.word	0x0800b848

08006d3c <_ai_platform_acquire_crc>:
 8006d3c:	2001      	movs	r0, #1
 8006d3e:	4770      	bx	lr

08006d40 <_ai_platform_release_crc>:
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop

08006d44 <ai_platform_get_weights_map>:
 8006d44:	b132      	cbz	r2, 8006d54 <ai_platform_get_weights_map+0x10>
 8006d46:	6912      	ldr	r2, [r2, #16]
 8006d48:	b122      	cbz	r2, 8006d54 <ai_platform_get_weights_map+0x10>
 8006d4a:	b110      	cbz	r0, 8006d52 <ai_platform_get_weights_map+0xe>
 8006d4c:	b921      	cbnz	r1, 8006d58 <ai_platform_get_weights_map+0x14>
 8006d4e:	4608      	mov	r0, r1
 8006d50:	4770      	bx	lr
 8006d52:	4770      	bx	lr
 8006d54:	4610      	mov	r0, r2
 8006d56:	4770      	bx	lr
 8006d58:	b470      	push	{r4, r5, r6}
 8006d5a:	4b13      	ldr	r3, [pc, #76]	; (8006da8 <ai_platform_get_weights_map+0x64>)
 8006d5c:	6815      	ldr	r5, [r2, #0]
 8006d5e:	429d      	cmp	r5, r3
 8006d60:	d007      	beq.n	8006d72 <ai_platform_get_weights_map+0x2e>
 8006d62:	6002      	str	r2, [r0, #0]
 8006d64:	f1a1 0001 	sub.w	r0, r1, #1
 8006d68:	fab0 f080 	clz	r0, r0
 8006d6c:	0940      	lsrs	r0, r0, #5
 8006d6e:	bc70      	pop	{r4, r5, r6}
 8006d70:	4770      	bx	lr
 8006d72:	6854      	ldr	r4, [r2, #4]
 8006d74:	42ac      	cmp	r4, r5
 8006d76:	f102 0204 	add.w	r2, r2, #4
 8006d7a:	d011      	beq.n	8006da0 <ai_platform_get_weights_map+0x5c>
 8006d7c:	1f03      	subs	r3, r0, #4
 8006d7e:	4616      	mov	r6, r2
 8006d80:	2000      	movs	r0, #0
 8006d82:	e003      	b.n	8006d8c <ai_platform_get_weights_map+0x48>
 8006d84:	f856 4f04 	ldr.w	r4, [r6, #4]!
 8006d88:	42ac      	cmp	r4, r5
 8006d8a:	d009      	beq.n	8006da0 <ai_platform_get_weights_map+0x5c>
 8006d8c:	3001      	adds	r0, #1
 8006d8e:	4281      	cmp	r1, r0
 8006d90:	f843 4f04 	str.w	r4, [r3, #4]!
 8006d94:	d1f6      	bne.n	8006d84 <ai_platform_get_weights_map+0x40>
 8006d96:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006d9a:	4b03      	ldr	r3, [pc, #12]	; (8006da8 <ai_platform_get_weights_map+0x64>)
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d001      	beq.n	8006da4 <ai_platform_get_weights_map+0x60>
 8006da0:	2000      	movs	r0, #0
 8006da2:	e7e4      	b.n	8006d6e <ai_platform_get_weights_map+0x2a>
 8006da4:	2001      	movs	r0, #1
 8006da6:	e7e2      	b.n	8006d6e <ai_platform_get_weights_map+0x2a>
 8006da8:	a1facade 	.word	0xa1facade

08006dac <ai_platform_get_activations_map>:
 8006dac:	b132      	cbz	r2, 8006dbc <ai_platform_get_activations_map+0x10>
 8006dae:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006db0:	b122      	cbz	r2, 8006dbc <ai_platform_get_activations_map+0x10>
 8006db2:	b110      	cbz	r0, 8006dba <ai_platform_get_activations_map+0xe>
 8006db4:	b921      	cbnz	r1, 8006dc0 <ai_platform_get_activations_map+0x14>
 8006db6:	4608      	mov	r0, r1
 8006db8:	4770      	bx	lr
 8006dba:	4770      	bx	lr
 8006dbc:	4610      	mov	r0, r2
 8006dbe:	4770      	bx	lr
 8006dc0:	b470      	push	{r4, r5, r6}
 8006dc2:	4b13      	ldr	r3, [pc, #76]	; (8006e10 <ai_platform_get_activations_map+0x64>)
 8006dc4:	6815      	ldr	r5, [r2, #0]
 8006dc6:	429d      	cmp	r5, r3
 8006dc8:	d007      	beq.n	8006dda <ai_platform_get_activations_map+0x2e>
 8006dca:	6002      	str	r2, [r0, #0]
 8006dcc:	f1a1 0001 	sub.w	r0, r1, #1
 8006dd0:	fab0 f080 	clz	r0, r0
 8006dd4:	0940      	lsrs	r0, r0, #5
 8006dd6:	bc70      	pop	{r4, r5, r6}
 8006dd8:	4770      	bx	lr
 8006dda:	6854      	ldr	r4, [r2, #4]
 8006ddc:	42ac      	cmp	r4, r5
 8006dde:	f102 0204 	add.w	r2, r2, #4
 8006de2:	d011      	beq.n	8006e08 <ai_platform_get_activations_map+0x5c>
 8006de4:	1f03      	subs	r3, r0, #4
 8006de6:	4616      	mov	r6, r2
 8006de8:	2000      	movs	r0, #0
 8006dea:	e003      	b.n	8006df4 <ai_platform_get_activations_map+0x48>
 8006dec:	f856 4f04 	ldr.w	r4, [r6, #4]!
 8006df0:	42ac      	cmp	r4, r5
 8006df2:	d009      	beq.n	8006e08 <ai_platform_get_activations_map+0x5c>
 8006df4:	3001      	adds	r0, #1
 8006df6:	4281      	cmp	r1, r0
 8006df8:	f843 4f04 	str.w	r4, [r3, #4]!
 8006dfc:	d1f6      	bne.n	8006dec <ai_platform_get_activations_map+0x40>
 8006dfe:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006e02:	4b03      	ldr	r3, [pc, #12]	; (8006e10 <ai_platform_get_activations_map+0x64>)
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d001      	beq.n	8006e0c <ai_platform_get_activations_map+0x60>
 8006e08:	2000      	movs	r0, #0
 8006e0a:	e7e4      	b.n	8006dd6 <ai_platform_get_activations_map+0x2a>
 8006e0c:	2001      	movs	r0, #1
 8006e0e:	e7e2      	b.n	8006dd6 <ai_platform_get_activations_map+0x2a>
 8006e10:	a1facade 	.word	0xa1facade

08006e14 <ai_platform_runtime_get_revision>:
 8006e14:	b508      	push	{r3, lr}
 8006e16:	4a17      	ldr	r2, [pc, #92]	; (8006e74 <ai_platform_runtime_get_revision+0x60>)
 8006e18:	6813      	ldr	r3, [r2, #0]
 8006e1a:	f023 0301 	bic.w	r3, r3, #1
 8006e1e:	6013      	str	r3, [r2, #0]
 8006e20:	f7ff ff8c 	bl	8006d3c <_ai_platform_acquire_crc>
 8006e24:	4b14      	ldr	r3, [pc, #80]	; (8006e78 <ai_platform_runtime_get_revision+0x64>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e30:	d00d      	beq.n	8006e4e <ai_platform_runtime_get_revision+0x3a>
 8006e32:	4b12      	ldr	r3, [pc, #72]	; (8006e7c <ai_platform_runtime_get_revision+0x68>)
 8006e34:	2201      	movs	r2, #1
 8006e36:	601a      	str	r2, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	2a00      	cmp	r2, #0
 8006e3c:	d1fc      	bne.n	8006e38 <ai_platform_runtime_get_revision+0x24>
 8006e3e:	4b10      	ldr	r3, [pc, #64]	; (8006e80 <ai_platform_runtime_get_revision+0x6c>)
 8006e40:	4a10      	ldr	r2, [pc, #64]	; (8006e84 <ai_platform_runtime_get_revision+0x70>)
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	4b10      	ldr	r3, [pc, #64]	; (8006e88 <ai_platform_runtime_get_revision+0x74>)
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d00e      	beq.n	8006e6a <ai_platform_runtime_get_revision+0x56>
 8006e4c:	e7fe      	b.n	8006e4c <ai_platform_runtime_get_revision+0x38>
 8006e4e:	4b0f      	ldr	r3, [pc, #60]	; (8006e8c <ai_platform_runtime_get_revision+0x78>)
 8006e50:	2201      	movs	r2, #1
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	2a00      	cmp	r2, #0
 8006e58:	d1fc      	bne.n	8006e54 <ai_platform_runtime_get_revision+0x40>
 8006e5a:	4b0d      	ldr	r3, [pc, #52]	; (8006e90 <ai_platform_runtime_get_revision+0x7c>)
 8006e5c:	4a09      	ldr	r2, [pc, #36]	; (8006e84 <ai_platform_runtime_get_revision+0x70>)
 8006e5e:	601a      	str	r2, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	4b09      	ldr	r3, [pc, #36]	; (8006e88 <ai_platform_runtime_get_revision+0x74>)
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d000      	beq.n	8006e6a <ai_platform_runtime_get_revision+0x56>
 8006e68:	e7fe      	b.n	8006e68 <ai_platform_runtime_get_revision+0x54>
 8006e6a:	f7ff ff69 	bl	8006d40 <_ai_platform_release_crc>
 8006e6e:	4809      	ldr	r0, [pc, #36]	; (8006e94 <ai_platform_runtime_get_revision+0x80>)
 8006e70:	bd08      	pop	{r3, pc}
 8006e72:	bf00      	nop
 8006e74:	e0002000 	.word	0xe0002000
 8006e78:	e0042000 	.word	0xe0042000
 8006e7c:	58024c08 	.word	0x58024c08
 8006e80:	58024c00 	.word	0x58024c00
 8006e84:	f407a5c2 	.word	0xf407a5c2
 8006e88:	b5e8b5cd 	.word	0xb5e8b5cd
 8006e8c:	40023008 	.word	0x40023008
 8006e90:	40023000 	.word	0x40023000
 8006e94:	0800b854 	.word	0x0800b854

08006e98 <ai_platform_runtime_get_version>:
 8006e98:	b500      	push	{lr}
 8006e9a:	4a18      	ldr	r2, [pc, #96]	; (8006efc <ai_platform_runtime_get_version+0x64>)
 8006e9c:	6813      	ldr	r3, [r2, #0]
 8006e9e:	f023 0301 	bic.w	r3, r3, #1
 8006ea2:	6013      	str	r3, [r2, #0]
 8006ea4:	b083      	sub	sp, #12
 8006ea6:	f7ff ff49 	bl	8006d3c <_ai_platform_acquire_crc>
 8006eaa:	4b15      	ldr	r3, [pc, #84]	; (8006f00 <ai_platform_runtime_get_version+0x68>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eb6:	d00d      	beq.n	8006ed4 <ai_platform_runtime_get_version+0x3c>
 8006eb8:	4b12      	ldr	r3, [pc, #72]	; (8006f04 <ai_platform_runtime_get_version+0x6c>)
 8006eba:	2201      	movs	r2, #1
 8006ebc:	601a      	str	r2, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	2a00      	cmp	r2, #0
 8006ec2:	d1fc      	bne.n	8006ebe <ai_platform_runtime_get_version+0x26>
 8006ec4:	4b10      	ldr	r3, [pc, #64]	; (8006f08 <ai_platform_runtime_get_version+0x70>)
 8006ec6:	4a11      	ldr	r2, [pc, #68]	; (8006f0c <ai_platform_runtime_get_version+0x74>)
 8006ec8:	601a      	str	r2, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	4b10      	ldr	r3, [pc, #64]	; (8006f10 <ai_platform_runtime_get_version+0x78>)
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d00e      	beq.n	8006ef0 <ai_platform_runtime_get_version+0x58>
 8006ed2:	e7fe      	b.n	8006ed2 <ai_platform_runtime_get_version+0x3a>
 8006ed4:	4b0f      	ldr	r3, [pc, #60]	; (8006f14 <ai_platform_runtime_get_version+0x7c>)
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	601a      	str	r2, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	2a00      	cmp	r2, #0
 8006ede:	d1fc      	bne.n	8006eda <ai_platform_runtime_get_version+0x42>
 8006ee0:	4b0d      	ldr	r3, [pc, #52]	; (8006f18 <ai_platform_runtime_get_version+0x80>)
 8006ee2:	4a0a      	ldr	r2, [pc, #40]	; (8006f0c <ai_platform_runtime_get_version+0x74>)
 8006ee4:	601a      	str	r2, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	4b09      	ldr	r3, [pc, #36]	; (8006f10 <ai_platform_runtime_get_version+0x78>)
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d000      	beq.n	8006ef0 <ai_platform_runtime_get_version+0x58>
 8006eee:	e7fe      	b.n	8006eee <ai_platform_runtime_get_version+0x56>
 8006ef0:	f7ff ff26 	bl	8006d40 <_ai_platform_release_crc>
 8006ef4:	2007      	movs	r0, #7
 8006ef6:	b003      	add	sp, #12
 8006ef8:	f85d fb04 	ldr.w	pc, [sp], #4
 8006efc:	e0002000 	.word	0xe0002000
 8006f00:	e0042000 	.word	0xe0042000
 8006f04:	58024c08 	.word	0x58024c08
 8006f08:	58024c00 	.word	0x58024c00
 8006f0c:	f407a5c2 	.word	0xf407a5c2
 8006f10:	b5e8b5cd 	.word	0xb5e8b5cd
 8006f14:	40023008 	.word	0x40023008
 8006f18:	40023000 	.word	0x40023000

08006f1c <ai_platform_api_get_version>:
 8006f1c:	b500      	push	{lr}
 8006f1e:	4a20      	ldr	r2, [pc, #128]	; (8006fa0 <ai_platform_api_get_version+0x84>)
 8006f20:	6813      	ldr	r3, [r2, #0]
 8006f22:	f023 0301 	bic.w	r3, r3, #1
 8006f26:	6013      	str	r3, [r2, #0]
 8006f28:	b083      	sub	sp, #12
 8006f2a:	f7ff ff07 	bl	8006d3c <_ai_platform_acquire_crc>
 8006f2e:	4b1d      	ldr	r3, [pc, #116]	; (8006fa4 <ai_platform_api_get_version+0x88>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f3a:	d00d      	beq.n	8006f58 <ai_platform_api_get_version+0x3c>
 8006f3c:	4b1a      	ldr	r3, [pc, #104]	; (8006fa8 <ai_platform_api_get_version+0x8c>)
 8006f3e:	2201      	movs	r2, #1
 8006f40:	601a      	str	r2, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	2a00      	cmp	r2, #0
 8006f46:	d1fc      	bne.n	8006f42 <ai_platform_api_get_version+0x26>
 8006f48:	4b18      	ldr	r3, [pc, #96]	; (8006fac <ai_platform_api_get_version+0x90>)
 8006f4a:	4a19      	ldr	r2, [pc, #100]	; (8006fb0 <ai_platform_api_get_version+0x94>)
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	4b18      	ldr	r3, [pc, #96]	; (8006fb4 <ai_platform_api_get_version+0x98>)
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d00e      	beq.n	8006f74 <ai_platform_api_get_version+0x58>
 8006f56:	e7fe      	b.n	8006f56 <ai_platform_api_get_version+0x3a>
 8006f58:	4b17      	ldr	r3, [pc, #92]	; (8006fb8 <ai_platform_api_get_version+0x9c>)
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	601a      	str	r2, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	2a00      	cmp	r2, #0
 8006f62:	d1fc      	bne.n	8006f5e <ai_platform_api_get_version+0x42>
 8006f64:	4b15      	ldr	r3, [pc, #84]	; (8006fbc <ai_platform_api_get_version+0xa0>)
 8006f66:	4a12      	ldr	r2, [pc, #72]	; (8006fb0 <ai_platform_api_get_version+0x94>)
 8006f68:	601a      	str	r2, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	4b11      	ldr	r3, [pc, #68]	; (8006fb4 <ai_platform_api_get_version+0x98>)
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d000      	beq.n	8006f74 <ai_platform_api_get_version+0x58>
 8006f72:	e7fe      	b.n	8006f72 <ai_platform_api_get_version+0x56>
 8006f74:	f7ff fee4 	bl	8006d40 <_ai_platform_release_crc>
 8006f78:	4b11      	ldr	r3, [pc, #68]	; (8006fc0 <ai_platform_api_get_version+0xa4>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2000      	movs	r0, #0
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	f362 0007 	bfi	r0, r2, #0, #8
 8006f84:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006f88:	f362 200f 	bfi	r0, r2, #8, #8
 8006f8c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006f90:	f362 4017 	bfi	r0, r2, #16, #8
 8006f94:	0e1b      	lsrs	r3, r3, #24
 8006f96:	f363 601f 	bfi	r0, r3, #24, #8
 8006f9a:	b003      	add	sp, #12
 8006f9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006fa0:	e0002000 	.word	0xe0002000
 8006fa4:	e0042000 	.word	0xe0042000
 8006fa8:	58024c08 	.word	0x58024c08
 8006fac:	58024c00 	.word	0x58024c00
 8006fb0:	f407a5c2 	.word	0xf407a5c2
 8006fb4:	b5e8b5cd 	.word	0xb5e8b5cd
 8006fb8:	40023008 	.word	0x40023008
 8006fbc:	40023000 	.word	0x40023000
 8006fc0:	0800b858 	.word	0x0800b858

08006fc4 <ai_platform_interface_api_get_version>:
 8006fc4:	b500      	push	{lr}
 8006fc6:	4a20      	ldr	r2, [pc, #128]	; (8007048 <ai_platform_interface_api_get_version+0x84>)
 8006fc8:	6813      	ldr	r3, [r2, #0]
 8006fca:	f023 0301 	bic.w	r3, r3, #1
 8006fce:	6013      	str	r3, [r2, #0]
 8006fd0:	b083      	sub	sp, #12
 8006fd2:	f7ff feb3 	bl	8006d3c <_ai_platform_acquire_crc>
 8006fd6:	4b1d      	ldr	r3, [pc, #116]	; (800704c <ai_platform_interface_api_get_version+0x88>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fe2:	d00d      	beq.n	8007000 <ai_platform_interface_api_get_version+0x3c>
 8006fe4:	4b1a      	ldr	r3, [pc, #104]	; (8007050 <ai_platform_interface_api_get_version+0x8c>)
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	601a      	str	r2, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	2a00      	cmp	r2, #0
 8006fee:	d1fc      	bne.n	8006fea <ai_platform_interface_api_get_version+0x26>
 8006ff0:	4b18      	ldr	r3, [pc, #96]	; (8007054 <ai_platform_interface_api_get_version+0x90>)
 8006ff2:	4a19      	ldr	r2, [pc, #100]	; (8007058 <ai_platform_interface_api_get_version+0x94>)
 8006ff4:	601a      	str	r2, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	4b18      	ldr	r3, [pc, #96]	; (800705c <ai_platform_interface_api_get_version+0x98>)
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d00e      	beq.n	800701c <ai_platform_interface_api_get_version+0x58>
 8006ffe:	e7fe      	b.n	8006ffe <ai_platform_interface_api_get_version+0x3a>
 8007000:	4b17      	ldr	r3, [pc, #92]	; (8007060 <ai_platform_interface_api_get_version+0x9c>)
 8007002:	2201      	movs	r2, #1
 8007004:	601a      	str	r2, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	2a00      	cmp	r2, #0
 800700a:	d1fc      	bne.n	8007006 <ai_platform_interface_api_get_version+0x42>
 800700c:	4b15      	ldr	r3, [pc, #84]	; (8007064 <ai_platform_interface_api_get_version+0xa0>)
 800700e:	4a12      	ldr	r2, [pc, #72]	; (8007058 <ai_platform_interface_api_get_version+0x94>)
 8007010:	601a      	str	r2, [r3, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	4b11      	ldr	r3, [pc, #68]	; (800705c <ai_platform_interface_api_get_version+0x98>)
 8007016:	429a      	cmp	r2, r3
 8007018:	d000      	beq.n	800701c <ai_platform_interface_api_get_version+0x58>
 800701a:	e7fe      	b.n	800701a <ai_platform_interface_api_get_version+0x56>
 800701c:	f7ff fe90 	bl	8006d40 <_ai_platform_release_crc>
 8007020:	4b11      	ldr	r3, [pc, #68]	; (8007068 <ai_platform_interface_api_get_version+0xa4>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2000      	movs	r0, #0
 8007026:	b2da      	uxtb	r2, r3
 8007028:	f362 0007 	bfi	r0, r2, #0, #8
 800702c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007030:	f362 200f 	bfi	r0, r2, #8, #8
 8007034:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007038:	f362 4017 	bfi	r0, r2, #16, #8
 800703c:	0e1b      	lsrs	r3, r3, #24
 800703e:	f363 601f 	bfi	r0, r3, #24, #8
 8007042:	b003      	add	sp, #12
 8007044:	f85d fb04 	ldr.w	pc, [sp], #4
 8007048:	e0002000 	.word	0xe0002000
 800704c:	e0042000 	.word	0xe0042000
 8007050:	58024c08 	.word	0x58024c08
 8007054:	58024c00 	.word	0x58024c00
 8007058:	f407a5c2 	.word	0xf407a5c2
 800705c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007060:	40023008 	.word	0x40023008
 8007064:	40023000 	.word	0x40023000
 8007068:	0800b85c 	.word	0x0800b85c

0800706c <ai_platform_context_acquire>:
 800706c:	b510      	push	{r4, lr}
 800706e:	4604      	mov	r4, r0
 8007070:	b120      	cbz	r0, 800707c <ai_platform_context_acquire+0x10>
 8007072:	4b19      	ldr	r3, [pc, #100]	; (80070d8 <ai_platform_context_acquire+0x6c>)
 8007074:	6802      	ldr	r2, [r0, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	bf18      	it	ne
 800707a:	2400      	movne	r4, #0
 800707c:	4a17      	ldr	r2, [pc, #92]	; (80070dc <ai_platform_context_acquire+0x70>)
 800707e:	6813      	ldr	r3, [r2, #0]
 8007080:	f023 0301 	bic.w	r3, r3, #1
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	f7ff fe59 	bl	8006d3c <_ai_platform_acquire_crc>
 800708a:	4b15      	ldr	r3, [pc, #84]	; (80070e0 <ai_platform_context_acquire+0x74>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007096:	d00d      	beq.n	80070b4 <ai_platform_context_acquire+0x48>
 8007098:	4b12      	ldr	r3, [pc, #72]	; (80070e4 <ai_platform_context_acquire+0x78>)
 800709a:	2201      	movs	r2, #1
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	2a00      	cmp	r2, #0
 80070a2:	d1fc      	bne.n	800709e <ai_platform_context_acquire+0x32>
 80070a4:	4b10      	ldr	r3, [pc, #64]	; (80070e8 <ai_platform_context_acquire+0x7c>)
 80070a6:	4a11      	ldr	r2, [pc, #68]	; (80070ec <ai_platform_context_acquire+0x80>)
 80070a8:	601a      	str	r2, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	4b10      	ldr	r3, [pc, #64]	; (80070f0 <ai_platform_context_acquire+0x84>)
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d00e      	beq.n	80070d0 <ai_platform_context_acquire+0x64>
 80070b2:	e7fe      	b.n	80070b2 <ai_platform_context_acquire+0x46>
 80070b4:	4b0f      	ldr	r3, [pc, #60]	; (80070f4 <ai_platform_context_acquire+0x88>)
 80070b6:	2201      	movs	r2, #1
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	2a00      	cmp	r2, #0
 80070be:	d1fc      	bne.n	80070ba <ai_platform_context_acquire+0x4e>
 80070c0:	4b0d      	ldr	r3, [pc, #52]	; (80070f8 <ai_platform_context_acquire+0x8c>)
 80070c2:	4a0a      	ldr	r2, [pc, #40]	; (80070ec <ai_platform_context_acquire+0x80>)
 80070c4:	601a      	str	r2, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	4b09      	ldr	r3, [pc, #36]	; (80070f0 <ai_platform_context_acquire+0x84>)
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d000      	beq.n	80070d0 <ai_platform_context_acquire+0x64>
 80070ce:	e7fe      	b.n	80070ce <ai_platform_context_acquire+0x62>
 80070d0:	f7ff fe36 	bl	8006d40 <_ai_platform_release_crc>
 80070d4:	4620      	mov	r0, r4
 80070d6:	bd10      	pop	{r4, pc}
 80070d8:	a1c00100 	.word	0xa1c00100
 80070dc:	e0002000 	.word	0xe0002000
 80070e0:	e0042000 	.word	0xe0042000
 80070e4:	58024c08 	.word	0x58024c08
 80070e8:	58024c00 	.word	0x58024c00
 80070ec:	f407a5c2 	.word	0xf407a5c2
 80070f0:	b5e8b5cd 	.word	0xb5e8b5cd
 80070f4:	40023008 	.word	0x40023008
 80070f8:	40023000 	.word	0x40023000

080070fc <ai_platform_network_get_error>:
 80070fc:	b510      	push	{r4, lr}
 80070fe:	b120      	cbz	r0, 800710a <ai_platform_network_get_error+0xe>
 8007100:	4b32      	ldr	r3, [pc, #200]	; (80071cc <ai_platform_network_get_error+0xd0>)
 8007102:	6802      	ldr	r2, [r0, #0]
 8007104:	429a      	cmp	r2, r3
 8007106:	4604      	mov	r4, r0
 8007108:	d02e      	beq.n	8007168 <ai_platform_network_get_error+0x6c>
 800710a:	4a31      	ldr	r2, [pc, #196]	; (80071d0 <ai_platform_network_get_error+0xd4>)
 800710c:	6813      	ldr	r3, [r2, #0]
 800710e:	f023 0301 	bic.w	r3, r3, #1
 8007112:	6013      	str	r3, [r2, #0]
 8007114:	f7ff fe12 	bl	8006d3c <_ai_platform_acquire_crc>
 8007118:	4b2e      	ldr	r3, [pc, #184]	; (80071d4 <ai_platform_network_get_error+0xd8>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007124:	d00d      	beq.n	8007142 <ai_platform_network_get_error+0x46>
 8007126:	4b2c      	ldr	r3, [pc, #176]	; (80071d8 <ai_platform_network_get_error+0xdc>)
 8007128:	2201      	movs	r2, #1
 800712a:	601a      	str	r2, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	2a00      	cmp	r2, #0
 8007130:	d1fc      	bne.n	800712c <ai_platform_network_get_error+0x30>
 8007132:	4b2a      	ldr	r3, [pc, #168]	; (80071dc <ai_platform_network_get_error+0xe0>)
 8007134:	4a2a      	ldr	r2, [pc, #168]	; (80071e0 <ai_platform_network_get_error+0xe4>)
 8007136:	601a      	str	r2, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	4b2a      	ldr	r3, [pc, #168]	; (80071e4 <ai_platform_network_get_error+0xe8>)
 800713c:	429a      	cmp	r2, r3
 800713e:	d00d      	beq.n	800715c <ai_platform_network_get_error+0x60>
 8007140:	e7fe      	b.n	8007140 <ai_platform_network_get_error+0x44>
 8007142:	4b29      	ldr	r3, [pc, #164]	; (80071e8 <ai_platform_network_get_error+0xec>)
 8007144:	2201      	movs	r2, #1
 8007146:	601a      	str	r2, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	2a00      	cmp	r2, #0
 800714c:	d1fc      	bne.n	8007148 <ai_platform_network_get_error+0x4c>
 800714e:	4b27      	ldr	r3, [pc, #156]	; (80071ec <ai_platform_network_get_error+0xf0>)
 8007150:	4a23      	ldr	r2, [pc, #140]	; (80071e0 <ai_platform_network_get_error+0xe4>)
 8007152:	601a      	str	r2, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	4b23      	ldr	r3, [pc, #140]	; (80071e4 <ai_platform_network_get_error+0xe8>)
 8007158:	429a      	cmp	r2, r3
 800715a:	d104      	bne.n	8007166 <ai_platform_network_get_error+0x6a>
 800715c:	f7ff fdf0 	bl	8006d40 <_ai_platform_release_crc>
 8007160:	f241 0010 	movw	r0, #4112	; 0x1010
 8007164:	bd10      	pop	{r4, pc}
 8007166:	e7fe      	b.n	8007166 <ai_platform_network_get_error+0x6a>
 8007168:	4a19      	ldr	r2, [pc, #100]	; (80071d0 <ai_platform_network_get_error+0xd4>)
 800716a:	6813      	ldr	r3, [r2, #0]
 800716c:	f023 0301 	bic.w	r3, r3, #1
 8007170:	6013      	str	r3, [r2, #0]
 8007172:	f7ff fde3 	bl	8006d3c <_ai_platform_acquire_crc>
 8007176:	4b17      	ldr	r3, [pc, #92]	; (80071d4 <ai_platform_network_get_error+0xd8>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800717e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007182:	d00d      	beq.n	80071a0 <ai_platform_network_get_error+0xa4>
 8007184:	4b14      	ldr	r3, [pc, #80]	; (80071d8 <ai_platform_network_get_error+0xdc>)
 8007186:	2201      	movs	r2, #1
 8007188:	601a      	str	r2, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	2a00      	cmp	r2, #0
 800718e:	d1fc      	bne.n	800718a <ai_platform_network_get_error+0x8e>
 8007190:	4b12      	ldr	r3, [pc, #72]	; (80071dc <ai_platform_network_get_error+0xe0>)
 8007192:	4a13      	ldr	r2, [pc, #76]	; (80071e0 <ai_platform_network_get_error+0xe4>)
 8007194:	601a      	str	r2, [r3, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	4b12      	ldr	r3, [pc, #72]	; (80071e4 <ai_platform_network_get_error+0xe8>)
 800719a:	429a      	cmp	r2, r3
 800719c:	d00e      	beq.n	80071bc <ai_platform_network_get_error+0xc0>
 800719e:	e7fe      	b.n	800719e <ai_platform_network_get_error+0xa2>
 80071a0:	4b11      	ldr	r3, [pc, #68]	; (80071e8 <ai_platform_network_get_error+0xec>)
 80071a2:	2201      	movs	r2, #1
 80071a4:	601a      	str	r2, [r3, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	2a00      	cmp	r2, #0
 80071aa:	d1fc      	bne.n	80071a6 <ai_platform_network_get_error+0xaa>
 80071ac:	4b0f      	ldr	r3, [pc, #60]	; (80071ec <ai_platform_network_get_error+0xf0>)
 80071ae:	4a0c      	ldr	r2, [pc, #48]	; (80071e0 <ai_platform_network_get_error+0xe4>)
 80071b0:	601a      	str	r2, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	4b0b      	ldr	r3, [pc, #44]	; (80071e4 <ai_platform_network_get_error+0xe8>)
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d000      	beq.n	80071bc <ai_platform_network_get_error+0xc0>
 80071ba:	e7fe      	b.n	80071ba <ai_platform_network_get_error+0xbe>
 80071bc:	f7ff fdc0 	bl	8006d40 <_ai_platform_release_crc>
 80071c0:	f104 0010 	add.w	r0, r4, #16
 80071c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071c8:	f001 b828 	b.w	800821c <core_get_error>
 80071cc:	a1c00100 	.word	0xa1c00100
 80071d0:	e0002000 	.word	0xe0002000
 80071d4:	e0042000 	.word	0xe0042000
 80071d8:	58024c08 	.word	0x58024c08
 80071dc:	58024c00 	.word	0x58024c00
 80071e0:	f407a5c2 	.word	0xf407a5c2
 80071e4:	b5e8b5cd 	.word	0xb5e8b5cd
 80071e8:	40023008 	.word	0x40023008
 80071ec:	40023000 	.word	0x40023000

080071f0 <ai_platform_api_get_network_report>:
 80071f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f4:	b083      	sub	sp, #12
 80071f6:	b120      	cbz	r0, 8007202 <ai_platform_api_get_network_report+0x12>
 80071f8:	4ba1      	ldr	r3, [pc, #644]	; (8007480 <ai_platform_api_get_network_report+0x290>)
 80071fa:	6802      	ldr	r2, [r0, #0]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	4605      	mov	r5, r0
 8007200:	d030      	beq.n	8007264 <ai_platform_api_get_network_report+0x74>
 8007202:	4aa0      	ldr	r2, [pc, #640]	; (8007484 <ai_platform_api_get_network_report+0x294>)
 8007204:	6813      	ldr	r3, [r2, #0]
 8007206:	f023 0301 	bic.w	r3, r3, #1
 800720a:	6013      	str	r3, [r2, #0]
 800720c:	f7ff fd96 	bl	8006d3c <_ai_platform_acquire_crc>
 8007210:	4b9d      	ldr	r3, [pc, #628]	; (8007488 <ai_platform_api_get_network_report+0x298>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800721c:	d00d      	beq.n	800723a <ai_platform_api_get_network_report+0x4a>
 800721e:	4b9b      	ldr	r3, [pc, #620]	; (800748c <ai_platform_api_get_network_report+0x29c>)
 8007220:	2201      	movs	r2, #1
 8007222:	601a      	str	r2, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	2a00      	cmp	r2, #0
 8007228:	d1fc      	bne.n	8007224 <ai_platform_api_get_network_report+0x34>
 800722a:	4b99      	ldr	r3, [pc, #612]	; (8007490 <ai_platform_api_get_network_report+0x2a0>)
 800722c:	4a99      	ldr	r2, [pc, #612]	; (8007494 <ai_platform_api_get_network_report+0x2a4>)
 800722e:	601a      	str	r2, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	4b99      	ldr	r3, [pc, #612]	; (8007498 <ai_platform_api_get_network_report+0x2a8>)
 8007234:	429a      	cmp	r2, r3
 8007236:	d00d      	beq.n	8007254 <ai_platform_api_get_network_report+0x64>
 8007238:	e7fe      	b.n	8007238 <ai_platform_api_get_network_report+0x48>
 800723a:	4b98      	ldr	r3, [pc, #608]	; (800749c <ai_platform_api_get_network_report+0x2ac>)
 800723c:	2201      	movs	r2, #1
 800723e:	601a      	str	r2, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	2a00      	cmp	r2, #0
 8007244:	d1fc      	bne.n	8007240 <ai_platform_api_get_network_report+0x50>
 8007246:	4b96      	ldr	r3, [pc, #600]	; (80074a0 <ai_platform_api_get_network_report+0x2b0>)
 8007248:	4a92      	ldr	r2, [pc, #584]	; (8007494 <ai_platform_api_get_network_report+0x2a4>)
 800724a:	601a      	str	r2, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	4b92      	ldr	r3, [pc, #584]	; (8007498 <ai_platform_api_get_network_report+0x2a8>)
 8007250:	429a      	cmp	r2, r3
 8007252:	d106      	bne.n	8007262 <ai_platform_api_get_network_report+0x72>
 8007254:	f7ff fd74 	bl	8006d40 <_ai_platform_release_crc>
 8007258:	2600      	movs	r6, #0
 800725a:	4630      	mov	r0, r6
 800725c:	b003      	add	sp, #12
 800725e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007262:	e7fe      	b.n	8007262 <ai_platform_api_get_network_report+0x72>
 8007264:	4a87      	ldr	r2, [pc, #540]	; (8007484 <ai_platform_api_get_network_report+0x294>)
 8007266:	6813      	ldr	r3, [r2, #0]
 8007268:	f023 0301 	bic.w	r3, r3, #1
 800726c:	6013      	str	r3, [r2, #0]
 800726e:	460c      	mov	r4, r1
 8007270:	f7ff fd64 	bl	8006d3c <_ai_platform_acquire_crc>
 8007274:	4b84      	ldr	r3, [pc, #528]	; (8007488 <ai_platform_api_get_network_report+0x298>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800727c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007280:	d00d      	beq.n	800729e <ai_platform_api_get_network_report+0xae>
 8007282:	4b82      	ldr	r3, [pc, #520]	; (800748c <ai_platform_api_get_network_report+0x29c>)
 8007284:	2201      	movs	r2, #1
 8007286:	601a      	str	r2, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	2a00      	cmp	r2, #0
 800728c:	d1fc      	bne.n	8007288 <ai_platform_api_get_network_report+0x98>
 800728e:	4b80      	ldr	r3, [pc, #512]	; (8007490 <ai_platform_api_get_network_report+0x2a0>)
 8007290:	4a80      	ldr	r2, [pc, #512]	; (8007494 <ai_platform_api_get_network_report+0x2a4>)
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	4b80      	ldr	r3, [pc, #512]	; (8007498 <ai_platform_api_get_network_report+0x2a8>)
 8007298:	429a      	cmp	r2, r3
 800729a:	d00e      	beq.n	80072ba <ai_platform_api_get_network_report+0xca>
 800729c:	e7fe      	b.n	800729c <ai_platform_api_get_network_report+0xac>
 800729e:	4b7f      	ldr	r3, [pc, #508]	; (800749c <ai_platform_api_get_network_report+0x2ac>)
 80072a0:	2201      	movs	r2, #1
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	2a00      	cmp	r2, #0
 80072a8:	d1fc      	bne.n	80072a4 <ai_platform_api_get_network_report+0xb4>
 80072aa:	4b7d      	ldr	r3, [pc, #500]	; (80074a0 <ai_platform_api_get_network_report+0x2b0>)
 80072ac:	4a79      	ldr	r2, [pc, #484]	; (8007494 <ai_platform_api_get_network_report+0x2a4>)
 80072ae:	601a      	str	r2, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	4b79      	ldr	r3, [pc, #484]	; (8007498 <ai_platform_api_get_network_report+0x2a8>)
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d000      	beq.n	80072ba <ai_platform_api_get_network_report+0xca>
 80072b8:	e7fe      	b.n	80072b8 <ai_platform_api_get_network_report+0xc8>
 80072ba:	f7ff fd41 	bl	8006d40 <_ai_platform_release_crc>
 80072be:	2c00      	cmp	r4, #0
 80072c0:	d07c      	beq.n	80073bc <ai_platform_api_get_network_report+0x1cc>
 80072c2:	2300      	movs	r3, #0
 80072c4:	66e3      	str	r3, [r4, #108]	; 0x6c
 80072c6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80072c8:	2a00      	cmp	r2, #0
 80072ca:	d079      	beq.n	80073c0 <ai_platform_api_get_network_report+0x1d0>
 80072cc:	2301      	movs	r3, #1
 80072ce:	66e3      	str	r3, [r4, #108]	; 0x6c
 80072d0:	6913      	ldr	r3, [r2, #16]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d00c      	beq.n	80072f0 <ai_platform_api_get_network_report+0x100>
 80072d6:	b15b      	cbz	r3, 80072f0 <ai_platform_api_get_network_report+0x100>
 80072d8:	2202      	movs	r2, #2
 80072da:	e003      	b.n	80072e4 <ai_platform_api_get_network_report+0xf4>
 80072dc:	1c50      	adds	r0, r2, #1
 80072de:	460b      	mov	r3, r1
 80072e0:	b121      	cbz	r1, 80072ec <ai_platform_api_get_network_report+0xfc>
 80072e2:	4602      	mov	r2, r0
 80072e4:	66e2      	str	r2, [r4, #108]	; 0x6c
 80072e6:	6919      	ldr	r1, [r3, #16]
 80072e8:	4299      	cmp	r1, r3
 80072ea:	d1f7      	bne.n	80072dc <ai_platform_api_get_network_report+0xec>
 80072ec:	2a00      	cmp	r2, #0
 80072ee:	d067      	beq.n	80073c0 <ai_platform_api_get_network_report+0x1d0>
 80072f0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f000 80d6 	beq.w	80074a4 <ai_platform_api_get_network_report+0x2b4>
 80072f8:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 80072fa:	2f00      	cmp	r7, #0
 80072fc:	f000 80d2 	beq.w	80074a4 <ai_platform_api_get_network_report+0x2b4>
 8007300:	883b      	ldrh	r3, [r7, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 80ce 	beq.w	80074a4 <ai_platform_api_get_network_report+0x2b4>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 80ca 	beq.w	80074a4 <ai_platform_api_get_network_report+0x2b4>
 8007310:	681e      	ldr	r6, [r3, #0]
 8007312:	2e00      	cmp	r6, #0
 8007314:	f000 80c6 	beq.w	80074a4 <ai_platform_api_get_network_report+0x2b4>
 8007318:	f04f 0800 	mov.w	r8, #0
 800731c:	4641      	mov	r1, r8
 800731e:	f04f 0b18 	mov.w	fp, #24
 8007322:	f04f 0a01 	mov.w	sl, #1
 8007326:	e019      	b.n	800735c <ai_platform_api_get_network_report+0x16c>
 8007328:	f849 1038 	str.w	r1, [r9, r8, lsl #3]
 800732c:	6830      	ldr	r0, [r6, #0]
 800732e:	6050      	str	r0, [r2, #4]
 8007330:	2800      	cmp	r0, #0
 8007332:	d039      	beq.n	80073a8 <ai_platform_api_get_network_report+0x1b8>
 8007334:	8840      	ldrh	r0, [r0, #2]
 8007336:	2800      	cmp	r0, #0
 8007338:	d036      	beq.n	80073a8 <ai_platform_api_get_network_report+0x1b8>
 800733a:	f849 a00c 	str.w	sl, [r9, ip]
 800733e:	615a      	str	r2, [r3, #20]
 8007340:	8838      	ldrh	r0, [r7, #0]
 8007342:	f108 0301 	add.w	r3, r8, #1
 8007346:	4283      	cmp	r3, r0
 8007348:	4698      	mov	r8, r3
 800734a:	b29a      	uxth	r2, r3
 800734c:	d240      	bcs.n	80073d0 <ai_platform_api_get_network_report+0x1e0>
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	2800      	cmp	r0, #0
 8007352:	d03d      	beq.n	80073d0 <ai_platform_api_get_network_report+0x1e0>
 8007354:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
 8007358:	2e00      	cmp	r6, #0
 800735a:	d039      	beq.n	80073d0 <ai_platform_api_get_network_report+0x1e0>
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	69b2      	ldr	r2, [r6, #24]
 8007360:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8007364:	6810      	ldr	r0, [r2, #0]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	9101      	str	r1, [sp, #4]
 800736a:	9200      	str	r2, [sp, #0]
 800736c:	f001 fd40 	bl	8008df0 <ai_array_to_buffer_fmt>
 8007370:	9a00      	ldr	r2, [sp, #0]
 8007372:	9901      	ldr	r1, [sp, #4]
 8007374:	fb0b fc08 	mul.w	ip, fp, r8
 8007378:	eb02 030c 	add.w	r3, r2, ip
 800737c:	f842 000c 	str.w	r0, [r2, ip]
 8007380:	f8a3 a004 	strh.w	sl, [r3, #4]
 8007384:	68f2      	ldr	r2, [r6, #12]
 8007386:	68d2      	ldr	r2, [r2, #12]
 8007388:	80da      	strh	r2, [r3, #6]
 800738a:	68f2      	ldr	r2, [r6, #12]
 800738c:	6892      	ldr	r2, [r2, #8]
 800738e:	811a      	strh	r2, [r3, #8]
 8007390:	68f2      	ldr	r2, [r6, #12]
 8007392:	6852      	ldr	r2, [r2, #4]
 8007394:	60da      	str	r2, [r3, #12]
 8007396:	69b2      	ldr	r2, [r6, #24]
 8007398:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 800739c:	6892      	ldr	r2, [r2, #8]
 800739e:	611a      	str	r2, [r3, #16]
 80073a0:	eb09 020c 	add.w	r2, r9, ip
 80073a4:	2a00      	cmp	r2, #0
 80073a6:	d1bf      	bne.n	8007328 <ai_platform_api_get_network_report+0x138>
 80073a8:	2200      	movs	r2, #0
 80073aa:	e7c8      	b.n	800733e <ai_platform_api_get_network_report+0x14e>
 80073ac:	2300      	movs	r3, #0
 80073ae:	8663      	strh	r3, [r4, #50]	; 0x32
 80073b0:	f105 0010 	add.w	r0, r5, #16
 80073b4:	2218      	movs	r2, #24
 80073b6:	2113      	movs	r1, #19
 80073b8:	f000 ff36 	bl	8008228 <core_set_error>
 80073bc:	2600      	movs	r6, #0
 80073be:	e74c      	b.n	800725a <ai_platform_api_get_network_report+0x6a>
 80073c0:	f105 0010 	add.w	r0, r5, #16
 80073c4:	2218      	movs	r2, #24
 80073c6:	2111      	movs	r1, #17
 80073c8:	f000 ff2e 	bl	8008228 <core_set_error>
 80073cc:	2600      	movs	r6, #0
 80073ce:	e744      	b.n	800725a <ai_platform_api_get_network_report+0x6a>
 80073d0:	2a00      	cmp	r2, #0
 80073d2:	d067      	beq.n	80074a4 <ai_platform_api_get_network_report+0x2b4>
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	6363      	str	r3, [r4, #52]	; 0x34
 80073da:	8622      	strh	r2, [r4, #48]	; 0x30
 80073dc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d9e4      	bls.n	80073ac <ai_platform_api_get_network_report+0x1bc>
 80073e2:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 80073e6:	2600      	movs	r6, #0
 80073e8:	f108 0a0c 	add.w	sl, r8, #12
 80073ec:	4631      	mov	r1, r6
 80073ee:	f04f 0b01 	mov.w	fp, #1
 80073f2:	b2b3      	uxth	r3, r6
 80073f4:	f1ba 0f00 	cmp.w	sl, #0
 80073f8:	d05f      	beq.n	80074ba <ai_platform_api_get_network_report+0x2ca>
 80073fa:	f8b8 000c 	ldrh.w	r0, [r8, #12]
 80073fe:	4286      	cmp	r6, r0
 8007400:	d25b      	bcs.n	80074ba <ai_platform_api_get_network_report+0x2ca>
 8007402:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8007406:	2800      	cmp	r0, #0
 8007408:	d057      	beq.n	80074ba <ai_platform_api_get_network_report+0x2ca>
 800740a:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800740e:	2f00      	cmp	r7, #0
 8007410:	d053      	beq.n	80074ba <ai_platform_api_get_network_report+0x2ca>
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8007418:	6818      	ldr	r0, [r3, #0]
 800741a:	6853      	ldr	r3, [r2, #4]
 800741c:	9101      	str	r1, [sp, #4]
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8007424:	f001 fce4 	bl	8008df0 <ai_array_to_buffer_fmt>
 8007428:	2318      	movs	r3, #24
 800742a:	fb03 fe06 	mul.w	lr, r3, r6
 800742e:	9b00      	ldr	r3, [sp, #0]
 8007430:	9901      	ldr	r1, [sp, #4]
 8007432:	f843 000e 	str.w	r0, [r3, lr]
 8007436:	eb03 0c0e 	add.w	ip, r3, lr
 800743a:	00f0      	lsls	r0, r6, #3
 800743c:	f8ac b004 	strh.w	fp, [ip, #4]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	f8ac 3006 	strh.w	r3, [ip, #6]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	f8ac 3008 	strh.w	r3, [ip, #8]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f8cc 300c 	str.w	r3, [ip, #12]
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f8cc 3010 	str.w	r3, [ip, #16]
 8007460:	eb09 0300 	add.w	r3, r9, r0
 8007464:	b33b      	cbz	r3, 80074b6 <ai_platform_api_get_network_report+0x2c6>
 8007466:	f849 1036 	str.w	r1, [r9, r6, lsl #3]
 800746a:	683f      	ldr	r7, [r7, #0]
 800746c:	605f      	str	r7, [r3, #4]
 800746e:	b317      	cbz	r7, 80074b6 <ai_platform_api_get_network_report+0x2c6>
 8007470:	887f      	ldrh	r7, [r7, #2]
 8007472:	b307      	cbz	r7, 80074b6 <ai_platform_api_get_network_report+0x2c6>
 8007474:	f849 b000 	str.w	fp, [r9, r0]
 8007478:	f8cc 3014 	str.w	r3, [ip, #20]
 800747c:	3601      	adds	r6, #1
 800747e:	e7b8      	b.n	80073f2 <ai_platform_api_get_network_report+0x202>
 8007480:	a1c00100 	.word	0xa1c00100
 8007484:	e0002000 	.word	0xe0002000
 8007488:	e0042000 	.word	0xe0042000
 800748c:	58024c08 	.word	0x58024c08
 8007490:	58024c00 	.word	0x58024c00
 8007494:	f407a5c2 	.word	0xf407a5c2
 8007498:	b5e8b5cd 	.word	0xb5e8b5cd
 800749c:	40023008 	.word	0x40023008
 80074a0:	40023000 	.word	0x40023000
 80074a4:	2600      	movs	r6, #0
 80074a6:	f105 0010 	add.w	r0, r5, #16
 80074aa:	8626      	strh	r6, [r4, #48]	; 0x30
 80074ac:	2218      	movs	r2, #24
 80074ae:	2112      	movs	r1, #18
 80074b0:	f000 feba 	bl	8008228 <core_set_error>
 80074b4:	e6d1      	b.n	800725a <ai_platform_api_get_network_report+0x6a>
 80074b6:	2300      	movs	r3, #0
 80074b8:	e7de      	b.n	8007478 <ai_platform_api_get_network_report+0x288>
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f43f af77 	beq.w	80073ae <ai_platform_api_get_network_report+0x1be>
 80074c0:	f8da 2008 	ldr.w	r2, [sl, #8]
 80074c4:	6852      	ldr	r2, [r2, #4]
 80074c6:	63a2      	str	r2, [r4, #56]	; 0x38
 80074c8:	8663      	strh	r3, [r4, #50]	; 0x32
 80074ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80074cc:	b16b      	cbz	r3, 80074ea <ai_platform_api_get_network_report+0x2fa>
 80074ce:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 80074d0:	b15b      	cbz	r3, 80074ea <ai_platform_api_get_network_report+0x2fa>
 80074d2:	6a2b      	ldr	r3, [r5, #32]
 80074d4:	b10b      	cbz	r3, 80074da <ai_platform_api_get_network_report+0x2ea>
 80074d6:	8beb      	ldrh	r3, [r5, #30]
 80074d8:	b97b      	cbnz	r3, 80074fa <ai_platform_api_get_network_report+0x30a>
 80074da:	f105 0010 	add.w	r0, r5, #16
 80074de:	2212      	movs	r2, #18
 80074e0:	2111      	movs	r1, #17
 80074e2:	f000 fea1 	bl	8008228 <core_set_error>
 80074e6:	2600      	movs	r6, #0
 80074e8:	e6b7      	b.n	800725a <ai_platform_api_get_network_report+0x6a>
 80074ea:	f105 0010 	add.w	r0, r5, #16
 80074ee:	2213      	movs	r2, #19
 80074f0:	2111      	movs	r1, #17
 80074f2:	f000 fe99 	bl	8008228 <core_set_error>
 80074f6:	2600      	movs	r6, #0
 80074f8:	e6af      	b.n	800725a <ai_platform_api_get_network_report+0x6a>
 80074fa:	686b      	ldr	r3, [r5, #4]
 80074fc:	4a83      	ldr	r2, [pc, #524]	; (800770c <ai_platform_api_get_network_report+0x51c>)
 80074fe:	6723      	str	r3, [r4, #112]	; 0x70
 8007500:	6813      	ldr	r3, [r2, #0]
 8007502:	f023 0301 	bic.w	r3, r3, #1
 8007506:	6013      	str	r3, [r2, #0]
 8007508:	f7ff fc18 	bl	8006d3c <_ai_platform_acquire_crc>
 800750c:	4b80      	ldr	r3, [pc, #512]	; (8007710 <ai_platform_api_get_network_report+0x520>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007518:	d00d      	beq.n	8007536 <ai_platform_api_get_network_report+0x346>
 800751a:	4b7e      	ldr	r3, [pc, #504]	; (8007714 <ai_platform_api_get_network_report+0x524>)
 800751c:	2201      	movs	r2, #1
 800751e:	601a      	str	r2, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	2a00      	cmp	r2, #0
 8007524:	d1fc      	bne.n	8007520 <ai_platform_api_get_network_report+0x330>
 8007526:	4b7c      	ldr	r3, [pc, #496]	; (8007718 <ai_platform_api_get_network_report+0x528>)
 8007528:	4a7c      	ldr	r2, [pc, #496]	; (800771c <ai_platform_api_get_network_report+0x52c>)
 800752a:	601a      	str	r2, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	4b7c      	ldr	r3, [pc, #496]	; (8007720 <ai_platform_api_get_network_report+0x530>)
 8007530:	429a      	cmp	r2, r3
 8007532:	d00e      	beq.n	8007552 <ai_platform_api_get_network_report+0x362>
 8007534:	e7fe      	b.n	8007534 <ai_platform_api_get_network_report+0x344>
 8007536:	4b7b      	ldr	r3, [pc, #492]	; (8007724 <ai_platform_api_get_network_report+0x534>)
 8007538:	2201      	movs	r2, #1
 800753a:	601a      	str	r2, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	2a00      	cmp	r2, #0
 8007540:	d1fc      	bne.n	800753c <ai_platform_api_get_network_report+0x34c>
 8007542:	4b79      	ldr	r3, [pc, #484]	; (8007728 <ai_platform_api_get_network_report+0x538>)
 8007544:	4a75      	ldr	r2, [pc, #468]	; (800771c <ai_platform_api_get_network_report+0x52c>)
 8007546:	601a      	str	r2, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	4b75      	ldr	r3, [pc, #468]	; (8007720 <ai_platform_api_get_network_report+0x530>)
 800754c:	429a      	cmp	r2, r3
 800754e:	d000      	beq.n	8007552 <ai_platform_api_get_network_report+0x362>
 8007550:	e7fe      	b.n	8007550 <ai_platform_api_get_network_report+0x360>
 8007552:	f7ff fbf5 	bl	8006d40 <_ai_platform_release_crc>
 8007556:	4a6d      	ldr	r2, [pc, #436]	; (800770c <ai_platform_api_get_network_report+0x51c>)
 8007558:	4b74      	ldr	r3, [pc, #464]	; (800772c <ai_platform_api_get_network_report+0x53c>)
 800755a:	6123      	str	r3, [r4, #16]
 800755c:	6813      	ldr	r3, [r2, #0]
 800755e:	f023 0301 	bic.w	r3, r3, #1
 8007562:	6013      	str	r3, [r2, #0]
 8007564:	f7ff fbea 	bl	8006d3c <_ai_platform_acquire_crc>
 8007568:	4b69      	ldr	r3, [pc, #420]	; (8007710 <ai_platform_api_get_network_report+0x520>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007574:	d00d      	beq.n	8007592 <ai_platform_api_get_network_report+0x3a2>
 8007576:	4b67      	ldr	r3, [pc, #412]	; (8007714 <ai_platform_api_get_network_report+0x524>)
 8007578:	2201      	movs	r2, #1
 800757a:	601a      	str	r2, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	2a00      	cmp	r2, #0
 8007580:	d1fc      	bne.n	800757c <ai_platform_api_get_network_report+0x38c>
 8007582:	4b65      	ldr	r3, [pc, #404]	; (8007718 <ai_platform_api_get_network_report+0x528>)
 8007584:	4a65      	ldr	r2, [pc, #404]	; (800771c <ai_platform_api_get_network_report+0x52c>)
 8007586:	601a      	str	r2, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	4b65      	ldr	r3, [pc, #404]	; (8007720 <ai_platform_api_get_network_report+0x530>)
 800758c:	429a      	cmp	r2, r3
 800758e:	d00e      	beq.n	80075ae <ai_platform_api_get_network_report+0x3be>
 8007590:	e7fe      	b.n	8007590 <ai_platform_api_get_network_report+0x3a0>
 8007592:	4b64      	ldr	r3, [pc, #400]	; (8007724 <ai_platform_api_get_network_report+0x534>)
 8007594:	2201      	movs	r2, #1
 8007596:	601a      	str	r2, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	2a00      	cmp	r2, #0
 800759c:	d1fc      	bne.n	8007598 <ai_platform_api_get_network_report+0x3a8>
 800759e:	4b62      	ldr	r3, [pc, #392]	; (8007728 <ai_platform_api_get_network_report+0x538>)
 80075a0:	4a5e      	ldr	r2, [pc, #376]	; (800771c <ai_platform_api_get_network_report+0x52c>)
 80075a2:	601a      	str	r2, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	4b5e      	ldr	r3, [pc, #376]	; (8007720 <ai_platform_api_get_network_report+0x530>)
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d000      	beq.n	80075ae <ai_platform_api_get_network_report+0x3be>
 80075ac:	e7fe      	b.n	80075ac <ai_platform_api_get_network_report+0x3bc>
 80075ae:	f7ff fbc7 	bl	8006d40 <_ai_platform_release_crc>
 80075b2:	4a56      	ldr	r2, [pc, #344]	; (800770c <ai_platform_api_get_network_report+0x51c>)
 80075b4:	2307      	movs	r3, #7
 80075b6:	6163      	str	r3, [r4, #20]
 80075b8:	6813      	ldr	r3, [r2, #0]
 80075ba:	f023 0301 	bic.w	r3, r3, #1
 80075be:	6013      	str	r3, [r2, #0]
 80075c0:	f7ff fbbc 	bl	8006d3c <_ai_platform_acquire_crc>
 80075c4:	4b52      	ldr	r3, [pc, #328]	; (8007710 <ai_platform_api_get_network_report+0x520>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075d0:	d00d      	beq.n	80075ee <ai_platform_api_get_network_report+0x3fe>
 80075d2:	4b50      	ldr	r3, [pc, #320]	; (8007714 <ai_platform_api_get_network_report+0x524>)
 80075d4:	2201      	movs	r2, #1
 80075d6:	601a      	str	r2, [r3, #0]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	2a00      	cmp	r2, #0
 80075dc:	d1fc      	bne.n	80075d8 <ai_platform_api_get_network_report+0x3e8>
 80075de:	4b4e      	ldr	r3, [pc, #312]	; (8007718 <ai_platform_api_get_network_report+0x528>)
 80075e0:	4a4e      	ldr	r2, [pc, #312]	; (800771c <ai_platform_api_get_network_report+0x52c>)
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	4b4e      	ldr	r3, [pc, #312]	; (8007720 <ai_platform_api_get_network_report+0x530>)
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d00e      	beq.n	800760a <ai_platform_api_get_network_report+0x41a>
 80075ec:	e7fe      	b.n	80075ec <ai_platform_api_get_network_report+0x3fc>
 80075ee:	4b4d      	ldr	r3, [pc, #308]	; (8007724 <ai_platform_api_get_network_report+0x534>)
 80075f0:	2201      	movs	r2, #1
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	2a00      	cmp	r2, #0
 80075f8:	d1fc      	bne.n	80075f4 <ai_platform_api_get_network_report+0x404>
 80075fa:	4b4b      	ldr	r3, [pc, #300]	; (8007728 <ai_platform_api_get_network_report+0x538>)
 80075fc:	4a47      	ldr	r2, [pc, #284]	; (800771c <ai_platform_api_get_network_report+0x52c>)
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	4b47      	ldr	r3, [pc, #284]	; (8007720 <ai_platform_api_get_network_report+0x530>)
 8007604:	429a      	cmp	r2, r3
 8007606:	d000      	beq.n	800760a <ai_platform_api_get_network_report+0x41a>
 8007608:	e7fe      	b.n	8007608 <ai_platform_api_get_network_report+0x418>
 800760a:	f7ff fb99 	bl	8006d40 <_ai_platform_release_crc>
 800760e:	4a3f      	ldr	r2, [pc, #252]	; (800770c <ai_platform_api_get_network_report+0x51c>)
 8007610:	f240 1301 	movw	r3, #257	; 0x101
 8007614:	6263      	str	r3, [r4, #36]	; 0x24
 8007616:	6813      	ldr	r3, [r2, #0]
 8007618:	f023 0301 	bic.w	r3, r3, #1
 800761c:	6013      	str	r3, [r2, #0]
 800761e:	f7ff fb8d 	bl	8006d3c <_ai_platform_acquire_crc>
 8007622:	4b3b      	ldr	r3, [pc, #236]	; (8007710 <ai_platform_api_get_network_report+0x520>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800762a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800762e:	d00d      	beq.n	800764c <ai_platform_api_get_network_report+0x45c>
 8007630:	4b38      	ldr	r3, [pc, #224]	; (8007714 <ai_platform_api_get_network_report+0x524>)
 8007632:	2201      	movs	r2, #1
 8007634:	601a      	str	r2, [r3, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	2a00      	cmp	r2, #0
 800763a:	d1fc      	bne.n	8007636 <ai_platform_api_get_network_report+0x446>
 800763c:	4b36      	ldr	r3, [pc, #216]	; (8007718 <ai_platform_api_get_network_report+0x528>)
 800763e:	4a37      	ldr	r2, [pc, #220]	; (800771c <ai_platform_api_get_network_report+0x52c>)
 8007640:	601a      	str	r2, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	4b36      	ldr	r3, [pc, #216]	; (8007720 <ai_platform_api_get_network_report+0x530>)
 8007646:	429a      	cmp	r2, r3
 8007648:	d00e      	beq.n	8007668 <ai_platform_api_get_network_report+0x478>
 800764a:	e7fe      	b.n	800764a <ai_platform_api_get_network_report+0x45a>
 800764c:	4b35      	ldr	r3, [pc, #212]	; (8007724 <ai_platform_api_get_network_report+0x534>)
 800764e:	2201      	movs	r2, #1
 8007650:	601a      	str	r2, [r3, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	2a00      	cmp	r2, #0
 8007656:	d1fc      	bne.n	8007652 <ai_platform_api_get_network_report+0x462>
 8007658:	4b33      	ldr	r3, [pc, #204]	; (8007728 <ai_platform_api_get_network_report+0x538>)
 800765a:	4a30      	ldr	r2, [pc, #192]	; (800771c <ai_platform_api_get_network_report+0x52c>)
 800765c:	601a      	str	r2, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	4b2f      	ldr	r3, [pc, #188]	; (8007720 <ai_platform_api_get_network_report+0x530>)
 8007662:	429a      	cmp	r2, r3
 8007664:	d000      	beq.n	8007668 <ai_platform_api_get_network_report+0x478>
 8007666:	e7fe      	b.n	8007666 <ai_platform_api_get_network_report+0x476>
 8007668:	f7ff fb6a 	bl	8006d40 <_ai_platform_release_crc>
 800766c:	f240 4301 	movw	r3, #1025	; 0x401
 8007670:	62a3      	str	r3, [r4, #40]	; 0x28
 8007672:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007674:	4a2e      	ldr	r2, [pc, #184]	; (8007730 <ai_platform_api_get_network_report+0x540>)
 8007676:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007678:	0e18      	lsrs	r0, r3, #24
 800767a:	f884 0020 	strb.w	r0, [r4, #32]
 800767e:	0c18      	lsrs	r0, r3, #16
 8007680:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
 8007684:	0a1b      	lsrs	r3, r3, #8
 8007686:	2000      	movs	r0, #0
 8007688:	4291      	cmp	r1, r2
 800768a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 800768e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
 8007692:	d019      	beq.n	80076c8 <ai_platform_api_get_network_report+0x4d8>
 8007694:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8007696:	b386      	cbz	r6, 80076fa <ai_platform_api_get_network_report+0x50a>
 8007698:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800769a:	b373      	cbz	r3, 80076fa <ai_platform_api_get_network_report+0x50a>
 800769c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800769e:	f104 0754 	add.w	r7, r4, #84	; 0x54
 80076a2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80076a4:	e896 0003 	ldmia.w	r6, {r0, r1}
 80076a8:	e887 0003 	stmia.w	r7, {r0, r1}
 80076ac:	6a2b      	ldr	r3, [r5, #32]
 80076ae:	b1db      	cbz	r3, 80076e8 <ai_platform_api_get_network_report+0x4f8>
 80076b0:	8bea      	ldrh	r2, [r5, #30]
 80076b2:	b1ca      	cbz	r2, 80076e8 <ai_platform_api_get_network_report+0x4f8>
 80076b4:	461d      	mov	r5, r3
 80076b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80076b8:	343c      	adds	r4, #60	; 0x3c
 80076ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80076c0:	2601      	movs	r6, #1
 80076c2:	e884 0003 	stmia.w	r4, {r0, r1}
 80076c6:	e5c8      	b.n	800725a <ai_platform_api_get_network_report+0x6a>
 80076c8:	f105 0324 	add.w	r3, r5, #36	; 0x24
 80076cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80076d0:	f104 0348 	add.w	r3, r4, #72	; 0x48
 80076d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80076d8:	351c      	adds	r5, #28
 80076da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80076de:	3440      	adds	r4, #64	; 0x40
 80076e0:	e884 0003 	stmia.w	r4, {r0, r1}
 80076e4:	2601      	movs	r6, #1
 80076e6:	e5b8      	b.n	800725a <ai_platform_api_get_network_report+0x6a>
 80076e8:	2500      	movs	r5, #0
 80076ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80076ec:	343c      	adds	r4, #60	; 0x3c
 80076ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80076f4:	e884 0003 	stmia.w	r4, {r0, r1}
 80076f8:	deff      	udf	#255	; 0xff
 80076fa:	2500      	movs	r5, #0
 80076fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80076fe:	3454      	adds	r4, #84	; 0x54
 8007700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007702:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007706:	e884 0003 	stmia.w	r4, {r0, r1}
 800770a:	deff      	udf	#255	; 0xff
 800770c:	e0002000 	.word	0xe0002000
 8007710:	e0042000 	.word	0xe0042000
 8007714:	58024c08 	.word	0x58024c08
 8007718:	58024c00 	.word	0x58024c00
 800771c:	f407a5c2 	.word	0xf407a5c2
 8007720:	b5e8b5cd 	.word	0xb5e8b5cd
 8007724:	40023008 	.word	0x40023008
 8007728:	40023000 	.word	0x40023000
 800772c:	0800b854 	.word	0x0800b854
 8007730:	a1facade 	.word	0xa1facade

08007734 <ai_platform_network_create>:
 8007734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007738:	b082      	sub	sp, #8
 800773a:	4607      	mov	r7, r0
 800773c:	4616      	mov	r6, r2
 800773e:	461d      	mov	r5, r3
 8007740:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8007744:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 8007748:	f7ff faf8 	bl	8006d3c <_ai_platform_acquire_crc>
 800774c:	b178      	cbz	r0, 800776e <ai_platform_network_create+0x3a>
 800774e:	4b5a      	ldr	r3, [pc, #360]	; (80078b8 <ai_platform_network_create+0x184>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800775a:	4602      	mov	r2, r0
 800775c:	d00c      	beq.n	8007778 <ai_platform_network_create+0x44>
 800775e:	4b57      	ldr	r3, [pc, #348]	; (80078bc <ai_platform_network_create+0x188>)
 8007760:	2118      	movs	r1, #24
 8007762:	6019      	str	r1, [r3, #0]
 8007764:	6819      	ldr	r1, [r3, #0]
 8007766:	2918      	cmp	r1, #24
 8007768:	d034      	beq.n	80077d4 <ai_platform_network_create+0xa0>
 800776a:	f7ff fae9 	bl	8006d40 <_ai_platform_release_crc>
 800776e:	f241 0033 	movw	r0, #4147	; 0x1033
 8007772:	b002      	add	sp, #8
 8007774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007778:	4b51      	ldr	r3, [pc, #324]	; (80078c0 <ai_platform_network_create+0x18c>)
 800777a:	2101      	movs	r1, #1
 800777c:	6019      	str	r1, [r3, #0]
 800777e:	2114      	movs	r1, #20
 8007780:	e001      	b.n	8007786 <ai_platform_network_create+0x52>
 8007782:	3901      	subs	r1, #1
 8007784:	d002      	beq.n	800778c <ai_platform_network_create+0x58>
 8007786:	6818      	ldr	r0, [r3, #0]
 8007788:	2800      	cmp	r0, #0
 800778a:	d1fa      	bne.n	8007782 <ai_platform_network_create+0x4e>
 800778c:	4b4c      	ldr	r3, [pc, #304]	; (80078c0 <ai_platform_network_create+0x18c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	b9f3      	cbnz	r3, 80077d0 <ai_platform_network_create+0x9c>
 8007792:	4610      	mov	r0, r2
 8007794:	f7ff fad4 	bl	8006d40 <_ai_platform_release_crc>
 8007798:	4a4a      	ldr	r2, [pc, #296]	; (80078c4 <ai_platform_network_create+0x190>)
 800779a:	6813      	ldr	r3, [r2, #0]
 800779c:	f023 0301 	bic.w	r3, r3, #1
 80077a0:	6013      	str	r3, [r2, #0]
 80077a2:	f7ff facb 	bl	8006d3c <_ai_platform_acquire_crc>
 80077a6:	4b44      	ldr	r3, [pc, #272]	; (80078b8 <ai_platform_network_create+0x184>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077b2:	d015      	beq.n	80077e0 <ai_platform_network_create+0xac>
 80077b4:	4b41      	ldr	r3, [pc, #260]	; (80078bc <ai_platform_network_create+0x188>)
 80077b6:	2201      	movs	r2, #1
 80077b8:	601a      	str	r2, [r3, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	2a00      	cmp	r2, #0
 80077be:	d1fc      	bne.n	80077ba <ai_platform_network_create+0x86>
 80077c0:	4b41      	ldr	r3, [pc, #260]	; (80078c8 <ai_platform_network_create+0x194>)
 80077c2:	4a42      	ldr	r2, [pc, #264]	; (80078cc <ai_platform_network_create+0x198>)
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	4b41      	ldr	r3, [pc, #260]	; (80078d0 <ai_platform_network_create+0x19c>)
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d016      	beq.n	80077fc <ai_platform_network_create+0xc8>
 80077ce:	e7fe      	b.n	80077ce <ai_platform_network_create+0x9a>
 80077d0:	4610      	mov	r0, r2
 80077d2:	e7ca      	b.n	800776a <ai_platform_network_create+0x36>
 80077d4:	2101      	movs	r1, #1
 80077d6:	6019      	str	r1, [r3, #0]
 80077d8:	6819      	ldr	r1, [r3, #0]
 80077da:	2900      	cmp	r1, #0
 80077dc:	d1fc      	bne.n	80077d8 <ai_platform_network_create+0xa4>
 80077de:	e7d8      	b.n	8007792 <ai_platform_network_create+0x5e>
 80077e0:	4b37      	ldr	r3, [pc, #220]	; (80078c0 <ai_platform_network_create+0x18c>)
 80077e2:	2201      	movs	r2, #1
 80077e4:	601a      	str	r2, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	2a00      	cmp	r2, #0
 80077ea:	d1fc      	bne.n	80077e6 <ai_platform_network_create+0xb2>
 80077ec:	4b39      	ldr	r3, [pc, #228]	; (80078d4 <ai_platform_network_create+0x1a0>)
 80077ee:	4a37      	ldr	r2, [pc, #220]	; (80078cc <ai_platform_network_create+0x198>)
 80077f0:	601a      	str	r2, [r3, #0]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	4b36      	ldr	r3, [pc, #216]	; (80078d0 <ai_platform_network_create+0x19c>)
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d000      	beq.n	80077fc <ai_platform_network_create+0xc8>
 80077fa:	e7fe      	b.n	80077fa <ai_platform_network_create+0xc6>
 80077fc:	f7ff faa0 	bl	8006d40 <_ai_platform_release_crc>
 8007800:	b1af      	cbz	r7, 800782e <ai_platform_network_create+0xfa>
 8007802:	4b35      	ldr	r3, [pc, #212]	; (80078d8 <ai_platform_network_create+0x1a4>)
 8007804:	6033      	str	r3, [r6, #0]
 8007806:	603e      	str	r6, [r7, #0]
 8007808:	f000 fd06 	bl	8008218 <core_init>
 800780c:	b990      	cbnz	r0, 8007834 <ai_platform_network_create+0x100>
 800780e:	062d      	lsls	r5, r5, #24
 8007810:	0424      	lsls	r4, r4, #16
 8007812:	2230      	movs	r2, #48	; 0x30
 8007814:	2300      	movs	r3, #0
 8007816:	603b      	str	r3, [r7, #0]
 8007818:	2110      	movs	r1, #16
 800781a:	ea44 2308 	orr.w	r3, r4, r8, lsl #8
 800781e:	2000      	movs	r0, #0
 8007820:	432b      	orrs	r3, r5
 8007822:	f362 0007 	bfi	r0, r2, #0, #8
 8007826:	6473      	str	r3, [r6, #68]	; 0x44
 8007828:	f361 201f 	bfi	r0, r1, #8, #24
 800782c:	e7a1      	b.n	8007772 <ai_platform_network_create+0x3e>
 800782e:	f241 0010 	movw	r0, #4112	; 0x1010
 8007832:	e79e      	b.n	8007772 <ai_platform_network_create+0x3e>
 8007834:	4a23      	ldr	r2, [pc, #140]	; (80078c4 <ai_platform_network_create+0x190>)
 8007836:	6813      	ldr	r3, [r2, #0]
 8007838:	f023 0301 	bic.w	r3, r3, #1
 800783c:	6013      	str	r3, [r2, #0]
 800783e:	f7ff fa7d 	bl	8006d3c <_ai_platform_acquire_crc>
 8007842:	4b1d      	ldr	r3, [pc, #116]	; (80078b8 <ai_platform_network_create+0x184>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800784a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800784e:	d00d      	beq.n	800786c <ai_platform_network_create+0x138>
 8007850:	4b1a      	ldr	r3, [pc, #104]	; (80078bc <ai_platform_network_create+0x188>)
 8007852:	2201      	movs	r2, #1
 8007854:	601a      	str	r2, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	2a00      	cmp	r2, #0
 800785a:	d1fc      	bne.n	8007856 <ai_platform_network_create+0x122>
 800785c:	4b1a      	ldr	r3, [pc, #104]	; (80078c8 <ai_platform_network_create+0x194>)
 800785e:	4a1b      	ldr	r2, [pc, #108]	; (80078cc <ai_platform_network_create+0x198>)
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	4b1a      	ldr	r3, [pc, #104]	; (80078d0 <ai_platform_network_create+0x19c>)
 8007866:	429a      	cmp	r2, r3
 8007868:	d00e      	beq.n	8007888 <ai_platform_network_create+0x154>
 800786a:	e7fe      	b.n	800786a <ai_platform_network_create+0x136>
 800786c:	4b14      	ldr	r3, [pc, #80]	; (80078c0 <ai_platform_network_create+0x18c>)
 800786e:	2201      	movs	r2, #1
 8007870:	601a      	str	r2, [r3, #0]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	2a00      	cmp	r2, #0
 8007876:	d1fc      	bne.n	8007872 <ai_platform_network_create+0x13e>
 8007878:	4b16      	ldr	r3, [pc, #88]	; (80078d4 <ai_platform_network_create+0x1a0>)
 800787a:	4a14      	ldr	r2, [pc, #80]	; (80078cc <ai_platform_network_create+0x198>)
 800787c:	601a      	str	r2, [r3, #0]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	4b13      	ldr	r3, [pc, #76]	; (80078d0 <ai_platform_network_create+0x19c>)
 8007882:	429a      	cmp	r2, r3
 8007884:	d000      	beq.n	8007888 <ai_platform_network_create+0x154>
 8007886:	e7fe      	b.n	8007886 <ai_platform_network_create+0x152>
 8007888:	062d      	lsls	r5, r5, #24
 800788a:	0424      	lsls	r4, r4, #16
 800788c:	f7ff fa58 	bl	8006d40 <_ai_platform_release_crc>
 8007890:	ea45 0304 	orr.w	r3, r5, r4
 8007894:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8007898:	d001      	beq.n	800789e <ai_platform_network_create+0x16a>
 800789a:	2201      	movs	r2, #1
 800789c:	e7ba      	b.n	8007814 <ai_platform_network_create+0xe0>
 800789e:	a802      	add	r0, sp, #8
 80078a0:	4b0e      	ldr	r3, [pc, #56]	; (80078dc <ai_platform_network_create+0x1a8>)
 80078a2:	f840 3d04 	str.w	r3, [r0, #-4]!
 80078a6:	f001 f9e7 	bl	8008c78 <ai_check_custom_types>
 80078aa:	b110      	cbz	r0, 80078b2 <ai_platform_network_create+0x17e>
 80078ac:	2100      	movs	r1, #0
 80078ae:	460a      	mov	r2, r1
 80078b0:	e7b3      	b.n	800781a <ai_platform_network_create+0xe6>
 80078b2:	2202      	movs	r2, #2
 80078b4:	e7ae      	b.n	8007814 <ai_platform_network_create+0xe0>
 80078b6:	bf00      	nop
 80078b8:	e0042000 	.word	0xe0042000
 80078bc:	58024c08 	.word	0x58024c08
 80078c0:	40023008 	.word	0x40023008
 80078c4:	e0002000 	.word	0xe0002000
 80078c8:	58024c00 	.word	0x58024c00
 80078cc:	f407a5c2 	.word	0xf407a5c2
 80078d0:	b5e8b5cd 	.word	0xb5e8b5cd
 80078d4:	40023000 	.word	0x40023000
 80078d8:	a1c00100 	.word	0xa1c00100
 80078dc:	84048403 	.word	0x84048403

080078e0 <ai_platform_network_destroy>:
 80078e0:	b510      	push	{r4, lr}
 80078e2:	4604      	mov	r4, r0
 80078e4:	b118      	cbz	r0, 80078ee <ai_platform_network_destroy+0xe>
 80078e6:	4b31      	ldr	r3, [pc, #196]	; (80079ac <ai_platform_network_destroy+0xcc>)
 80078e8:	6802      	ldr	r2, [r0, #0]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d02d      	beq.n	800794a <ai_platform_network_destroy+0x6a>
 80078ee:	4a30      	ldr	r2, [pc, #192]	; (80079b0 <ai_platform_network_destroy+0xd0>)
 80078f0:	6813      	ldr	r3, [r2, #0]
 80078f2:	f023 0301 	bic.w	r3, r3, #1
 80078f6:	6013      	str	r3, [r2, #0]
 80078f8:	f7ff fa20 	bl	8006d3c <_ai_platform_acquire_crc>
 80078fc:	4b2d      	ldr	r3, [pc, #180]	; (80079b4 <ai_platform_network_destroy+0xd4>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007908:	d00d      	beq.n	8007926 <ai_platform_network_destroy+0x46>
 800790a:	4b2b      	ldr	r3, [pc, #172]	; (80079b8 <ai_platform_network_destroy+0xd8>)
 800790c:	2201      	movs	r2, #1
 800790e:	601a      	str	r2, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	2a00      	cmp	r2, #0
 8007914:	d1fc      	bne.n	8007910 <ai_platform_network_destroy+0x30>
 8007916:	4b29      	ldr	r3, [pc, #164]	; (80079bc <ai_platform_network_destroy+0xdc>)
 8007918:	4a29      	ldr	r2, [pc, #164]	; (80079c0 <ai_platform_network_destroy+0xe0>)
 800791a:	601a      	str	r2, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	4b29      	ldr	r3, [pc, #164]	; (80079c4 <ai_platform_network_destroy+0xe4>)
 8007920:	429a      	cmp	r2, r3
 8007922:	d00e      	beq.n	8007942 <ai_platform_network_destroy+0x62>
 8007924:	e7fe      	b.n	8007924 <ai_platform_network_destroy+0x44>
 8007926:	4b28      	ldr	r3, [pc, #160]	; (80079c8 <ai_platform_network_destroy+0xe8>)
 8007928:	2201      	movs	r2, #1
 800792a:	601a      	str	r2, [r3, #0]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	2a00      	cmp	r2, #0
 8007930:	d1fc      	bne.n	800792c <ai_platform_network_destroy+0x4c>
 8007932:	4b26      	ldr	r3, [pc, #152]	; (80079cc <ai_platform_network_destroy+0xec>)
 8007934:	4a22      	ldr	r2, [pc, #136]	; (80079c0 <ai_platform_network_destroy+0xe0>)
 8007936:	601a      	str	r2, [r3, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	4b22      	ldr	r3, [pc, #136]	; (80079c4 <ai_platform_network_destroy+0xe4>)
 800793c:	429a      	cmp	r2, r3
 800793e:	d000      	beq.n	8007942 <ai_platform_network_destroy+0x62>
 8007940:	e7fe      	b.n	8007940 <ai_platform_network_destroy+0x60>
 8007942:	f7ff f9fd 	bl	8006d40 <_ai_platform_release_crc>
 8007946:	4620      	mov	r0, r4
 8007948:	bd10      	pop	{r4, pc}
 800794a:	4a19      	ldr	r2, [pc, #100]	; (80079b0 <ai_platform_network_destroy+0xd0>)
 800794c:	6813      	ldr	r3, [r2, #0]
 800794e:	f023 0301 	bic.w	r3, r3, #1
 8007952:	6013      	str	r3, [r2, #0]
 8007954:	f7ff f9f2 	bl	8006d3c <_ai_platform_acquire_crc>
 8007958:	4b16      	ldr	r3, [pc, #88]	; (80079b4 <ai_platform_network_destroy+0xd4>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007964:	d00d      	beq.n	8007982 <ai_platform_network_destroy+0xa2>
 8007966:	4b14      	ldr	r3, [pc, #80]	; (80079b8 <ai_platform_network_destroy+0xd8>)
 8007968:	2201      	movs	r2, #1
 800796a:	601a      	str	r2, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	2a00      	cmp	r2, #0
 8007970:	d1fc      	bne.n	800796c <ai_platform_network_destroy+0x8c>
 8007972:	4b12      	ldr	r3, [pc, #72]	; (80079bc <ai_platform_network_destroy+0xdc>)
 8007974:	4a12      	ldr	r2, [pc, #72]	; (80079c0 <ai_platform_network_destroy+0xe0>)
 8007976:	601a      	str	r2, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	4b12      	ldr	r3, [pc, #72]	; (80079c4 <ai_platform_network_destroy+0xe4>)
 800797c:	429a      	cmp	r2, r3
 800797e:	d00e      	beq.n	800799e <ai_platform_network_destroy+0xbe>
 8007980:	e7fe      	b.n	8007980 <ai_platform_network_destroy+0xa0>
 8007982:	4b11      	ldr	r3, [pc, #68]	; (80079c8 <ai_platform_network_destroy+0xe8>)
 8007984:	2201      	movs	r2, #1
 8007986:	601a      	str	r2, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	2a00      	cmp	r2, #0
 800798c:	d1fc      	bne.n	8007988 <ai_platform_network_destroy+0xa8>
 800798e:	4b0f      	ldr	r3, [pc, #60]	; (80079cc <ai_platform_network_destroy+0xec>)
 8007990:	4a0b      	ldr	r2, [pc, #44]	; (80079c0 <ai_platform_network_destroy+0xe0>)
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	4b0b      	ldr	r3, [pc, #44]	; (80079c4 <ai_platform_network_destroy+0xe4>)
 8007998:	429a      	cmp	r2, r3
 800799a:	d000      	beq.n	800799e <ai_platform_network_destroy+0xbe>
 800799c:	e7fe      	b.n	800799c <ai_platform_network_destroy+0xbc>
 800799e:	f7ff f9cf 	bl	8006d40 <_ai_platform_release_crc>
 80079a2:	4620      	mov	r0, r4
 80079a4:	f001 fa0c 	bl	8008dc0 <ai_layers_destroy_all>
 80079a8:	2400      	movs	r4, #0
 80079aa:	e7cc      	b.n	8007946 <ai_platform_network_destroy+0x66>
 80079ac:	a1c00100 	.word	0xa1c00100
 80079b0:	e0002000 	.word	0xe0002000
 80079b4:	e0042000 	.word	0xe0042000
 80079b8:	58024c08 	.word	0x58024c08
 80079bc:	58024c00 	.word	0x58024c00
 80079c0:	f407a5c2 	.word	0xf407a5c2
 80079c4:	b5e8b5cd 	.word	0xb5e8b5cd
 80079c8:	40023008 	.word	0x40023008
 80079cc:	40023000 	.word	0x40023000

080079d0 <ai_platform_network_init>:
 80079d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079d4:	2800      	cmp	r0, #0
 80079d6:	d04d      	beq.n	8007a74 <ai_platform_network_init+0xa4>
 80079d8:	4b7c      	ldr	r3, [pc, #496]	; (8007bcc <ai_platform_network_init+0x1fc>)
 80079da:	6802      	ldr	r2, [r0, #0]
 80079dc:	429a      	cmp	r2, r3
 80079de:	4604      	mov	r4, r0
 80079e0:	d148      	bne.n	8007a74 <ai_platform_network_init+0xa4>
 80079e2:	4a7b      	ldr	r2, [pc, #492]	; (8007bd0 <ai_platform_network_init+0x200>)
 80079e4:	6813      	ldr	r3, [r2, #0]
 80079e6:	f023 0301 	bic.w	r3, r3, #1
 80079ea:	6013      	str	r3, [r2, #0]
 80079ec:	460d      	mov	r5, r1
 80079ee:	f7ff f9a5 	bl	8006d3c <_ai_platform_acquire_crc>
 80079f2:	4b78      	ldr	r3, [pc, #480]	; (8007bd4 <ai_platform_network_init+0x204>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079fe:	d00d      	beq.n	8007a1c <ai_platform_network_init+0x4c>
 8007a00:	4b75      	ldr	r3, [pc, #468]	; (8007bd8 <ai_platform_network_init+0x208>)
 8007a02:	2201      	movs	r2, #1
 8007a04:	601a      	str	r2, [r3, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	2a00      	cmp	r2, #0
 8007a0a:	d1fc      	bne.n	8007a06 <ai_platform_network_init+0x36>
 8007a0c:	4b73      	ldr	r3, [pc, #460]	; (8007bdc <ai_platform_network_init+0x20c>)
 8007a0e:	4a74      	ldr	r2, [pc, #464]	; (8007be0 <ai_platform_network_init+0x210>)
 8007a10:	601a      	str	r2, [r3, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	4b73      	ldr	r3, [pc, #460]	; (8007be4 <ai_platform_network_init+0x214>)
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d00d      	beq.n	8007a36 <ai_platform_network_init+0x66>
 8007a1a:	e7fe      	b.n	8007a1a <ai_platform_network_init+0x4a>
 8007a1c:	4b72      	ldr	r3, [pc, #456]	; (8007be8 <ai_platform_network_init+0x218>)
 8007a1e:	2201      	movs	r2, #1
 8007a20:	601a      	str	r2, [r3, #0]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	2a00      	cmp	r2, #0
 8007a26:	d1fc      	bne.n	8007a22 <ai_platform_network_init+0x52>
 8007a28:	4b70      	ldr	r3, [pc, #448]	; (8007bec <ai_platform_network_init+0x21c>)
 8007a2a:	4a6d      	ldr	r2, [pc, #436]	; (8007be0 <ai_platform_network_init+0x210>)
 8007a2c:	601a      	str	r2, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	4b6c      	ldr	r3, [pc, #432]	; (8007be4 <ai_platform_network_init+0x214>)
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d11d      	bne.n	8007a72 <ai_platform_network_init+0xa2>
 8007a36:	f7ff f983 	bl	8006d40 <_ai_platform_release_crc>
 8007a3a:	2d00      	cmp	r5, #0
 8007a3c:	d076      	beq.n	8007b2c <ai_platform_network_init+0x15c>
 8007a3e:	4b6c      	ldr	r3, [pc, #432]	; (8007bf0 <ai_platform_network_init+0x220>)
 8007a40:	682a      	ldr	r2, [r5, #0]
 8007a42:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d030      	beq.n	8007aac <ai_platform_network_init+0xdc>
 8007a4a:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8007a4c:	46a9      	mov	r9, r5
 8007a4e:	f105 0118 	add.w	r1, r5, #24
 8007a52:	2e00      	cmp	r6, #0
 8007a54:	f000 8095 	beq.w	8007b82 <ai_platform_network_init+0x1b2>
 8007a58:	f1bc 0f00 	cmp.w	ip, #0
 8007a5c:	f000 80a4 	beq.w	8007ba8 <ai_platform_network_init+0x1d8>
 8007a60:	f8b4 801e 	ldrh.w	r8, [r4, #30]
 8007a64:	f1b8 0f01 	cmp.w	r8, #1
 8007a68:	d16a      	bne.n	8007b40 <ai_platform_network_init+0x170>
 8007a6a:	2700      	movs	r7, #0
 8007a6c:	468c      	mov	ip, r1
 8007a6e:	83a7      	strh	r7, [r4, #28]
 8007a70:	e028      	b.n	8007ac4 <ai_platform_network_init+0xf4>
 8007a72:	e7fe      	b.n	8007a72 <ai_platform_network_init+0xa2>
 8007a74:	4a56      	ldr	r2, [pc, #344]	; (8007bd0 <ai_platform_network_init+0x200>)
 8007a76:	6813      	ldr	r3, [r2, #0]
 8007a78:	f023 0301 	bic.w	r3, r3, #1
 8007a7c:	6013      	str	r3, [r2, #0]
 8007a7e:	f7ff f95d 	bl	8006d3c <_ai_platform_acquire_crc>
 8007a82:	4b54      	ldr	r3, [pc, #336]	; (8007bd4 <ai_platform_network_init+0x204>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a8e:	d067      	beq.n	8007b60 <ai_platform_network_init+0x190>
 8007a90:	4b51      	ldr	r3, [pc, #324]	; (8007bd8 <ai_platform_network_init+0x208>)
 8007a92:	2201      	movs	r2, #1
 8007a94:	601a      	str	r2, [r3, #0]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	2a00      	cmp	r2, #0
 8007a9a:	d1fc      	bne.n	8007a96 <ai_platform_network_init+0xc6>
 8007a9c:	4b4f      	ldr	r3, [pc, #316]	; (8007bdc <ai_platform_network_init+0x20c>)
 8007a9e:	4a50      	ldr	r2, [pc, #320]	; (8007be0 <ai_platform_network_init+0x210>)
 8007aa0:	601a      	str	r2, [r3, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	4b4f      	ldr	r3, [pc, #316]	; (8007be4 <ai_platform_network_init+0x214>)
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d067      	beq.n	8007b7a <ai_platform_network_init+0x1aa>
 8007aaa:	e7fe      	b.n	8007aaa <ai_platform_network_init+0xda>
 8007aac:	8be1      	ldrh	r1, [r4, #30]
 8007aae:	88eb      	ldrh	r3, [r5, #6]
 8007ab0:	89af      	ldrh	r7, [r5, #12]
 8007ab2:	f8b5 800e 	ldrh.w	r8, [r5, #14]
 8007ab6:	88aa      	ldrh	r2, [r5, #4]
 8007ab8:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8007abc:	428b      	cmp	r3, r1
 8007abe:	d13f      	bne.n	8007b40 <ai_platform_network_init+0x170>
 8007ac0:	83a2      	strh	r2, [r4, #28]
 8007ac2:	b19b      	cbz	r3, 8007aec <ai_platform_network_init+0x11c>
 8007ac4:	f04f 0e00 	mov.w	lr, #0
 8007ac8:	46f2      	mov	sl, lr
 8007aca:	eb09 060e 	add.w	r6, r9, lr
 8007ace:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007ad0:	6a25      	ldr	r5, [r4, #32]
 8007ad2:	4475      	add	r5, lr
 8007ad4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007ad6:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007ada:	e885 0003 	stmia.w	r5, {r0, r1}
 8007ade:	8be3      	ldrh	r3, [r4, #30]
 8007ae0:	f10a 0a01 	add.w	sl, sl, #1
 8007ae4:	459a      	cmp	sl, r3
 8007ae6:	f10e 0e18 	add.w	lr, lr, #24
 8007aea:	d3ee      	bcc.n	8007aca <ai_platform_network_init+0xfa>
 8007aec:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007aee:	4598      	cmp	r8, r3
 8007af0:	d12e      	bne.n	8007b50 <ai_platform_network_init+0x180>
 8007af2:	84a7      	strh	r7, [r4, #36]	; 0x24
 8007af4:	f1b8 0f00 	cmp.w	r8, #0
 8007af8:	d012      	beq.n	8007b20 <ai_platform_network_init+0x150>
 8007afa:	2700      	movs	r7, #0
 8007afc:	46be      	mov	lr, r7
 8007afe:	eb0c 0607 	add.w	r6, ip, r7
 8007b02:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007b04:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007b06:	443d      	add	r5, r7
 8007b08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b0a:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007b0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8007b12:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007b14:	f10e 0e01 	add.w	lr, lr, #1
 8007b18:	459e      	cmp	lr, r3
 8007b1a:	f107 0718 	add.w	r7, r7, #24
 8007b1e:	d3ee      	bcc.n	8007afe <ai_platform_network_init+0x12e>
 8007b20:	2303      	movs	r3, #3
 8007b22:	60e3      	str	r3, [r4, #12]
 8007b24:	4620      	mov	r0, r4
 8007b26:	f001 f8d1 	bl	8008ccc <ai_layers_init_all>
 8007b2a:	e006      	b.n	8007b3a <ai_platform_network_init+0x16a>
 8007b2c:	f104 0010 	add.w	r0, r4, #16
 8007b30:	2211      	movs	r2, #17
 8007b32:	2110      	movs	r1, #16
 8007b34:	462c      	mov	r4, r5
 8007b36:	f000 fb77 	bl	8008228 <core_set_error>
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b40:	f104 0010 	add.w	r0, r4, #16
 8007b44:	2212      	movs	r2, #18
 8007b46:	2116      	movs	r1, #22
 8007b48:	f000 fb6e 	bl	8008228 <core_set_error>
 8007b4c:	2400      	movs	r4, #0
 8007b4e:	e7f4      	b.n	8007b3a <ai_platform_network_init+0x16a>
 8007b50:	f104 0010 	add.w	r0, r4, #16
 8007b54:	2213      	movs	r2, #19
 8007b56:	2116      	movs	r1, #22
 8007b58:	f000 fb66 	bl	8008228 <core_set_error>
 8007b5c:	2400      	movs	r4, #0
 8007b5e:	e7ec      	b.n	8007b3a <ai_platform_network_init+0x16a>
 8007b60:	4b21      	ldr	r3, [pc, #132]	; (8007be8 <ai_platform_network_init+0x218>)
 8007b62:	2201      	movs	r2, #1
 8007b64:	601a      	str	r2, [r3, #0]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	2a00      	cmp	r2, #0
 8007b6a:	d1fc      	bne.n	8007b66 <ai_platform_network_init+0x196>
 8007b6c:	4b1f      	ldr	r3, [pc, #124]	; (8007bec <ai_platform_network_init+0x21c>)
 8007b6e:	4a1c      	ldr	r2, [pc, #112]	; (8007be0 <ai_platform_network_init+0x210>)
 8007b70:	601a      	str	r2, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	4b1b      	ldr	r3, [pc, #108]	; (8007be4 <ai_platform_network_init+0x214>)
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d115      	bne.n	8007ba6 <ai_platform_network_init+0x1d6>
 8007b7a:	f7ff f8e1 	bl	8006d40 <_ai_platform_release_crc>
 8007b7e:	2400      	movs	r4, #0
 8007b80:	e7db      	b.n	8007b3a <ai_platform_network_init+0x16a>
 8007b82:	8c28      	ldrh	r0, [r5, #32]
 8007b84:	8bea      	ldrh	r2, [r5, #30]
 8007b86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b88:	fb02 f200 	mul.w	r2, r2, r0
 8007b8c:	fb03 f302 	mul.w	r3, r3, r2
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f43f af61 	beq.w	8007a58 <ai_platform_network_init+0x88>
 8007b96:	f104 0010 	add.w	r0, r4, #16
 8007b9a:	2213      	movs	r2, #19
 8007b9c:	2110      	movs	r1, #16
 8007b9e:	4634      	mov	r4, r6
 8007ba0:	f000 fb42 	bl	8008228 <core_set_error>
 8007ba4:	e7c9      	b.n	8007b3a <ai_platform_network_init+0x16a>
 8007ba6:	e7fe      	b.n	8007ba6 <ai_platform_network_init+0x1d6>
 8007ba8:	8928      	ldrh	r0, [r5, #8]
 8007baa:	88ea      	ldrh	r2, [r5, #6]
 8007bac:	68eb      	ldr	r3, [r5, #12]
 8007bae:	fb02 f200 	mul.w	r2, r2, r0
 8007bb2:	fb03 f302 	mul.w	r3, r3, r2
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	f43f af52 	beq.w	8007a60 <ai_platform_network_init+0x90>
 8007bbc:	f104 0010 	add.w	r0, r4, #16
 8007bc0:	2212      	movs	r2, #18
 8007bc2:	2110      	movs	r1, #16
 8007bc4:	4664      	mov	r4, ip
 8007bc6:	f000 fb2f 	bl	8008228 <core_set_error>
 8007bca:	e7b6      	b.n	8007b3a <ai_platform_network_init+0x16a>
 8007bcc:	a1c00100 	.word	0xa1c00100
 8007bd0:	e0002000 	.word	0xe0002000
 8007bd4:	e0042000 	.word	0xe0042000
 8007bd8:	58024c08 	.word	0x58024c08
 8007bdc:	58024c00 	.word	0x58024c00
 8007be0:	f407a5c2 	.word	0xf407a5c2
 8007be4:	b5e8b5cd 	.word	0xb5e8b5cd
 8007be8:	40023008 	.word	0x40023008
 8007bec:	40023000 	.word	0x40023000
 8007bf0:	a1facade 	.word	0xa1facade

08007bf4 <ai_platform_network_post_init>:
 8007bf4:	b538      	push	{r3, r4, r5, lr}
 8007bf6:	b120      	cbz	r0, 8007c02 <ai_platform_network_post_init+0xe>
 8007bf8:	4b3f      	ldr	r3, [pc, #252]	; (8007cf8 <ai_platform_network_post_init+0x104>)
 8007bfa:	6802      	ldr	r2, [r0, #0]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	4604      	mov	r4, r0
 8007c00:	d02d      	beq.n	8007c5e <ai_platform_network_post_init+0x6a>
 8007c02:	4a3e      	ldr	r2, [pc, #248]	; (8007cfc <ai_platform_network_post_init+0x108>)
 8007c04:	6813      	ldr	r3, [r2, #0]
 8007c06:	f023 0301 	bic.w	r3, r3, #1
 8007c0a:	6013      	str	r3, [r2, #0]
 8007c0c:	f7ff f896 	bl	8006d3c <_ai_platform_acquire_crc>
 8007c10:	4b3b      	ldr	r3, [pc, #236]	; (8007d00 <ai_platform_network_post_init+0x10c>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c1c:	d00d      	beq.n	8007c3a <ai_platform_network_post_init+0x46>
 8007c1e:	4b39      	ldr	r3, [pc, #228]	; (8007d04 <ai_platform_network_post_init+0x110>)
 8007c20:	2201      	movs	r2, #1
 8007c22:	601a      	str	r2, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	2a00      	cmp	r2, #0
 8007c28:	d1fc      	bne.n	8007c24 <ai_platform_network_post_init+0x30>
 8007c2a:	4b37      	ldr	r3, [pc, #220]	; (8007d08 <ai_platform_network_post_init+0x114>)
 8007c2c:	4a37      	ldr	r2, [pc, #220]	; (8007d0c <ai_platform_network_post_init+0x118>)
 8007c2e:	601a      	str	r2, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	4b37      	ldr	r3, [pc, #220]	; (8007d10 <ai_platform_network_post_init+0x11c>)
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d00d      	beq.n	8007c54 <ai_platform_network_post_init+0x60>
 8007c38:	e7fe      	b.n	8007c38 <ai_platform_network_post_init+0x44>
 8007c3a:	4b36      	ldr	r3, [pc, #216]	; (8007d14 <ai_platform_network_post_init+0x120>)
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	601a      	str	r2, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	2a00      	cmp	r2, #0
 8007c44:	d1fc      	bne.n	8007c40 <ai_platform_network_post_init+0x4c>
 8007c46:	4b34      	ldr	r3, [pc, #208]	; (8007d18 <ai_platform_network_post_init+0x124>)
 8007c48:	4a30      	ldr	r2, [pc, #192]	; (8007d0c <ai_platform_network_post_init+0x118>)
 8007c4a:	601a      	str	r2, [r3, #0]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	4b30      	ldr	r3, [pc, #192]	; (8007d10 <ai_platform_network_post_init+0x11c>)
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d103      	bne.n	8007c5c <ai_platform_network_post_init+0x68>
 8007c54:	f7ff f874 	bl	8006d40 <_ai_platform_release_crc>
 8007c58:	2000      	movs	r0, #0
 8007c5a:	bd38      	pop	{r3, r4, r5, pc}
 8007c5c:	e7fe      	b.n	8007c5c <ai_platform_network_post_init+0x68>
 8007c5e:	4a27      	ldr	r2, [pc, #156]	; (8007cfc <ai_platform_network_post_init+0x108>)
 8007c60:	6813      	ldr	r3, [r2, #0]
 8007c62:	f023 0301 	bic.w	r3, r3, #1
 8007c66:	6013      	str	r3, [r2, #0]
 8007c68:	f7ff f868 	bl	8006d3c <_ai_platform_acquire_crc>
 8007c6c:	4b24      	ldr	r3, [pc, #144]	; (8007d00 <ai_platform_network_post_init+0x10c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c78:	d00d      	beq.n	8007c96 <ai_platform_network_post_init+0xa2>
 8007c7a:	4b22      	ldr	r3, [pc, #136]	; (8007d04 <ai_platform_network_post_init+0x110>)
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	601a      	str	r2, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	2a00      	cmp	r2, #0
 8007c84:	d1fc      	bne.n	8007c80 <ai_platform_network_post_init+0x8c>
 8007c86:	4b20      	ldr	r3, [pc, #128]	; (8007d08 <ai_platform_network_post_init+0x114>)
 8007c88:	4a20      	ldr	r2, [pc, #128]	; (8007d0c <ai_platform_network_post_init+0x118>)
 8007c8a:	601a      	str	r2, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	4b20      	ldr	r3, [pc, #128]	; (8007d10 <ai_platform_network_post_init+0x11c>)
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d00e      	beq.n	8007cb2 <ai_platform_network_post_init+0xbe>
 8007c94:	e7fe      	b.n	8007c94 <ai_platform_network_post_init+0xa0>
 8007c96:	4b1f      	ldr	r3, [pc, #124]	; (8007d14 <ai_platform_network_post_init+0x120>)
 8007c98:	2201      	movs	r2, #1
 8007c9a:	601a      	str	r2, [r3, #0]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	2a00      	cmp	r2, #0
 8007ca0:	d1fc      	bne.n	8007c9c <ai_platform_network_post_init+0xa8>
 8007ca2:	4b1d      	ldr	r3, [pc, #116]	; (8007d18 <ai_platform_network_post_init+0x124>)
 8007ca4:	4a19      	ldr	r2, [pc, #100]	; (8007d0c <ai_platform_network_post_init+0x118>)
 8007ca6:	601a      	str	r2, [r3, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	4b19      	ldr	r3, [pc, #100]	; (8007d10 <ai_platform_network_post_init+0x11c>)
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d000      	beq.n	8007cb2 <ai_platform_network_post_init+0xbe>
 8007cb0:	e7fe      	b.n	8007cb0 <ai_platform_network_post_init+0xbc>
 8007cb2:	f7ff f845 	bl	8006d40 <_ai_platform_release_crc>
 8007cb6:	68e3      	ldr	r3, [r4, #12]
 8007cb8:	f013 0502 	ands.w	r5, r3, #2
 8007cbc:	d011      	beq.n	8007ce2 <ai_platform_network_post_init+0xee>
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f001 f818 	bl	8008cf4 <ai_layers_post_init_all>
 8007cc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007cc6:	b1a3      	cbz	r3, 8007cf2 <ai_platform_network_post_init+0xfe>
 8007cc8:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8007cca:	b195      	cbz	r5, 8007cf2 <ai_platform_network_post_init+0xfe>
 8007ccc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007cce:	4629      	mov	r1, r5
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	4798      	blx	r3
 8007cd4:	692b      	ldr	r3, [r5, #16]
 8007cd6:	42ab      	cmp	r3, r5
 8007cd8:	d00b      	beq.n	8007cf2 <ai_platform_network_post_init+0xfe>
 8007cda:	461d      	mov	r5, r3
 8007cdc:	b14b      	cbz	r3, 8007cf2 <ai_platform_network_post_init+0xfe>
 8007cde:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007ce0:	e7f4      	b.n	8007ccc <ai_platform_network_post_init+0xd8>
 8007ce2:	f104 0010 	add.w	r0, r4, #16
 8007ce6:	2210      	movs	r2, #16
 8007ce8:	2111      	movs	r1, #17
 8007cea:	f000 fa9d 	bl	8008228 <core_set_error>
 8007cee:	4628      	mov	r0, r5
 8007cf0:	bd38      	pop	{r3, r4, r5, pc}
 8007cf2:	2001      	movs	r0, #1
 8007cf4:	bd38      	pop	{r3, r4, r5, pc}
 8007cf6:	bf00      	nop
 8007cf8:	a1c00100 	.word	0xa1c00100
 8007cfc:	e0002000 	.word	0xe0002000
 8007d00:	e0042000 	.word	0xe0042000
 8007d04:	58024c08 	.word	0x58024c08
 8007d08:	58024c00 	.word	0x58024c00
 8007d0c:	f407a5c2 	.word	0xf407a5c2
 8007d10:	b5e8b5cd 	.word	0xb5e8b5cd
 8007d14:	40023008 	.word	0x40023008
 8007d18:	40023000 	.word	0x40023000

08007d1c <ai_platform_network_process>:
 8007d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d20:	b085      	sub	sp, #20
 8007d22:	460d      	mov	r5, r1
 8007d24:	9202      	str	r2, [sp, #8]
 8007d26:	4604      	mov	r4, r0
 8007d28:	b120      	cbz	r0, 8007d34 <ai_platform_network_process+0x18>
 8007d2a:	4b7b      	ldr	r3, [pc, #492]	; (8007f18 <ai_platform_network_process+0x1fc>)
 8007d2c:	6802      	ldr	r2, [r0, #0]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	bf18      	it	ne
 8007d32:	2400      	movne	r4, #0
 8007d34:	4a79      	ldr	r2, [pc, #484]	; (8007f1c <ai_platform_network_process+0x200>)
 8007d36:	6813      	ldr	r3, [r2, #0]
 8007d38:	f023 0301 	bic.w	r3, r3, #1
 8007d3c:	6013      	str	r3, [r2, #0]
 8007d3e:	f7fe fffd 	bl	8006d3c <_ai_platform_acquire_crc>
 8007d42:	4b77      	ldr	r3, [pc, #476]	; (8007f20 <ai_platform_network_process+0x204>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d4e:	d00d      	beq.n	8007d6c <ai_platform_network_process+0x50>
 8007d50:	4b74      	ldr	r3, [pc, #464]	; (8007f24 <ai_platform_network_process+0x208>)
 8007d52:	2201      	movs	r2, #1
 8007d54:	601a      	str	r2, [r3, #0]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	2a00      	cmp	r2, #0
 8007d5a:	d1fc      	bne.n	8007d56 <ai_platform_network_process+0x3a>
 8007d5c:	4b72      	ldr	r3, [pc, #456]	; (8007f28 <ai_platform_network_process+0x20c>)
 8007d5e:	4a73      	ldr	r2, [pc, #460]	; (8007f2c <ai_platform_network_process+0x210>)
 8007d60:	601a      	str	r2, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	4b72      	ldr	r3, [pc, #456]	; (8007f30 <ai_platform_network_process+0x214>)
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d00e      	beq.n	8007d88 <ai_platform_network_process+0x6c>
 8007d6a:	e7fe      	b.n	8007d6a <ai_platform_network_process+0x4e>
 8007d6c:	4b71      	ldr	r3, [pc, #452]	; (8007f34 <ai_platform_network_process+0x218>)
 8007d6e:	2201      	movs	r2, #1
 8007d70:	601a      	str	r2, [r3, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	2a00      	cmp	r2, #0
 8007d76:	d1fc      	bne.n	8007d72 <ai_platform_network_process+0x56>
 8007d78:	4b6f      	ldr	r3, [pc, #444]	; (8007f38 <ai_platform_network_process+0x21c>)
 8007d7a:	4a6c      	ldr	r2, [pc, #432]	; (8007f2c <ai_platform_network_process+0x210>)
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	4b6b      	ldr	r3, [pc, #428]	; (8007f30 <ai_platform_network_process+0x214>)
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d000      	beq.n	8007d88 <ai_platform_network_process+0x6c>
 8007d86:	e7fe      	b.n	8007d86 <ai_platform_network_process+0x6a>
 8007d88:	f7fe ffda 	bl	8006d40 <_ai_platform_release_crc>
 8007d8c:	2c00      	cmp	r4, #0
 8007d8e:	f000 808e 	beq.w	8007eae <ai_platform_network_process+0x192>
 8007d92:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 8007d94:	2f00      	cmp	r7, #0
 8007d96:	f040 823c 	bne.w	8008212 <ai_platform_network_process+0x4f6>
 8007d9a:	68e3      	ldr	r3, [r4, #12]
 8007d9c:	f003 0303 	and.w	r3, r3, #3
 8007da0:	f04f 0b00 	mov.w	fp, #0
 8007da4:	2b03      	cmp	r3, #3
 8007da6:	f8c4 b014 	str.w	fp, [r4, #20]
 8007daa:	f040 822b 	bne.w	8008204 <ai_platform_network_process+0x4e8>
 8007dae:	2d00      	cmp	r5, #0
 8007db0:	f000 80a8 	beq.w	8007f04 <ai_platform_network_process+0x1e8>
 8007db4:	2f00      	cmp	r7, #0
 8007db6:	f000 80a5 	beq.w	8007f04 <ai_platform_network_process+0x1e8>
 8007dba:	883b      	ldrh	r3, [r7, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f000 80a1 	beq.w	8007f04 <ai_platform_network_process+0x1e8>
 8007dc2:	f8b5 9004 	ldrh.w	r9, [r5, #4]
 8007dc6:	9401      	str	r4, [sp, #4]
 8007dc8:	46d8      	mov	r8, fp
 8007dca:	4598      	cmp	r8, r3
 8007dcc:	f080 80b6 	bcs.w	8007f3c <ai_platform_network_process+0x220>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f000 80b2 	beq.w	8007f3c <ai_platform_network_process+0x220>
 8007dd8:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8007ddc:	2e00      	cmp	r6, #0
 8007dde:	f000 80ad 	beq.w	8007f3c <ai_platform_network_process+0x220>
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	9303      	str	r3, [sp, #12]
 8007de8:	ea4f 1408 	mov.w	r4, r8, lsl #4
 8007dec:	eb13 0a04 	adds.w	sl, r3, r4
 8007df0:	f000 8087 	beq.w	8007f02 <ai_platform_network_process+0x1e6>
 8007df4:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8007df8:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 8007dfc:	69b0      	ldr	r0, [r6, #24]
 8007dfe:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8007e02:	6841      	ldr	r1, [r0, #4]
 8007e04:	fb0b f30e 	mul.w	r3, fp, lr
 8007e08:	fb0c f303 	mul.w	r3, ip, r3
 8007e0c:	4299      	cmp	r1, r3
 8007e0e:	d36e      	bcc.n	8007eee <ai_platform_network_process+0x1d2>
 8007e10:	68f3      	ldr	r3, [r6, #12]
 8007e12:	68da      	ldr	r2, [r3, #12]
 8007e14:	455a      	cmp	r2, fp
 8007e16:	d16a      	bne.n	8007eee <ai_platform_network_process+0x1d2>
 8007e18:	689a      	ldr	r2, [r3, #8]
 8007e1a:	4572      	cmp	r2, lr
 8007e1c:	d167      	bne.n	8007eee <ai_platform_network_process+0x1d2>
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	459c      	cmp	ip, r3
 8007e22:	d164      	bne.n	8007eee <ai_platform_network_process+0x1d2>
 8007e24:	6800      	ldr	r0, [r0, #0]
 8007e26:	f001 f83b 	bl	8008ea0 <ai_array_get_byte_size>
 8007e2a:	68f2      	ldr	r2, [r6, #12]
 8007e2c:	6973      	ldr	r3, [r6, #20]
 8007e2e:	68d2      	ldr	r2, [r2, #12]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	fb03 f302 	mul.w	r3, r3, r2
 8007e36:	4298      	cmp	r0, r3
 8007e38:	d359      	bcc.n	8007eee <ai_platform_network_process+0x1d2>
 8007e3a:	69b3      	ldr	r3, [r6, #24]
 8007e3c:	6818      	ldr	r0, [r3, #0]
 8007e3e:	f000 ffd7 	bl	8008df0 <ai_array_to_buffer_fmt>
 8007e42:	682b      	ldr	r3, [r5, #0]
 8007e44:	4043      	eors	r3, r0
 8007e46:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8007e4a:	d146      	bne.n	8007eda <ai_platform_network_process+0x1be>
 8007e4c:	692b      	ldr	r3, [r5, #16]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d03a      	beq.n	8007ec8 <ai_platform_network_process+0x1ac>
 8007e52:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 8007e56:	f1bb 0f00 	cmp.w	fp, #0
 8007e5a:	d02d      	beq.n	8007eb8 <ai_platform_network_process+0x19c>
 8007e5c:	68f2      	ldr	r2, [r6, #12]
 8007e5e:	6973      	ldr	r3, [r6, #20]
 8007e60:	68d1      	ldr	r1, [r2, #12]
 8007e62:	68da      	ldr	r2, [r3, #12]
 8007e64:	fb02 f201 	mul.w	r2, r2, r1
 8007e68:	f8ca 2008 	str.w	r2, [sl, #8]
 8007e6c:	88ab      	ldrh	r3, [r5, #4]
 8007e6e:	fb02 f203 	mul.w	r2, r2, r3
 8007e72:	f8ca 200c 	str.w	r2, [sl, #12]
 8007e76:	6929      	ldr	r1, [r5, #16]
 8007e78:	f8ca 1004 	str.w	r1, [sl, #4]
 8007e7c:	692b      	ldr	r3, [r5, #16]
 8007e7e:	4413      	add	r3, r2
 8007e80:	9a03      	ldr	r2, [sp, #12]
 8007e82:	5113      	str	r3, [r2, r4]
 8007e84:	69b0      	ldr	r0, [r6, #24]
 8007e86:	6803      	ldr	r3, [r0, #0]
 8007e88:	45d9      	cmp	r9, fp
 8007e8a:	bf38      	it	cc
 8007e8c:	46d9      	movcc	r9, fp
 8007e8e:	009a      	lsls	r2, r3, #2
 8007e90:	d408      	bmi.n	8007ea4 <ai_platform_network_process+0x188>
 8007e92:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007e96:	1a9b      	subs	r3, r3, r2
 8007e98:	4419      	add	r1, r3
 8007e9a:	6081      	str	r1, [r0, #8]
 8007e9c:	69b3      	ldr	r3, [r6, #24]
 8007e9e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8007ea2:	60da      	str	r2, [r3, #12]
 8007ea4:	883b      	ldrh	r3, [r7, #0]
 8007ea6:	f108 0801 	add.w	r8, r8, #1
 8007eaa:	3518      	adds	r5, #24
 8007eac:	e78d      	b.n	8007dca <ai_platform_network_process+0xae>
 8007eae:	46a3      	mov	fp, r4
 8007eb0:	4658      	mov	r0, fp
 8007eb2:	b005      	add	sp, #20
 8007eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eb8:	9c01      	ldr	r4, [sp, #4]
 8007eba:	2221      	movs	r2, #33	; 0x21
 8007ebc:	f104 0010 	add.w	r0, r4, #16
 8007ec0:	2112      	movs	r1, #18
 8007ec2:	f000 f9b1 	bl	8008228 <core_set_error>
 8007ec6:	e7f3      	b.n	8007eb0 <ai_platform_network_process+0x194>
 8007ec8:	9c01      	ldr	r4, [sp, #4]
 8007eca:	2217      	movs	r2, #23
 8007ecc:	f104 0010 	add.w	r0, r4, #16
 8007ed0:	2112      	movs	r1, #18
 8007ed2:	469b      	mov	fp, r3
 8007ed4:	f000 f9a8 	bl	8008228 <core_set_error>
 8007ed8:	e7ea      	b.n	8007eb0 <ai_platform_network_process+0x194>
 8007eda:	9c01      	ldr	r4, [sp, #4]
 8007edc:	2219      	movs	r2, #25
 8007ede:	f104 0010 	add.w	r0, r4, #16
 8007ee2:	2112      	movs	r1, #18
 8007ee4:	f000 f9a0 	bl	8008228 <core_set_error>
 8007ee8:	f04f 0b00 	mov.w	fp, #0
 8007eec:	e7e0      	b.n	8007eb0 <ai_platform_network_process+0x194>
 8007eee:	9c01      	ldr	r4, [sp, #4]
 8007ef0:	2218      	movs	r2, #24
 8007ef2:	f104 0010 	add.w	r0, r4, #16
 8007ef6:	2112      	movs	r1, #18
 8007ef8:	f000 f996 	bl	8008228 <core_set_error>
 8007efc:	f04f 0b00 	mov.w	fp, #0
 8007f00:	e7d6      	b.n	8007eb0 <ai_platform_network_process+0x194>
 8007f02:	9c01      	ldr	r4, [sp, #4]
 8007f04:	f104 0010 	add.w	r0, r4, #16
 8007f08:	2217      	movs	r2, #23
 8007f0a:	2112      	movs	r1, #18
 8007f0c:	f000 f98c 	bl	8008228 <core_set_error>
 8007f10:	f04f 0b00 	mov.w	fp, #0
 8007f14:	e7cc      	b.n	8007eb0 <ai_platform_network_process+0x194>
 8007f16:	bf00      	nop
 8007f18:	a1c00100 	.word	0xa1c00100
 8007f1c:	e0002000 	.word	0xe0002000
 8007f20:	e0042000 	.word	0xe0042000
 8007f24:	58024c08 	.word	0x58024c08
 8007f28:	58024c00 	.word	0x58024c00
 8007f2c:	f407a5c2 	.word	0xf407a5c2
 8007f30:	b5e8b5cd 	.word	0xb5e8b5cd
 8007f34:	40023008 	.word	0x40023008
 8007f38:	40023000 	.word	0x40023000
 8007f3c:	9c01      	ldr	r4, [sp, #4]
 8007f3e:	9a02      	ldr	r2, [sp, #8]
 8007f40:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8007f42:	2a00      	cmp	r2, #0
 8007f44:	f000 80a9 	beq.w	800809a <ai_platform_network_process+0x37e>
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	f240 809b 	bls.w	8008084 <ai_platform_network_process+0x368>
 8007f4e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8007f52:	f11a 0f0c 	cmn.w	sl, #12
 8007f56:	f000 8095 	beq.w	8008084 <ai_platform_network_process+0x368>
 8007f5a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f000 8090 	beq.w	8008084 <ai_platform_network_process+0x368>
 8007f64:	9d02      	ldr	r5, [sp, #8]
 8007f66:	9401      	str	r4, [sp, #4]
 8007f68:	f04f 0800 	mov.w	r8, #0
 8007f6c:	4598      	cmp	r8, r3
 8007f6e:	f080 8092 	bcs.w	8008096 <ai_platform_network_process+0x37a>
 8007f72:	f8da 3010 	ldr.w	r3, [sl, #16]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f000 808d 	beq.w	8008096 <ai_platform_network_process+0x37a>
 8007f7c:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8007f80:	2e00      	cmp	r6, #0
 8007f82:	f000 8088 	beq.w	8008096 <ai_platform_network_process+0x37a>
 8007f86:	f8da 3014 	ldr.w	r3, [sl, #20]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	9302      	str	r3, [sp, #8]
 8007f8e:	ea4f 1408 	mov.w	r4, r8, lsl #4
 8007f92:	191f      	adds	r7, r3, r4
 8007f94:	f000 812d 	beq.w	80081f2 <ai_platform_network_process+0x4d6>
 8007f98:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8007f9c:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 8007fa0:	69b0      	ldr	r0, [r6, #24]
 8007fa2:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8007fa6:	6841      	ldr	r1, [r0, #4]
 8007fa8:	fb0b f30e 	mul.w	r3, fp, lr
 8007fac:	fb0c f303 	mul.w	r3, ip, r3
 8007fb0:	4299      	cmp	r1, r3
 8007fb2:	d366      	bcc.n	8008082 <ai_platform_network_process+0x366>
 8007fb4:	68f3      	ldr	r3, [r6, #12]
 8007fb6:	68da      	ldr	r2, [r3, #12]
 8007fb8:	455a      	cmp	r2, fp
 8007fba:	d162      	bne.n	8008082 <ai_platform_network_process+0x366>
 8007fbc:	689a      	ldr	r2, [r3, #8]
 8007fbe:	4572      	cmp	r2, lr
 8007fc0:	d15f      	bne.n	8008082 <ai_platform_network_process+0x366>
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	459c      	cmp	ip, r3
 8007fc6:	d15c      	bne.n	8008082 <ai_platform_network_process+0x366>
 8007fc8:	6800      	ldr	r0, [r0, #0]
 8007fca:	f000 ff69 	bl	8008ea0 <ai_array_get_byte_size>
 8007fce:	68f2      	ldr	r2, [r6, #12]
 8007fd0:	6973      	ldr	r3, [r6, #20]
 8007fd2:	68d2      	ldr	r2, [r2, #12]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	fb03 f302 	mul.w	r3, r3, r2
 8007fda:	4298      	cmp	r0, r3
 8007fdc:	d351      	bcc.n	8008082 <ai_platform_network_process+0x366>
 8007fde:	69b3      	ldr	r3, [r6, #24]
 8007fe0:	6818      	ldr	r0, [r3, #0]
 8007fe2:	f000 ff05 	bl	8008df0 <ai_array_to_buffer_fmt>
 8007fe6:	682b      	ldr	r3, [r5, #0]
 8007fe8:	4043      	eors	r3, r0
 8007fea:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8007fee:	d13e      	bne.n	800806e <ai_platform_network_process+0x352>
 8007ff0:	692b      	ldr	r3, [r5, #16]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d032      	beq.n	800805c <ai_platform_network_process+0x340>
 8007ff6:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 8007ffa:	f1bb 0f00 	cmp.w	fp, #0
 8007ffe:	d025      	beq.n	800804c <ai_platform_network_process+0x330>
 8008000:	68f2      	ldr	r2, [r6, #12]
 8008002:	6973      	ldr	r3, [r6, #20]
 8008004:	68d1      	ldr	r1, [r2, #12]
 8008006:	68da      	ldr	r2, [r3, #12]
 8008008:	fb02 f201 	mul.w	r2, r2, r1
 800800c:	60ba      	str	r2, [r7, #8]
 800800e:	88ab      	ldrh	r3, [r5, #4]
 8008010:	fb02 f203 	mul.w	r2, r2, r3
 8008014:	60fa      	str	r2, [r7, #12]
 8008016:	6929      	ldr	r1, [r5, #16]
 8008018:	6079      	str	r1, [r7, #4]
 800801a:	692b      	ldr	r3, [r5, #16]
 800801c:	4413      	add	r3, r2
 800801e:	9a02      	ldr	r2, [sp, #8]
 8008020:	5113      	str	r3, [r2, r4]
 8008022:	69b0      	ldr	r0, [r6, #24]
 8008024:	6803      	ldr	r3, [r0, #0]
 8008026:	45d9      	cmp	r9, fp
 8008028:	bf38      	it	cc
 800802a:	46d9      	movcc	r9, fp
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	d407      	bmi.n	8008040 <ai_platform_network_process+0x324>
 8008030:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8008034:	1a9b      	subs	r3, r3, r2
 8008036:	4419      	add	r1, r3
 8008038:	6081      	str	r1, [r0, #8]
 800803a:	69b3      	ldr	r3, [r6, #24]
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	60da      	str	r2, [r3, #12]
 8008040:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8008044:	f108 0801 	add.w	r8, r8, #1
 8008048:	3518      	adds	r5, #24
 800804a:	e78f      	b.n	8007f6c <ai_platform_network_process+0x250>
 800804c:	9c01      	ldr	r4, [sp, #4]
 800804e:	2221      	movs	r2, #33	; 0x21
 8008050:	f104 0010 	add.w	r0, r4, #16
 8008054:	2113      	movs	r1, #19
 8008056:	f000 f8e7 	bl	8008228 <core_set_error>
 800805a:	e729      	b.n	8007eb0 <ai_platform_network_process+0x194>
 800805c:	9c01      	ldr	r4, [sp, #4]
 800805e:	2217      	movs	r2, #23
 8008060:	f104 0010 	add.w	r0, r4, #16
 8008064:	2113      	movs	r1, #19
 8008066:	469b      	mov	fp, r3
 8008068:	f000 f8de 	bl	8008228 <core_set_error>
 800806c:	e720      	b.n	8007eb0 <ai_platform_network_process+0x194>
 800806e:	9c01      	ldr	r4, [sp, #4]
 8008070:	2219      	movs	r2, #25
 8008072:	f104 0010 	add.w	r0, r4, #16
 8008076:	2113      	movs	r1, #19
 8008078:	f000 f8d6 	bl	8008228 <core_set_error>
 800807c:	f04f 0b00 	mov.w	fp, #0
 8008080:	e716      	b.n	8007eb0 <ai_platform_network_process+0x194>
 8008082:	9c01      	ldr	r4, [sp, #4]
 8008084:	f104 0010 	add.w	r0, r4, #16
 8008088:	2218      	movs	r2, #24
 800808a:	2113      	movs	r1, #19
 800808c:	f000 f8cc 	bl	8008228 <core_set_error>
 8008090:	f04f 0b00 	mov.w	fp, #0
 8008094:	e70c      	b.n	8007eb0 <ai_platform_network_process+0x194>
 8008096:	9c01      	ldr	r4, [sp, #4]
 8008098:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800809a:	f8a4 9014 	strh.w	r9, [r4, #20]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f000 80a4 	beq.w	80081ec <ai_platform_network_process+0x4d0>
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80080a8:	f240 809e 	bls.w	80081e8 <ai_platform_network_process+0x4cc>
 80080ac:	f105 070c 	add.w	r7, r5, #12
 80080b0:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 80080b4:	8aa3      	ldrh	r3, [r4, #20]
 80080b6:	455b      	cmp	r3, fp
 80080b8:	f67f aefa 	bls.w	8007eb0 <ai_platform_network_process+0x194>
 80080bc:	9401      	str	r4, [sp, #4]
 80080be:	2d00      	cmp	r5, #0
 80080c0:	d036      	beq.n	8008130 <ai_platform_network_process+0x414>
 80080c2:	882b      	ldrh	r3, [r5, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d033      	beq.n	8008130 <ai_platform_network_process+0x414>
 80080c8:	686b      	ldr	r3, [r5, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d030      	beq.n	8008130 <ai_platform_network_process+0x414>
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f04f 0800 	mov.w	r8, #0
 80080d4:	b9db      	cbnz	r3, 800810e <ai_platform_network_process+0x3f2>
 80080d6:	e02b      	b.n	8008130 <ai_platform_network_process+0x414>
 80080d8:	68d4      	ldr	r4, [r2, #12]
 80080da:	1b00      	subs	r0, r0, r4
 80080dc:	4401      	add	r1, r0
 80080de:	6091      	str	r1, [r2, #8]
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	6872      	ldr	r2, [r6, #4]
 80080e4:	60da      	str	r2, [r3, #12]
 80080e6:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80080ea:	f85a 2009 	ldr.w	r2, [sl, r9]
 80080ee:	440b      	add	r3, r1
 80080f0:	4293      	cmp	r3, r2
 80080f2:	bf24      	itt	cs
 80080f4:	68f3      	ldrcs	r3, [r6, #12]
 80080f6:	1ad3      	subcs	r3, r2, r3
 80080f8:	6073      	str	r3, [r6, #4]
 80080fa:	882b      	ldrh	r3, [r5, #0]
 80080fc:	f108 0801 	add.w	r8, r8, #1
 8008100:	4598      	cmp	r8, r3
 8008102:	d215      	bcs.n	8008130 <ai_platform_network_process+0x414>
 8008104:	686b      	ldr	r3, [r5, #4]
 8008106:	b19b      	cbz	r3, 8008130 <ai_platform_network_process+0x414>
 8008108:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800810c:	b183      	cbz	r3, 8008130 <ai_platform_network_process+0x414>
 800810e:	68a9      	ldr	r1, [r5, #8]
 8008110:	699a      	ldr	r2, [r3, #24]
 8008112:	f8d1 a000 	ldr.w	sl, [r1]
 8008116:	6814      	ldr	r4, [r2, #0]
 8008118:	6890      	ldr	r0, [r2, #8]
 800811a:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800811e:	eb0a 0609 	add.w	r6, sl, r9
 8008122:	00a4      	lsls	r4, r4, #2
 8008124:	6871      	ldr	r1, [r6, #4]
 8008126:	d5d7      	bpl.n	80080d8 <ai_platform_network_process+0x3bc>
 8008128:	68b2      	ldr	r2, [r6, #8]
 800812a:	f000 ff05 	bl	8008f38 <memcpy>
 800812e:	e7da      	b.n	80080e6 <ai_platform_network_process+0x3ca>
 8008130:	9801      	ldr	r0, [sp, #4]
 8008132:	f000 fdf7 	bl	8008d24 <ai_layers_forward_all>
 8008136:	2f00      	cmp	r7, #0
 8008138:	d047      	beq.n	80081ca <ai_platform_network_process+0x4ae>
 800813a:	883b      	ldrh	r3, [r7, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d044      	beq.n	80081ca <ai_platform_network_process+0x4ae>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d041      	beq.n	80081ca <ai_platform_network_process+0x4ae>
 8008146:	6818      	ldr	r0, [r3, #0]
 8008148:	2800      	cmp	r0, #0
 800814a:	d03e      	beq.n	80081ca <ai_platform_network_process+0x4ae>
 800814c:	f04f 0800 	mov.w	r8, #0
 8008150:	e019      	b.n	8008186 <ai_platform_network_process+0x46a>
 8008152:	f85a 2009 	ldr.w	r2, [sl, r9]
 8008156:	4293      	cmp	r3, r2
 8008158:	bf24      	itt	cs
 800815a:	68f3      	ldrcs	r3, [r6, #12]
 800815c:	1ad3      	subcs	r3, r2, r3
 800815e:	6073      	str	r3, [r6, #4]
 8008160:	6981      	ldr	r1, [r0, #24]
 8008162:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8008166:	1b12      	subs	r2, r2, r4
 8008168:	4413      	add	r3, r2
 800816a:	608b      	str	r3, [r1, #8]
 800816c:	6983      	ldr	r3, [r0, #24]
 800816e:	6872      	ldr	r2, [r6, #4]
 8008170:	60da      	str	r2, [r3, #12]
 8008172:	883b      	ldrh	r3, [r7, #0]
 8008174:	f108 0801 	add.w	r8, r8, #1
 8008178:	4598      	cmp	r8, r3
 800817a:	d226      	bcs.n	80081ca <ai_platform_network_process+0x4ae>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	b323      	cbz	r3, 80081ca <ai_platform_network_process+0x4ae>
 8008180:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008184:	b308      	cbz	r0, 80081ca <ai_platform_network_process+0x4ae>
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	6981      	ldr	r1, [r0, #24]
 800818a:	f8d3 a000 	ldr.w	sl, [r3]
 800818e:	680c      	ldr	r4, [r1, #0]
 8008190:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8008194:	eb0a 0609 	add.w	r6, sl, r9
 8008198:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 800819c:	00a4      	lsls	r4, r4, #2
 800819e:	eb0c 0302 	add.w	r3, ip, r2
 80081a2:	d5d6      	bpl.n	8008152 <ai_platform_network_process+0x436>
 80081a4:	6889      	ldr	r1, [r1, #8]
 80081a6:	4660      	mov	r0, ip
 80081a8:	f000 fec6 	bl	8008f38 <memcpy>
 80081ac:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80081b0:	f85a 2009 	ldr.w	r2, [sl, r9]
 80081b4:	440b      	add	r3, r1
 80081b6:	4293      	cmp	r3, r2
 80081b8:	bf24      	itt	cs
 80081ba:	68f3      	ldrcs	r3, [r6, #12]
 80081bc:	1ad3      	subcs	r3, r2, r3
 80081be:	6073      	str	r3, [r6, #4]
 80081c0:	883b      	ldrh	r3, [r7, #0]
 80081c2:	f108 0801 	add.w	r8, r8, #1
 80081c6:	4598      	cmp	r8, r3
 80081c8:	d3d8      	bcc.n	800817c <ai_platform_network_process+0x460>
 80081ca:	9b01      	ldr	r3, [sp, #4]
 80081cc:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 80081d0:	461a      	mov	r2, r3
 80081d2:	f10b 0b01 	add.w	fp, fp, #1
 80081d6:	8a9b      	ldrh	r3, [r3, #20]
 80081d8:	fa1f fb8b 	uxth.w	fp, fp
 80081dc:	455b      	cmp	r3, fp
 80081de:	f8a2 b016 	strh.w	fp, [r2, #22]
 80081e2:	f63f af6c 	bhi.w	80080be <ai_platform_network_process+0x3a2>
 80081e6:	e663      	b.n	8007eb0 <ai_platform_network_process+0x194>
 80081e8:	2700      	movs	r7, #0
 80081ea:	e761      	b.n	80080b0 <ai_platform_network_process+0x394>
 80081ec:	461d      	mov	r5, r3
 80081ee:	461f      	mov	r7, r3
 80081f0:	e75e      	b.n	80080b0 <ai_platform_network_process+0x394>
 80081f2:	9c01      	ldr	r4, [sp, #4]
 80081f4:	2217      	movs	r2, #23
 80081f6:	f104 0010 	add.w	r0, r4, #16
 80081fa:	2113      	movs	r1, #19
 80081fc:	f000 f814 	bl	8008228 <core_set_error>
 8008200:	46bb      	mov	fp, r7
 8008202:	e655      	b.n	8007eb0 <ai_platform_network_process+0x194>
 8008204:	f104 0010 	add.w	r0, r4, #16
 8008208:	2230      	movs	r2, #48	; 0x30
 800820a:	2111      	movs	r1, #17
 800820c:	f000 f80c 	bl	8008228 <core_set_error>
 8008210:	e64e      	b.n	8007eb0 <ai_platform_network_process+0x194>
 8008212:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8008214:	e5c1      	b.n	8007d9a <ai_platform_network_process+0x7e>
 8008216:	bf00      	nop

08008218 <core_init>:
 8008218:	2001      	movs	r0, #1
 800821a:	4770      	bx	lr

0800821c <core_get_error>:
 800821c:	4603      	mov	r3, r0
 800821e:	2200      	movs	r2, #0
 8008220:	6800      	ldr	r0, [r0, #0]
 8008222:	601a      	str	r2, [r3, #0]
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop

08008228 <core_set_error>:
 8008228:	7803      	ldrb	r3, [r0, #0]
 800822a:	b933      	cbnz	r3, 800823a <core_set_error+0x12>
 800822c:	7001      	strb	r1, [r0, #0]
 800822e:	6803      	ldr	r3, [r0, #0]
 8008230:	f362 231f 	bfi	r3, r2, #8, #24
 8008234:	6003      	str	r3, [r0, #0]
 8008236:	2001      	movs	r0, #1
 8008238:	4770      	bx	lr
 800823a:	2000      	movs	r0, #0
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop

08008240 <ai_dict8_dot_array_f32>:
 8008240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008244:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008248:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 800824c:	f000 80c0 	beq.w	80083d0 <ai_dict8_dot_array_f32+0x190>
 8008250:	f101 0408 	add.w	r4, r1, #8
 8008254:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8008258:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80083d8 <ai_dict8_dot_array_f32+0x198>
 800825c:	eb04 0e09 	add.w	lr, r4, r9
 8008260:	f103 0520 	add.w	r5, r3, #32
 8008264:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8008268:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 800826c:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8008270:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8008274:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8008278:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 800827c:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8008280:	ed55 3a04 	vldr	s7, [r5, #-16]
 8008284:	ed55 4a03 	vldr	s9, [r5, #-12]
 8008288:	ed55 5a02 	vldr	s11, [r5, #-8]
 800828c:	ed55 6a01 	vldr	s13, [r5, #-4]
 8008290:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008294:	edd6 7a00 	vldr	s15, [r6]
 8008298:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 800829c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80082a0:	ee67 7a83 	vmul.f32	s15, s15, s6
 80082a4:	ed9a 3a00 	vldr	s6, [sl]
 80082a8:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 80082ac:	eee3 7a05 	vfma.f32	s15, s6, s10
 80082b0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80082b4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80082b8:	ed97 3a00 	vldr	s6, [r7]
 80082bc:	ed96 5a00 	vldr	s10, [r6]
 80082c0:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 80082c4:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 80082c8:	eee3 7a04 	vfma.f32	s15, s6, s8
 80082cc:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80082d0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80082d4:	ed9a 3a00 	vldr	s6, [sl]
 80082d8:	ed96 4a00 	vldr	s8, [r6]
 80082dc:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 80082e0:	eee5 7a06 	vfma.f32	s15, s10, s12
 80082e4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80082e8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80082ec:	ed97 5a00 	vldr	s10, [r7]
 80082f0:	ed96 6a00 	vldr	s12, [r6]
 80082f4:	eee3 7a23 	vfma.f32	s15, s6, s7
 80082f8:	3408      	adds	r4, #8
 80082fa:	45a6      	cmp	lr, r4
 80082fc:	f105 0520 	add.w	r5, r5, #32
 8008300:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008304:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008308:	eee6 7a26 	vfma.f32	s15, s12, s13
 800830c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008310:	d1a8      	bne.n	8008264 <ai_dict8_dot_array_f32+0x24>
 8008312:	4449      	add	r1, r9
 8008314:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8008318:	f01c 0c07 	ands.w	ip, ip, #7
 800831c:	d050      	beq.n	80083c0 <ai_dict8_dot_array_f32+0x180>
 800831e:	780c      	ldrb	r4, [r1, #0]
 8008320:	edd3 6a00 	vldr	s13, [r3]
 8008324:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8008328:	edd4 7a00 	vldr	s15, [r4]
 800832c:	f1bc 0f01 	cmp.w	ip, #1
 8008330:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008334:	d044      	beq.n	80083c0 <ai_dict8_dot_array_f32+0x180>
 8008336:	784c      	ldrb	r4, [r1, #1]
 8008338:	edd3 6a01 	vldr	s13, [r3, #4]
 800833c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8008340:	edd4 7a00 	vldr	s15, [r4]
 8008344:	f1bc 0f02 	cmp.w	ip, #2
 8008348:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800834c:	d038      	beq.n	80083c0 <ai_dict8_dot_array_f32+0x180>
 800834e:	788c      	ldrb	r4, [r1, #2]
 8008350:	edd3 6a02 	vldr	s13, [r3, #8]
 8008354:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8008358:	edd4 7a00 	vldr	s15, [r4]
 800835c:	f1bc 0f03 	cmp.w	ip, #3
 8008360:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008364:	d02c      	beq.n	80083c0 <ai_dict8_dot_array_f32+0x180>
 8008366:	78cc      	ldrb	r4, [r1, #3]
 8008368:	edd3 6a03 	vldr	s13, [r3, #12]
 800836c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8008370:	edd4 7a00 	vldr	s15, [r4]
 8008374:	f1bc 0f04 	cmp.w	ip, #4
 8008378:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800837c:	d020      	beq.n	80083c0 <ai_dict8_dot_array_f32+0x180>
 800837e:	790c      	ldrb	r4, [r1, #4]
 8008380:	edd3 6a04 	vldr	s13, [r3, #16]
 8008384:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8008388:	edd4 7a00 	vldr	s15, [r4]
 800838c:	f1bc 0f05 	cmp.w	ip, #5
 8008390:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008394:	d014      	beq.n	80083c0 <ai_dict8_dot_array_f32+0x180>
 8008396:	794c      	ldrb	r4, [r1, #5]
 8008398:	edd3 6a05 	vldr	s13, [r3, #20]
 800839c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80083a0:	edd4 7a00 	vldr	s15, [r4]
 80083a4:	f1bc 0f06 	cmp.w	ip, #6
 80083a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80083ac:	d008      	beq.n	80083c0 <ai_dict8_dot_array_f32+0x180>
 80083ae:	7989      	ldrb	r1, [r1, #6]
 80083b0:	edd3 7a06 	vldr	s15, [r3, #24]
 80083b4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80083b8:	edd2 6a00 	vldr	s13, [r2]
 80083bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80083c0:	edd0 7a00 	vldr	s15, [r0]
 80083c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083c8:	ed80 7a00 	vstr	s14, [r0]
 80083cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083d0:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80083d8 <ai_dict8_dot_array_f32+0x198>
 80083d4:	e7a0      	b.n	8008318 <ai_dict8_dot_array_f32+0xd8>
 80083d6:	bf00      	nop
 80083d8:	00000000 	.word	0x00000000

080083dc <ai_dict4_dot_array_f32>:
 80083dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80083e2:	f027 0c01 	bic.w	ip, r7, #1
 80083e6:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 80083ea:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80083ee:	f000 80ae 	beq.w	800854e <ai_dict4_dot_array_f32+0x172>
 80083f2:	1d0d      	adds	r5, r1, #4
 80083f4:	ea4f 0988 	mov.w	r9, r8, lsl #2
 80083f8:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8008554 <ai_dict4_dot_array_f32+0x178>
 80083fc:	eb05 0e09 	add.w	lr, r5, r9
 8008400:	f103 0420 	add.w	r4, r3, #32
 8008404:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8008408:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 800840c:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8008410:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8008414:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8008418:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 800841c:	ed14 5a04 	vldr	s10, [r4, #-16]
 8008420:	ed54 5a03 	vldr	s11, [r4, #-12]
 8008424:	ed14 6a02 	vldr	s12, [r4, #-8]
 8008428:	ed54 6a01 	vldr	s13, [r4, #-4]
 800842c:	f006 0a0f 	and.w	sl, r6, #15
 8008430:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8008434:	edda 7a00 	vldr	s15, [sl]
 8008438:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 800843c:	0936      	lsrs	r6, r6, #4
 800843e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008442:	ee67 7a83 	vmul.f32	s15, s15, s6
 8008446:	ed96 3a00 	vldr	s6, [r6]
 800844a:	ea4f 161b 	mov.w	r6, fp, lsr #4
 800844e:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008452:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008456:	f00b 0b0f 	and.w	fp, fp, #15
 800845a:	edd6 3a00 	vldr	s7, [r6]
 800845e:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8008462:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008466:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800846a:	3504      	adds	r5, #4
 800846c:	ed9b 4a00 	vldr	s8, [fp]
 8008470:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8008474:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008478:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800847c:	f00a 0a0f 	and.w	sl, sl, #15
 8008480:	eddb 4a00 	vldr	s9, [fp]
 8008484:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008488:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800848c:	45ae      	cmp	lr, r5
 800848e:	ed9a 5a00 	vldr	s10, [sl]
 8008492:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8008496:	eee5 7a25 	vfma.f32	s15, s10, s11
 800849a:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800849e:	f006 060f 	and.w	r6, r6, #15
 80084a2:	edda 5a00 	vldr	s11, [sl]
 80084a6:	eee5 7a86 	vfma.f32	s15, s11, s12
 80084aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80084ae:	f104 0420 	add.w	r4, r4, #32
 80084b2:	ed96 6a00 	vldr	s12, [r6]
 80084b6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80084ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80084be:	d1a1      	bne.n	8008404 <ai_dict4_dot_array_f32+0x28>
 80084c0:	4449      	add	r1, r9
 80084c2:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80084c6:	459c      	cmp	ip, r3
 80084c8:	d92d      	bls.n	8008526 <ai_dict4_dot_array_f32+0x14a>
 80084ca:	f10c 0c07 	add.w	ip, ip, #7
 80084ce:	f103 0508 	add.w	r5, r3, #8
 80084d2:	ebac 0c05 	sub.w	ip, ip, r5
 80084d6:	f02c 0407 	bic.w	r4, ip, #7
 80084da:	f103 0810 	add.w	r8, r3, #16
 80084de:	44a0      	add	r8, r4
 80084e0:	f101 3eff 	add.w	lr, r1, #4294967295
 80084e4:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 80084e8:	ed15 6a01 	vldr	s12, [r5, #-4]
 80084ec:	ed55 6a02 	vldr	s13, [r5, #-8]
 80084f0:	f004 060f 	and.w	r6, r4, #15
 80084f4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80084f8:	0924      	lsrs	r4, r4, #4
 80084fa:	edd6 7a00 	vldr	s15, [r6]
 80084fe:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8008502:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008506:	ed94 6a00 	vldr	s12, [r4]
 800850a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800850e:	3508      	adds	r5, #8
 8008510:	45a8      	cmp	r8, r5
 8008512:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008516:	d1e5      	bne.n	80084e4 <ai_dict4_dot_array_f32+0x108>
 8008518:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800851c:	f10c 0c01 	add.w	ip, ip, #1
 8008520:	4461      	add	r1, ip
 8008522:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8008526:	07fc      	lsls	r4, r7, #31
 8008528:	d509      	bpl.n	800853e <ai_dict4_dot_array_f32+0x162>
 800852a:	7809      	ldrb	r1, [r1, #0]
 800852c:	edd3 7a00 	vldr	s15, [r3]
 8008530:	090b      	lsrs	r3, r1, #4
 8008532:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008536:	edd2 6a00 	vldr	s13, [r2]
 800853a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800853e:	edd0 7a00 	vldr	s15, [r0]
 8008542:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008546:	ed80 7a00 	vstr	s14, [r0]
 800854a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800854e:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8008554 <ai_dict4_dot_array_f32+0x178>
 8008552:	e7b8      	b.n	80084c6 <ai_dict4_dot_array_f32+0xea>
 8008554:	00000000 	.word	0x00000000

08008558 <forward_dense>:
 8008558:	6983      	ldr	r3, [r0, #24]
 800855a:	881a      	ldrh	r2, [r3, #0]
 800855c:	2a00      	cmp	r2, #0
 800855e:	f000 80b5 	beq.w	80086cc <forward_dense+0x174>
 8008562:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008566:	ed2d 8b10 	vpush	{d8-d15}
 800856a:	685f      	ldr	r7, [r3, #4]
 800856c:	687e      	ldr	r6, [r7, #4]
 800856e:	b091      	sub	sp, #68	; 0x44
 8008570:	b106      	cbz	r6, 8008574 <forward_dense+0x1c>
 8008572:	6836      	ldr	r6, [r6, #0]
 8008574:	2a01      	cmp	r2, #1
 8008576:	f240 80a6 	bls.w	80086c6 <forward_dense+0x16e>
 800857a:	693d      	ldr	r5, [r7, #16]
 800857c:	b105      	cbz	r5, 8008580 <forward_dense+0x28>
 800857e:	682d      	ldr	r5, [r5, #0]
 8008580:	2a02      	cmp	r2, #2
 8008582:	f000 80a5 	beq.w	80086d0 <forward_dense+0x178>
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 821b 	beq.w	80089c4 <forward_dense+0x46c>
 800858e:	6819      	ldr	r1, [r3, #0]
 8008590:	9106      	str	r1, [sp, #24]
 8008592:	f117 0118 	adds.w	r1, r7, #24
 8008596:	f000 80c9 	beq.w	800872c <forward_dense+0x1d4>
 800859a:	8b39      	ldrh	r1, [r7, #24]
 800859c:	2901      	cmp	r1, #1
 800859e:	f240 820e 	bls.w	80089be <forward_dense+0x466>
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f000 80c4 	beq.w	8008730 <forward_dense+0x1d8>
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	9307      	str	r3, [sp, #28]
 80085ac:	9b06      	ldr	r3, [sp, #24]
 80085ae:	68ec      	ldr	r4, [r5, #12]
 80085b0:	6998      	ldr	r0, [r3, #24]
 80085b2:	68f1      	ldr	r1, [r6, #12]
 80085b4:	6803      	ldr	r3, [r0, #0]
 80085b6:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80085ba:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
 80085be:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 80085c2:	f3c3 5141 	ubfx	r1, r3, #21, #2
 80085c6:	fa49 f101 	asr.w	r1, r9, r1
 80085ca:	910b      	str	r1, [sp, #44]	; 0x2c
 80085cc:	2a03      	cmp	r2, #3
 80085ce:	fb0e f10c 	mul.w	r1, lr, ip
 80085d2:	6864      	ldr	r4, [r4, #4]
 80085d4:	9108      	str	r1, [sp, #32]
 80085d6:	f000 81de 	beq.w	8008996 <forward_dense+0x43e>
 80085da:	6abf      	ldr	r7, [r7, #40]	; 0x28
 80085dc:	b117      	cbz	r7, 80085e4 <forward_dense+0x8c>
 80085de:	683f      	ldr	r7, [r7, #0]
 80085e0:	b107      	cbz	r7, 80085e4 <forward_dense+0x8c>
 80085e2:	69bf      	ldr	r7, [r7, #24]
 80085e4:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80085e8:	2b04      	cmp	r3, #4
 80085ea:	f000 81d7 	beq.w	800899c <forward_dense+0x444>
 80085ee:	2b08      	cmp	r3, #8
 80085f0:	f000 81d4 	beq.w	800899c <forward_dense+0x444>
 80085f4:	f04f 0a00 	mov.w	sl, #0
 80085f8:	69ab      	ldr	r3, [r5, #24]
 80085fa:	69b2      	ldr	r2, [r6, #24]
 80085fc:	6899      	ldr	r1, [r3, #8]
 80085fe:	9b06      	ldr	r3, [sp, #24]
 8008600:	9104      	str	r1, [sp, #16]
 8008602:	695b      	ldr	r3, [r3, #20]
 8008604:	6897      	ldr	r7, [r2, #8]
 8008606:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800860a:	00a3      	lsls	r3, r4, #2
 800860c:	9309      	str	r3, [sp, #36]	; 0x24
 800860e:	18ce      	adds	r6, r1, r3
 8008610:	9b08      	ldr	r3, [sp, #32]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d052      	beq.n	80086bc <forward_dense+0x164>
 8008616:	f1a8 0310 	sub.w	r3, r8, #16
 800861a:	091b      	lsrs	r3, r3, #4
 800861c:	3301      	adds	r3, #1
 800861e:	019b      	lsls	r3, r3, #6
 8008620:	930c      	str	r3, [sp, #48]	; 0x30
 8008622:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8008626:	930a      	str	r3, [sp, #40]	; 0x28
 8008628:	2300      	movs	r3, #0
 800862a:	9305      	str	r3, [sp, #20]
 800862c:	eddf aace 	vldr	s21, [pc, #824]	; 8008968 <forward_dense+0x410>
 8008630:	f008 030f 	and.w	r3, r8, #15
 8008634:	930d      	str	r3, [sp, #52]	; 0x34
 8008636:	9b06      	ldr	r3, [sp, #24]
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	689d      	ldr	r5, [r3, #8]
 800863c:	9b07      	ldr	r3, [sp, #28]
 800863e:	2b00      	cmp	r3, #0
 8008640:	f000 818f 	beq.w	8008962 <forward_dense+0x40a>
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	689c      	ldr	r4, [r3, #8]
 8008648:	9b04      	ldr	r3, [sp, #16]
 800864a:	f1ba 0f00 	cmp.w	sl, #0
 800864e:	d071      	beq.n	8008734 <forward_dense+0x1dc>
 8008650:	42b3      	cmp	r3, r6
 8008652:	d229      	bcs.n	80086a8 <forward_dense+0x150>
 8008654:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008656:	469b      	mov	fp, r3
 8008658:	ab0f      	add	r3, sp, #60	; 0x3c
 800865a:	9303      	str	r3, [sp, #12]
 800865c:	2a04      	cmp	r2, #4
 800865e:	4633      	mov	r3, r6
 8008660:	4646      	mov	r6, r8
 8008662:	4698      	mov	r8, r3
 8008664:	d037      	beq.n	80086d6 <forward_dense+0x17e>
 8008666:	2c00      	cmp	r4, #0
 8008668:	f000 8180 	beq.w	800896c <forward_dense+0x414>
 800866c:	f8d4 c000 	ldr.w	ip, [r4]
 8008670:	9803      	ldr	r0, [sp, #12]
 8008672:	9600      	str	r6, [sp, #0]
 8008674:	463b      	mov	r3, r7
 8008676:	4629      	mov	r1, r5
 8008678:	4652      	mov	r2, sl
 800867a:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800867e:	f7ff fddf 	bl	8008240 <ai_dict8_dot_array_f32>
 8008682:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008684:	f84b 3b04 	str.w	r3, [fp], #4
 8008688:	45c3      	cmp	fp, r8
 800868a:	f104 0404 	add.w	r4, r4, #4
 800868e:	444d      	add	r5, r9
 8008690:	d3e9      	bcc.n	8008666 <forward_dense+0x10e>
 8008692:	4643      	mov	r3, r8
 8008694:	46b0      	mov	r8, r6
 8008696:	461e      	mov	r6, r3
 8008698:	9a04      	ldr	r2, [sp, #16]
 800869a:	43d3      	mvns	r3, r2
 800869c:	4433      	add	r3, r6
 800869e:	f023 0303 	bic.w	r3, r3, #3
 80086a2:	3304      	adds	r3, #4
 80086a4:	18d3      	adds	r3, r2, r3
 80086a6:	9304      	str	r3, [sp, #16]
 80086a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086aa:	9b05      	ldr	r3, [sp, #20]
 80086ac:	4417      	add	r7, r2
 80086ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086b0:	4416      	add	r6, r2
 80086b2:	9a08      	ldr	r2, [sp, #32]
 80086b4:	3301      	adds	r3, #1
 80086b6:	4293      	cmp	r3, r2
 80086b8:	9305      	str	r3, [sp, #20]
 80086ba:	d1bc      	bne.n	8008636 <forward_dense+0xde>
 80086bc:	b011      	add	sp, #68	; 0x44
 80086be:	ecbd 8b10 	vpop	{d8-d15}
 80086c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086c6:	2300      	movs	r3, #0
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	deff      	udf	#255	; 0xff
 80086cc:	6853      	ldr	r3, [r2, #4]
 80086ce:	deff      	udf	#255	; 0xff
 80086d0:	2300      	movs	r3, #0
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	deff      	udf	#255	; 0xff
 80086d6:	b1a4      	cbz	r4, 8008702 <forward_dense+0x1aa>
 80086d8:	f8d4 c000 	ldr.w	ip, [r4]
 80086dc:	9803      	ldr	r0, [sp, #12]
 80086de:	9600      	str	r6, [sp, #0]
 80086e0:	463b      	mov	r3, r7
 80086e2:	4629      	mov	r1, r5
 80086e4:	4652      	mov	r2, sl
 80086e6:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80086ea:	f7ff fe77 	bl	80083dc <ai_dict4_dot_array_f32>
 80086ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086f0:	f84b 3b04 	str.w	r3, [fp], #4
 80086f4:	45c3      	cmp	fp, r8
 80086f6:	f104 0404 	add.w	r4, r4, #4
 80086fa:	444d      	add	r5, r9
 80086fc:	d2c9      	bcs.n	8008692 <forward_dense+0x13a>
 80086fe:	2c00      	cmp	r4, #0
 8008700:	d1ea      	bne.n	80086d8 <forward_dense+0x180>
 8008702:	4634      	mov	r4, r6
 8008704:	4646      	mov	r6, r8
 8008706:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800870a:	9400      	str	r4, [sp, #0]
 800870c:	463b      	mov	r3, r7
 800870e:	4629      	mov	r1, r5
 8008710:	4652      	mov	r2, sl
 8008712:	4640      	mov	r0, r8
 8008714:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8008718:	f7ff fe60 	bl	80083dc <ai_dict4_dot_array_f32>
 800871c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800871e:	f84b 3b04 	str.w	r3, [fp], #4
 8008722:	45b3      	cmp	fp, r6
 8008724:	444d      	add	r5, r9
 8008726:	d3f0      	bcc.n	800870a <forward_dense+0x1b2>
 8008728:	46a0      	mov	r8, r4
 800872a:	e7b5      	b.n	8008698 <forward_dense+0x140>
 800872c:	9107      	str	r1, [sp, #28]
 800872e:	e73d      	b.n	80085ac <forward_dense+0x54>
 8008730:	9307      	str	r3, [sp, #28]
 8008732:	e73b      	b.n	80085ac <forward_dense+0x54>
 8008734:	42b3      	cmp	r3, r6
 8008736:	d2b7      	bcs.n	80086a8 <forward_dense+0x150>
 8008738:	4618      	mov	r0, r3
 800873a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800873c:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8008740:	eb07 0c03 	add.w	ip, r7, r3
 8008744:	469e      	mov	lr, r3
 8008746:	2c00      	cmp	r4, #0
 8008748:	f000 80ff 	beq.w	800894a <forward_dense+0x3f2>
 800874c:	f1b8 0f0f 	cmp.w	r8, #15
 8008750:	edd4 fa00 	vldr	s31, [r4]
 8008754:	eddf 6a84 	vldr	s13, [pc, #528]	; 8008968 <forward_dense+0x410>
 8008758:	f104 0404 	add.w	r4, r4, #4
 800875c:	f240 80fd 	bls.w	800895a <forward_dense+0x402>
 8008760:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008764:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8008768:	4641      	mov	r1, r8
 800876a:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 800876e:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8008772:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8008776:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 800877a:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 800877e:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8008782:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8008786:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 800878a:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 800878e:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8008792:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8008796:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 800879a:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 800879e:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 80087a2:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 80087a6:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 80087aa:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 80087ae:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 80087b2:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 80087b6:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 80087ba:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 80087be:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 80087c2:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 80087c6:	ed12 4a04 	vldr	s8, [r2, #-16]
 80087ca:	ed53 4a04 	vldr	s9, [r3, #-16]
 80087ce:	ed13 5a03 	vldr	s10, [r3, #-12]
 80087d2:	ed52 5a03 	vldr	s11, [r2, #-12]
 80087d6:	ed13 6a02 	vldr	s12, [r3, #-8]
 80087da:	ed12 7a02 	vldr	s14, [r2, #-8]
 80087de:	ee67 7a8f 	vmul.f32	s15, s15, s30
 80087e2:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 80087e6:	eeee 7a8e 	vfma.f32	s15, s29, s28
 80087ea:	3910      	subs	r1, #16
 80087ec:	290f      	cmp	r1, #15
 80087ee:	ed52 ea01 	vldr	s29, [r2, #-4]
 80087f2:	ed13 ea01 	vldr	s28, [r3, #-4]
 80087f6:	eeed 7a8f 	vfma.f32	s15, s27, s30
 80087fa:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80087fe:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8008802:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8008806:	eeec 7a2b 	vfma.f32	s15, s24, s23
 800880a:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 800880e:	eee9 7a89 	vfma.f32	s15, s19, s18
 8008812:	eee8 7a88 	vfma.f32	s15, s17, s16
 8008816:	eee0 7a20 	vfma.f32	s15, s0, s1
 800881a:	eee1 7a21 	vfma.f32	s15, s2, s3
 800881e:	eee2 7a22 	vfma.f32	s15, s4, s5
 8008822:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008826:	eee4 7a24 	vfma.f32	s15, s8, s9
 800882a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800882e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008832:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8008836:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800883a:	d896      	bhi.n	800876a <forward_dense+0x212>
 800883c:	eb05 010e 	add.w	r1, r5, lr
 8008840:	465b      	mov	r3, fp
 8008842:	4662      	mov	r2, ip
 8008844:	2b00      	cmp	r3, #0
 8008846:	d075      	beq.n	8008934 <forward_dense+0x3dc>
 8008848:	ed91 7a00 	vldr	s14, [r1]
 800884c:	edd2 7a00 	vldr	s15, [r2]
 8008850:	2b01      	cmp	r3, #1
 8008852:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008856:	d06d      	beq.n	8008934 <forward_dense+0x3dc>
 8008858:	ed91 7a01 	vldr	s14, [r1, #4]
 800885c:	edd2 7a01 	vldr	s15, [r2, #4]
 8008860:	2b02      	cmp	r3, #2
 8008862:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008866:	d065      	beq.n	8008934 <forward_dense+0x3dc>
 8008868:	ed91 7a02 	vldr	s14, [r1, #8]
 800886c:	edd2 7a02 	vldr	s15, [r2, #8]
 8008870:	2b03      	cmp	r3, #3
 8008872:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008876:	d05d      	beq.n	8008934 <forward_dense+0x3dc>
 8008878:	ed91 7a03 	vldr	s14, [r1, #12]
 800887c:	edd2 7a03 	vldr	s15, [r2, #12]
 8008880:	2b04      	cmp	r3, #4
 8008882:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008886:	d055      	beq.n	8008934 <forward_dense+0x3dc>
 8008888:	ed91 7a04 	vldr	s14, [r1, #16]
 800888c:	edd2 7a04 	vldr	s15, [r2, #16]
 8008890:	2b05      	cmp	r3, #5
 8008892:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008896:	d04d      	beq.n	8008934 <forward_dense+0x3dc>
 8008898:	ed91 7a05 	vldr	s14, [r1, #20]
 800889c:	edd2 7a05 	vldr	s15, [r2, #20]
 80088a0:	2b06      	cmp	r3, #6
 80088a2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80088a6:	d045      	beq.n	8008934 <forward_dense+0x3dc>
 80088a8:	ed91 7a06 	vldr	s14, [r1, #24]
 80088ac:	edd2 7a06 	vldr	s15, [r2, #24]
 80088b0:	2b07      	cmp	r3, #7
 80088b2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80088b6:	d03d      	beq.n	8008934 <forward_dense+0x3dc>
 80088b8:	ed91 7a07 	vldr	s14, [r1, #28]
 80088bc:	edd2 7a07 	vldr	s15, [r2, #28]
 80088c0:	2b08      	cmp	r3, #8
 80088c2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80088c6:	d035      	beq.n	8008934 <forward_dense+0x3dc>
 80088c8:	ed91 7a08 	vldr	s14, [r1, #32]
 80088cc:	edd2 7a08 	vldr	s15, [r2, #32]
 80088d0:	2b09      	cmp	r3, #9
 80088d2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80088d6:	d02d      	beq.n	8008934 <forward_dense+0x3dc>
 80088d8:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 80088dc:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80088e0:	2b0a      	cmp	r3, #10
 80088e2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80088e6:	d025      	beq.n	8008934 <forward_dense+0x3dc>
 80088e8:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 80088ec:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 80088f0:	2b0b      	cmp	r3, #11
 80088f2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80088f6:	d01d      	beq.n	8008934 <forward_dense+0x3dc>
 80088f8:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 80088fc:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8008900:	2b0c      	cmp	r3, #12
 8008902:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008906:	d015      	beq.n	8008934 <forward_dense+0x3dc>
 8008908:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800890c:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8008910:	2b0d      	cmp	r3, #13
 8008912:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008916:	d00d      	beq.n	8008934 <forward_dense+0x3dc>
 8008918:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800891c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8008920:	2b0e      	cmp	r3, #14
 8008922:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008926:	d005      	beq.n	8008934 <forward_dense+0x3dc>
 8008928:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800892c:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8008930:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008934:	444d      	add	r5, r9
 8008936:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 800893a:	ece0 6a01 	vstmia	r0!, {s13}
 800893e:	42b0      	cmp	r0, r6
 8008940:	f4bf aeaa 	bcs.w	8008698 <forward_dense+0x140>
 8008944:	2c00      	cmp	r4, #0
 8008946:	f47f af01 	bne.w	800874c <forward_dense+0x1f4>
 800894a:	f1b8 0f0f 	cmp.w	r8, #15
 800894e:	eef0 fa6a 	vmov.f32	s31, s21
 8008952:	eddf 6a05 	vldr	s13, [pc, #20]	; 8008968 <forward_dense+0x410>
 8008956:	f63f af03 	bhi.w	8008760 <forward_dense+0x208>
 800895a:	4643      	mov	r3, r8
 800895c:	4629      	mov	r1, r5
 800895e:	463a      	mov	r2, r7
 8008960:	e770      	b.n	8008844 <forward_dense+0x2ec>
 8008962:	461c      	mov	r4, r3
 8008964:	e670      	b.n	8008648 <forward_dense+0xf0>
 8008966:	bf00      	nop
 8008968:	00000000 	.word	0x00000000
 800896c:	4634      	mov	r4, r6
 800896e:	4646      	mov	r6, r8
 8008970:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008974:	9400      	str	r4, [sp, #0]
 8008976:	463b      	mov	r3, r7
 8008978:	4629      	mov	r1, r5
 800897a:	4652      	mov	r2, sl
 800897c:	4640      	mov	r0, r8
 800897e:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8008982:	f7ff fc5d 	bl	8008240 <ai_dict8_dot_array_f32>
 8008986:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008988:	f84b 3b04 	str.w	r3, [fp], #4
 800898c:	455e      	cmp	r6, fp
 800898e:	444d      	add	r5, r9
 8008990:	d8f0      	bhi.n	8008974 <forward_dense+0x41c>
 8008992:	46a0      	mov	r8, r4
 8008994:	e680      	b.n	8008698 <forward_dense+0x140>
 8008996:	2300      	movs	r3, #0
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	deff      	udf	#255	; 0xff
 800899c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80089a0:	2f00      	cmp	r7, #0
 80089a2:	f43f ae29 	beq.w	80085f8 <forward_dense+0xa0>
 80089a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089aa:	f000 fa79 	bl	8008ea0 <ai_array_get_byte_size>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	4602      	mov	r2, r0
 80089b2:	4651      	mov	r1, sl
 80089b4:	4618      	mov	r0, r3
 80089b6:	f000 fabf 	bl	8008f38 <memcpy>
 80089ba:	4682      	mov	sl, r0
 80089bc:	e61c      	b.n	80085f8 <forward_dense+0xa0>
 80089be:	2300      	movs	r3, #0
 80089c0:	9307      	str	r3, [sp, #28]
 80089c2:	e5f3      	b.n	80085ac <forward_dense+0x54>
 80089c4:	9306      	str	r3, [sp, #24]
 80089c6:	e5e4      	b.n	8008592 <forward_dense+0x3a>

080089c8 <forward_sigmoid>:
 80089c8:	6982      	ldr	r2, [r0, #24]
 80089ca:	8813      	ldrh	r3, [r2, #0]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d040      	beq.n	8008a52 <forward_sigmoid+0x8a>
 80089d0:	6851      	ldr	r1, [r2, #4]
 80089d2:	684a      	ldr	r2, [r1, #4]
 80089d4:	b102      	cbz	r2, 80089d8 <forward_sigmoid+0x10>
 80089d6:	6812      	ldr	r2, [r2, #0]
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d937      	bls.n	8008a4c <forward_sigmoid+0x84>
 80089dc:	b570      	push	{r4, r5, r6, lr}
 80089de:	ed2d 8b02 	vpush	{d8}
 80089e2:	690b      	ldr	r3, [r1, #16]
 80089e4:	b103      	cbz	r3, 80089e8 <forward_sigmoid+0x20>
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	6999      	ldr	r1, [r3, #24]
 80089ea:	6893      	ldr	r3, [r2, #8]
 80089ec:	6996      	ldr	r6, [r2, #24]
 80089ee:	688d      	ldr	r5, [r1, #8]
 80089f0:	68b4      	ldr	r4, [r6, #8]
 80089f2:	0a1b      	lsrs	r3, r3, #8
 80089f4:	d010      	beq.n	8008a18 <forward_sigmoid+0x50>
 80089f6:	68d0      	ldr	r0, [r2, #12]
 80089f8:	2201      	movs	r2, #1
 80089fa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80089fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a02:	4298      	cmp	r0, r3
 8008a04:	fb01 f202 	mul.w	r2, r1, r2
 8008a08:	d1f9      	bne.n	80089fe <forward_sigmoid+0x36>
 8008a0a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008a0e:	3a01      	subs	r2, #1
 8008a10:	0092      	lsls	r2, r2, #2
 8008a12:	18a4      	adds	r4, r4, r2
 8008a14:	4415      	add	r5, r2
 8008a16:	d216      	bcs.n	8008a46 <forward_sigmoid+0x7e>
 8008a18:	3404      	adds	r4, #4
 8008a1a:	3504      	adds	r5, #4
 8008a1c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8008a20:	ed14 0a01 	vldr	s0, [r4, #-4]
 8008a24:	eeb1 0a40 	vneg.f32	s0, s0
 8008a28:	f001 fa68 	bl	8009efc <expf>
 8008a2c:	ee30 0a08 	vadd.f32	s0, s0, s16
 8008a30:	1f22      	subs	r2, r4, #4
 8008a32:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8008a36:	f1a4 0308 	sub.w	r3, r4, #8
 8008a3a:	4614      	mov	r4, r2
 8008a3c:	ed65 7a01 	vstmdb	r5!, {s15}
 8008a40:	68b2      	ldr	r2, [r6, #8]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d9ec      	bls.n	8008a20 <forward_sigmoid+0x58>
 8008a46:	ecbd 8b02 	vpop	{d8}
 8008a4a:	bd70      	pop	{r4, r5, r6, pc}
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	deff      	udf	#255	; 0xff
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	deff      	udf	#255	; 0xff
 8008a56:	bf00      	nop

08008a58 <nl_func_relu_generic_array_f32>:
 8008a58:	b430      	push	{r4, r5}
 8008a5a:	6989      	ldr	r1, [r1, #24]
 8008a5c:	6980      	ldr	r0, [r0, #24]
 8008a5e:	edd3 6a02 	vldr	s13, [r3, #8]
 8008a62:	688c      	ldr	r4, [r1, #8]
 8008a64:	6880      	ldr	r0, [r0, #8]
 8008a66:	ed93 7a00 	vldr	s14, [r3]
 8008a6a:	ed93 6a01 	vldr	s12, [r3, #4]
 8008a6e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008a72:	3a01      	subs	r2, #1
 8008a74:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8008a78:	0092      	lsls	r2, r2, #2
 8008a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a7e:	4410      	add	r0, r2
 8008a80:	4422      	add	r2, r4
 8008a82:	d421      	bmi.n	8008ac8 <nl_func_relu_generic_array_f32+0x70>
 8008a84:	4294      	cmp	r4, r2
 8008a86:	d83d      	bhi.n	8008b04 <nl_func_relu_generic_array_f32+0xac>
 8008a88:	1d13      	adds	r3, r2, #4
 8008a8a:	1d02      	adds	r2, r0, #4
 8008a8c:	e010      	b.n	8008ab0 <nl_func_relu_generic_array_f32+0x58>
 8008a8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a96:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8008a9a:	d501      	bpl.n	8008aa0 <nl_func_relu_generic_array_f32+0x48>
 8008a9c:	ee65 7a86 	vmul.f32	s15, s11, s12
 8008aa0:	ed62 7a01 	vstmdb	r2!, {s15}
 8008aa4:	6888      	ldr	r0, [r1, #8]
 8008aa6:	f1a3 0408 	sub.w	r4, r3, #8
 8008aaa:	4284      	cmp	r4, r0
 8008aac:	462b      	mov	r3, r5
 8008aae:	d329      	bcc.n	8008b04 <nl_func_relu_generic_array_f32+0xac>
 8008ab0:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008ab4:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008abc:	f1a3 0504 	sub.w	r5, r3, #4
 8008ac0:	d4e5      	bmi.n	8008a8e <nl_func_relu_generic_array_f32+0x36>
 8008ac2:	eef0 7a66 	vmov.f32	s15, s13
 8008ac6:	e7eb      	b.n	8008aa0 <nl_func_relu_generic_array_f32+0x48>
 8008ac8:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8008acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ad0:	d01a      	beq.n	8008b08 <nl_func_relu_generic_array_f32+0xb0>
 8008ad2:	4294      	cmp	r4, r2
 8008ad4:	d816      	bhi.n	8008b04 <nl_func_relu_generic_array_f32+0xac>
 8008ad6:	1d13      	adds	r3, r2, #4
 8008ad8:	1d02      	adds	r2, r0, #4
 8008ada:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008ade:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008ae2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ae6:	f1a3 0408 	sub.w	r4, r3, #8
 8008aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aee:	f1a3 0004 	sub.w	r0, r3, #4
 8008af2:	ee66 6a86 	vmul.f32	s13, s13, s12
 8008af6:	4623      	mov	r3, r4
 8008af8:	d51e      	bpl.n	8008b38 <nl_func_relu_generic_array_f32+0xe0>
 8008afa:	ed62 6a01 	vstmdb	r2!, {s13}
 8008afe:	688b      	ldr	r3, [r1, #8]
 8008b00:	42a3      	cmp	r3, r4
 8008b02:	d91e      	bls.n	8008b42 <nl_func_relu_generic_array_f32+0xea>
 8008b04:	bc30      	pop	{r4, r5}
 8008b06:	4770      	bx	lr
 8008b08:	4294      	cmp	r4, r2
 8008b0a:	d8fb      	bhi.n	8008b04 <nl_func_relu_generic_array_f32+0xac>
 8008b0c:	1d13      	adds	r3, r2, #4
 8008b0e:	2500      	movs	r5, #0
 8008b10:	1d02      	adds	r2, r0, #4
 8008b12:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008b16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b1a:	f1a3 0408 	sub.w	r4, r3, #8
 8008b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b22:	f1a3 0004 	sub.w	r0, r3, #4
 8008b26:	4623      	mov	r3, r4
 8008b28:	db0d      	blt.n	8008b46 <nl_func_relu_generic_array_f32+0xee>
 8008b2a:	ed62 7a01 	vstmdb	r2!, {s15}
 8008b2e:	688b      	ldr	r3, [r1, #8]
 8008b30:	42a3      	cmp	r3, r4
 8008b32:	d8e7      	bhi.n	8008b04 <nl_func_relu_generic_array_f32+0xac>
 8008b34:	4603      	mov	r3, r0
 8008b36:	e7ec      	b.n	8008b12 <nl_func_relu_generic_array_f32+0xba>
 8008b38:	ed62 7a01 	vstmdb	r2!, {s15}
 8008b3c:	688c      	ldr	r4, [r1, #8]
 8008b3e:	429c      	cmp	r4, r3
 8008b40:	d8e0      	bhi.n	8008b04 <nl_func_relu_generic_array_f32+0xac>
 8008b42:	4603      	mov	r3, r0
 8008b44:	e7c9      	b.n	8008ada <nl_func_relu_generic_array_f32+0x82>
 8008b46:	f842 5d04 	str.w	r5, [r2, #-4]!
 8008b4a:	688c      	ldr	r4, [r1, #8]
 8008b4c:	429c      	cmp	r4, r3
 8008b4e:	d8d9      	bhi.n	8008b04 <nl_func_relu_generic_array_f32+0xac>
 8008b50:	4603      	mov	r3, r0
 8008b52:	e7de      	b.n	8008b12 <nl_func_relu_generic_array_f32+0xba>

08008b54 <forward_relu>:
 8008b54:	6982      	ldr	r2, [r0, #24]
 8008b56:	8813      	ldrh	r3, [r2, #0]
 8008b58:	b333      	cbz	r3, 8008ba8 <forward_relu+0x54>
 8008b5a:	6852      	ldr	r2, [r2, #4]
 8008b5c:	6851      	ldr	r1, [r2, #4]
 8008b5e:	b101      	cbz	r1, 8008b62 <forward_relu+0xe>
 8008b60:	6809      	ldr	r1, [r1, #0]
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d91d      	bls.n	8008ba2 <forward_relu+0x4e>
 8008b66:	b4f0      	push	{r4, r5, r6, r7}
 8008b68:	6917      	ldr	r7, [r2, #16]
 8008b6a:	b107      	cbz	r7, 8008b6e <forward_relu+0x1a>
 8008b6c:	683f      	ldr	r7, [r7, #0]
 8008b6e:	688c      	ldr	r4, [r1, #8]
 8008b70:	69c3      	ldr	r3, [r0, #28]
 8008b72:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d044      	beq.n	8008c04 <forward_relu+0xb0>
 8008b7a:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 8008b7e:	2d01      	cmp	r5, #1
 8008b80:	d014      	beq.n	8008bac <forward_relu+0x58>
 8008b82:	2c00      	cmp	r4, #0
 8008b84:	d074      	beq.n	8008c70 <forward_relu+0x11c>
 8008b86:	68ce      	ldr	r6, [r1, #12]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8008b8e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008b92:	42a6      	cmp	r6, r4
 8008b94:	fb05 f202 	mul.w	r2, r5, r2
 8008b98:	d1f9      	bne.n	8008b8e <forward_relu+0x3a>
 8008b9a:	4638      	mov	r0, r7
 8008b9c:	bcf0      	pop	{r4, r5, r6, r7}
 8008b9e:	f7ff bf5b 	b.w	8008a58 <nl_func_relu_generic_array_f32>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	deff      	udf	#255	; 0xff
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	deff      	udf	#255	; 0xff
 8008bac:	69ba      	ldr	r2, [r7, #24]
 8008bae:	6988      	ldr	r0, [r1, #24]
 8008bb0:	6896      	ldr	r6, [r2, #8]
 8008bb2:	ed93 7a00 	vldr	s14, [r3]
 8008bb6:	6882      	ldr	r2, [r0, #8]
 8008bb8:	b184      	cbz	r4, 8008bdc <forward_relu+0x88>
 8008bba:	68cf      	ldr	r7, [r1, #12]
 8008bbc:	462b      	mov	r3, r5
 8008bbe:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8008bc2:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8008bc6:	42a7      	cmp	r7, r4
 8008bc8:	fb01 f303 	mul.w	r3, r1, r3
 8008bcc:	d1f9      	bne.n	8008bc2 <forward_relu+0x6e>
 8008bce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	18d2      	adds	r2, r2, r3
 8008bd8:	441e      	add	r6, r3
 8008bda:	d23f      	bcs.n	8008c5c <forward_relu+0x108>
 8008bdc:	1d13      	adds	r3, r2, #4
 8008bde:	2500      	movs	r5, #0
 8008be0:	1d32      	adds	r2, r6, #4
 8008be2:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008be6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bee:	f1a3 0104 	sub.w	r1, r3, #4
 8008bf2:	d835      	bhi.n	8008c60 <forward_relu+0x10c>
 8008bf4:	ed62 7a01 	vstmdb	r2!, {s15}
 8008bf8:	6884      	ldr	r4, [r0, #8]
 8008bfa:	3b08      	subs	r3, #8
 8008bfc:	429c      	cmp	r4, r3
 8008bfe:	d82d      	bhi.n	8008c5c <forward_relu+0x108>
 8008c00:	460b      	mov	r3, r1
 8008c02:	e7ee      	b.n	8008be2 <forward_relu+0x8e>
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	698d      	ldr	r5, [r1, #24]
 8008c08:	6898      	ldr	r0, [r3, #8]
 8008c0a:	68ab      	ldr	r3, [r5, #8]
 8008c0c:	b184      	cbz	r4, 8008c30 <forward_relu+0xdc>
 8008c0e:	68ce      	ldr	r6, [r1, #12]
 8008c10:	2201      	movs	r2, #1
 8008c12:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8008c16:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8008c1a:	42a6      	cmp	r6, r4
 8008c1c:	fb01 f202 	mul.w	r2, r1, r2
 8008c20:	d1f9      	bne.n	8008c16 <forward_relu+0xc2>
 8008c22:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008c26:	3a01      	subs	r2, #1
 8008c28:	0092      	lsls	r2, r2, #2
 8008c2a:	189b      	adds	r3, r3, r2
 8008c2c:	4410      	add	r0, r2
 8008c2e:	d215      	bcs.n	8008c5c <forward_relu+0x108>
 8008c30:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008c74 <forward_relu+0x120>
 8008c34:	3304      	adds	r3, #4
 8008c36:	1d01      	adds	r1, r0, #4
 8008c38:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008c3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c44:	bfb8      	it	lt
 8008c46:	eef0 7a47 	vmovlt.f32	s15, s14
 8008c4a:	ed61 7a01 	vstmdb	r1!, {s15}
 8008c4e:	68a8      	ldr	r0, [r5, #8]
 8008c50:	f1a3 0208 	sub.w	r2, r3, #8
 8008c54:	4290      	cmp	r0, r2
 8008c56:	f1a3 0304 	sub.w	r3, r3, #4
 8008c5a:	d9ed      	bls.n	8008c38 <forward_relu+0xe4>
 8008c5c:	bcf0      	pop	{r4, r5, r6, r7}
 8008c5e:	4770      	bx	lr
 8008c60:	f842 5d04 	str.w	r5, [r2, #-4]!
 8008c64:	6884      	ldr	r4, [r0, #8]
 8008c66:	3b08      	subs	r3, #8
 8008c68:	429c      	cmp	r4, r3
 8008c6a:	d8f7      	bhi.n	8008c5c <forward_relu+0x108>
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	e7b8      	b.n	8008be2 <forward_relu+0x8e>
 8008c70:	2201      	movs	r2, #1
 8008c72:	e792      	b.n	8008b9a <forward_relu+0x46>
 8008c74:	00000000 	.word	0x00000000

08008c78 <ai_check_custom_types>:
 8008c78:	4b13      	ldr	r3, [pc, #76]	; (8008cc8 <ai_check_custom_types+0x50>)
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	9301      	str	r3, [sp, #4]
 8008c80:	b118      	cbz	r0, 8008c8a <ai_check_custom_types+0x12>
 8008c82:	7803      	ldrb	r3, [r0, #0]
 8008c84:	2b03      	cmp	r3, #3
 8008c86:	d002      	beq.n	8008c8e <ai_check_custom_types+0x16>
 8008c88:	2000      	movs	r0, #0
 8008c8a:	b002      	add	sp, #8
 8008c8c:	4770      	bx	lr
 8008c8e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d004      	beq.n	8008ca0 <ai_check_custom_types+0x28>
 8008c96:	2001      	movs	r0, #1
 8008c98:	f080 0001 	eor.w	r0, r0, #1
 8008c9c:	b002      	add	sp, #8
 8008c9e:	4770      	bx	lr
 8008ca0:	7842      	ldrb	r2, [r0, #1]
 8008ca2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	f100 0001 	add.w	r0, r0, #1
 8008cac:	d1f3      	bne.n	8008c96 <ai_check_custom_types+0x1e>
 8008cae:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8008cb2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d1ed      	bne.n	8008c96 <ai_check_custom_types+0x1e>
 8008cba:	7842      	ldrb	r2, [r0, #1]
 8008cbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d1e8      	bne.n	8008c96 <ai_check_custom_types+0x1e>
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	e7e7      	b.n	8008c98 <ai_check_custom_types+0x20>
 8008cc8:	0800a2f4 	.word	0x0800a2f4

08008ccc <ai_layers_init_all>:
 8008ccc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008cce:	b17a      	cbz	r2, 8008cf0 <ai_layers_init_all+0x24>
 8008cd0:	6913      	ldr	r3, [r2, #16]
 8008cd2:	60d0      	str	r0, [r2, #12]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	f04f 0201 	mov.w	r2, #1
 8008cda:	d009      	beq.n	8008cf0 <ai_layers_init_all+0x24>
 8008cdc:	b143      	cbz	r3, 8008cf0 <ai_layers_init_all+0x24>
 8008cde:	6919      	ldr	r1, [r3, #16]
 8008ce0:	60d8      	str	r0, [r3, #12]
 8008ce2:	4299      	cmp	r1, r3
 8008ce4:	f102 0201 	add.w	r2, r2, #1
 8008ce8:	d002      	beq.n	8008cf0 <ai_layers_init_all+0x24>
 8008cea:	460b      	mov	r3, r1
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d1f6      	bne.n	8008cde <ai_layers_init_all+0x12>
 8008cf0:	4610      	mov	r0, r2
 8008cf2:	4770      	bx	lr

08008cf4 <ai_layers_post_init_all>:
 8008cf4:	b538      	push	{r3, r4, r5, lr}
 8008cf6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008cf8:	b18c      	cbz	r4, 8008d1e <ai_layers_post_init_all+0x2a>
 8008cfa:	2500      	movs	r5, #0
 8008cfc:	6863      	ldr	r3, [r4, #4]
 8008cfe:	f013 0f01 	tst.w	r3, #1
 8008d02:	4620      	mov	r0, r4
 8008d04:	d003      	beq.n	8008d0e <ai_layers_post_init_all+0x1a>
 8008d06:	6a23      	ldr	r3, [r4, #32]
 8008d08:	b10b      	cbz	r3, 8008d0e <ai_layers_post_init_all+0x1a>
 8008d0a:	4798      	blx	r3
 8008d0c:	3501      	adds	r5, #1
 8008d0e:	6923      	ldr	r3, [r4, #16]
 8008d10:	42a3      	cmp	r3, r4
 8008d12:	d002      	beq.n	8008d1a <ai_layers_post_init_all+0x26>
 8008d14:	461c      	mov	r4, r3
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1f0      	bne.n	8008cfc <ai_layers_post_init_all+0x8>
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	bd38      	pop	{r3, r4, r5, pc}
 8008d1e:	4625      	mov	r5, r4
 8008d20:	e7fb      	b.n	8008d1a <ai_layers_post_init_all+0x26>
 8008d22:	bf00      	nop

08008d24 <ai_layers_forward_all>:
 8008d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d28:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8008d2a:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8008d2c:	4604      	mov	r4, r0
 8008d2e:	2f00      	cmp	r7, #0
 8008d30:	d02c      	beq.n	8008d8c <ai_layers_forward_all+0x68>
 8008d32:	2d00      	cmp	r5, #0
 8008d34:	d03f      	beq.n	8008db6 <ai_layers_forward_all+0x92>
 8008d36:	6385      	str	r5, [r0, #56]	; 0x38
 8008d38:	4629      	mov	r1, r5
 8008d3a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008d3c:	2001      	movs	r0, #1
 8008d3e:	47b8      	blx	r7
 8008d40:	2600      	movs	r6, #0
 8008d42:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008d44:	46b0      	mov	r8, r6
 8008d46:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008d48:	2002      	movs	r0, #2
 8008d4a:	47b8      	blx	r7
 8008d4c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8008d4e:	696b      	ldr	r3, [r5, #20]
 8008d50:	4628      	mov	r0, r5
 8008d52:	4798      	blx	r3
 8008d54:	692b      	ldr	r3, [r5, #16]
 8008d56:	429d      	cmp	r5, r3
 8008d58:	f04f 0003 	mov.w	r0, #3
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	d009      	beq.n	8008d74 <ai_layers_forward_all+0x50>
 8008d60:	63a3      	str	r3, [r4, #56]	; 0x38
 8008d62:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008d64:	47b8      	blx	r7
 8008d66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008d68:	3601      	adds	r6, #1
 8008d6a:	2900      	cmp	r1, #0
 8008d6c:	d1eb      	bne.n	8008d46 <ai_layers_forward_all+0x22>
 8008d6e:	4630      	mov	r0, r6
 8008d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d74:	2100      	movs	r1, #0
 8008d76:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 8008d7a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008d7c:	47b8      	blx	r7
 8008d7e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008d80:	3601      	adds	r6, #1
 8008d82:	2900      	cmp	r1, #0
 8008d84:	d1df      	bne.n	8008d46 <ai_layers_forward_all+0x22>
 8008d86:	4630      	mov	r0, r6
 8008d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d8c:	b19d      	cbz	r5, 8008db6 <ai_layers_forward_all+0x92>
 8008d8e:	6385      	str	r5, [r0, #56]	; 0x38
 8008d90:	463e      	mov	r6, r7
 8008d92:	696b      	ldr	r3, [r5, #20]
 8008d94:	4628      	mov	r0, r5
 8008d96:	4798      	blx	r3
 8008d98:	692b      	ldr	r3, [r5, #16]
 8008d9a:	42ab      	cmp	r3, r5
 8008d9c:	f106 0601 	add.w	r6, r6, #1
 8008da0:	d004      	beq.n	8008dac <ai_layers_forward_all+0x88>
 8008da2:	63a3      	str	r3, [r4, #56]	; 0x38
 8008da4:	461d      	mov	r5, r3
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d1f3      	bne.n	8008d92 <ai_layers_forward_all+0x6e>
 8008daa:	e7e0      	b.n	8008d6e <ai_layers_forward_all+0x4a>
 8008dac:	2300      	movs	r3, #0
 8008dae:	63a3      	str	r3, [r4, #56]	; 0x38
 8008db0:	4630      	mov	r0, r6
 8008db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008db6:	462e      	mov	r6, r5
 8008db8:	4630      	mov	r0, r6
 8008dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dbe:	bf00      	nop

08008dc0 <ai_layers_destroy_all>:
 8008dc0:	b538      	push	{r3, r4, r5, lr}
 8008dc2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008dc4:	b18c      	cbz	r4, 8008dea <ai_layers_destroy_all+0x2a>
 8008dc6:	2500      	movs	r5, #0
 8008dc8:	6863      	ldr	r3, [r4, #4]
 8008dca:	f013 0f04 	tst.w	r3, #4
 8008dce:	4620      	mov	r0, r4
 8008dd0:	d003      	beq.n	8008dda <ai_layers_destroy_all+0x1a>
 8008dd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008dd4:	b10b      	cbz	r3, 8008dda <ai_layers_destroy_all+0x1a>
 8008dd6:	4798      	blx	r3
 8008dd8:	3501      	adds	r5, #1
 8008dda:	6923      	ldr	r3, [r4, #16]
 8008ddc:	42a3      	cmp	r3, r4
 8008dde:	d002      	beq.n	8008de6 <ai_layers_destroy_all+0x26>
 8008de0:	461c      	mov	r4, r3
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1f0      	bne.n	8008dc8 <ai_layers_destroy_all+0x8>
 8008de6:	4628      	mov	r0, r5
 8008de8:	bd38      	pop	{r3, r4, r5, pc}
 8008dea:	4625      	mov	r5, r4
 8008dec:	e7fb      	b.n	8008de6 <ai_layers_destroy_all+0x26>
 8008dee:	bf00      	nop

08008df0 <ai_array_to_buffer_fmt>:
 8008df0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d029      	beq.n	8008e4c <ai_array_to_buffer_fmt+0x5c>
 8008df8:	4a22      	ldr	r2, [pc, #136]	; (8008e84 <ai_array_to_buffer_fmt+0x94>)
 8008dfa:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d010      	beq.n	8008e24 <ai_array_to_buffer_fmt+0x34>
 8008e02:	dd13      	ble.n	8008e2c <ai_array_to_buffer_fmt+0x3c>
 8008e04:	4a20      	ldr	r2, [pc, #128]	; (8008e88 <ai_array_to_buffer_fmt+0x98>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d00c      	beq.n	8008e24 <ai_array_to_buffer_fmt+0x34>
 8008e0a:	dc27      	bgt.n	8008e5c <ai_array_to_buffer_fmt+0x6c>
 8008e0c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d007      	beq.n	8008e24 <ai_array_to_buffer_fmt+0x34>
 8008e14:	3207      	adds	r2, #7
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d004      	beq.n	8008e24 <ai_array_to_buffer_fmt+0x34>
 8008e1a:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d000      	beq.n	8008e24 <ai_array_to_buffer_fmt+0x34>
 8008e22:	2340      	movs	r3, #64	; 0x40
 8008e24:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008e28:	4318      	orrs	r0, r3
 8008e2a:	4770      	bx	lr
 8008e2c:	4a17      	ldr	r2, [pc, #92]	; (8008e8c <ai_array_to_buffer_fmt+0x9c>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d0f8      	beq.n	8008e24 <ai_array_to_buffer_fmt+0x34>
 8008e32:	dd1e      	ble.n	8008e72 <ai_array_to_buffer_fmt+0x82>
 8008e34:	4a16      	ldr	r2, [pc, #88]	; (8008e90 <ai_array_to_buffer_fmt+0xa0>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d0f4      	beq.n	8008e24 <ai_array_to_buffer_fmt+0x34>
 8008e3a:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d0f0      	beq.n	8008e24 <ai_array_to_buffer_fmt+0x34>
 8008e42:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d1eb      	bne.n	8008e22 <ai_array_to_buffer_fmt+0x32>
 8008e4a:	e7eb      	b.n	8008e24 <ai_array_to_buffer_fmt+0x34>
 8008e4c:	4b11      	ldr	r3, [pc, #68]	; (8008e94 <ai_array_to_buffer_fmt+0xa4>)
 8008e4e:	4003      	ands	r3, r0
 8008e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e54:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008e58:	4318      	orrs	r0, r3
 8008e5a:	4770      	bx	lr
 8008e5c:	4a0e      	ldr	r2, [pc, #56]	; (8008e98 <ai_array_to_buffer_fmt+0xa8>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d0e0      	beq.n	8008e24 <ai_array_to_buffer_fmt+0x34>
 8008e62:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d0dc      	beq.n	8008e24 <ai_array_to_buffer_fmt+0x34>
 8008e6a:	4a0c      	ldr	r2, [pc, #48]	; (8008e9c <ai_array_to_buffer_fmt+0xac>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d1d8      	bne.n	8008e22 <ai_array_to_buffer_fmt+0x32>
 8008e70:	e7d8      	b.n	8008e24 <ai_array_to_buffer_fmt+0x34>
 8008e72:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d0d4      	beq.n	8008e24 <ai_array_to_buffer_fmt+0x34>
 8008e7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d0d0      	beq.n	8008e24 <ai_array_to_buffer_fmt+0x34>
 8008e82:	e7ce      	b.n	8008e22 <ai_array_to_buffer_fmt+0x32>
 8008e84:	00060440 	.word	0x00060440
 8008e88:	00840840 	.word	0x00840840
 8008e8c:	00040447 	.word	0x00040447
 8008e90:	0004084f 	.word	0x0004084f
 8008e94:	00803fff 	.word	0x00803fff
 8008e98:	00841040 	.word	0x00841040
 8008e9c:	0084084f 	.word	0x0084084f

08008ea0 <ai_array_get_byte_size>:
 8008ea0:	b1c1      	cbz	r1, 8008ed4 <ai_array_get_byte_size+0x34>
 8008ea2:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8008ea6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8008eaa:	4413      	add	r3, r2
 8008eac:	fb01 f103 	mul.w	r1, r1, r3
 8008eb0:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8008eb4:	3107      	adds	r1, #7
 8008eb6:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8008eba:	f021 0107 	bic.w	r1, r1, #7
 8008ebe:	2804      	cmp	r0, #4
 8008ec0:	fa21 f102 	lsr.w	r1, r1, r2
 8008ec4:	d008      	beq.n	8008ed8 <ai_array_get_byte_size+0x38>
 8008ec6:	2808      	cmp	r0, #8
 8008ec8:	d101      	bne.n	8008ece <ai_array_get_byte_size+0x2e>
 8008eca:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8008ece:	3107      	adds	r1, #7
 8008ed0:	08c8      	lsrs	r0, r1, #3
 8008ed2:	4770      	bx	lr
 8008ed4:	4608      	mov	r0, r1
 8008ed6:	4770      	bx	lr
 8008ed8:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8008edc:	3107      	adds	r1, #7
 8008ede:	08c8      	lsrs	r0, r1, #3
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop

08008ee4 <__errno>:
 8008ee4:	4b01      	ldr	r3, [pc, #4]	; (8008eec <__errno+0x8>)
 8008ee6:	6818      	ldr	r0, [r3, #0]
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	200006b4 	.word	0x200006b4

08008ef0 <__libc_init_array>:
 8008ef0:	b570      	push	{r4, r5, r6, lr}
 8008ef2:	4d0d      	ldr	r5, [pc, #52]	; (8008f28 <__libc_init_array+0x38>)
 8008ef4:	4c0d      	ldr	r4, [pc, #52]	; (8008f2c <__libc_init_array+0x3c>)
 8008ef6:	1b64      	subs	r4, r4, r5
 8008ef8:	10a4      	asrs	r4, r4, #2
 8008efa:	2600      	movs	r6, #0
 8008efc:	42a6      	cmp	r6, r4
 8008efe:	d109      	bne.n	8008f14 <__libc_init_array+0x24>
 8008f00:	4d0b      	ldr	r5, [pc, #44]	; (8008f30 <__libc_init_array+0x40>)
 8008f02:	4c0c      	ldr	r4, [pc, #48]	; (8008f34 <__libc_init_array+0x44>)
 8008f04:	f001 f94a 	bl	800a19c <_init>
 8008f08:	1b64      	subs	r4, r4, r5
 8008f0a:	10a4      	asrs	r4, r4, #2
 8008f0c:	2600      	movs	r6, #0
 8008f0e:	42a6      	cmp	r6, r4
 8008f10:	d105      	bne.n	8008f1e <__libc_init_array+0x2e>
 8008f12:	bd70      	pop	{r4, r5, r6, pc}
 8008f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f18:	4798      	blx	r3
 8008f1a:	3601      	adds	r6, #1
 8008f1c:	e7ee      	b.n	8008efc <__libc_init_array+0xc>
 8008f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f22:	4798      	blx	r3
 8008f24:	3601      	adds	r6, #1
 8008f26:	e7f2      	b.n	8008f0e <__libc_init_array+0x1e>
 8008f28:	0800b918 	.word	0x0800b918
 8008f2c:	0800b918 	.word	0x0800b918
 8008f30:	0800b918 	.word	0x0800b918
 8008f34:	0800b91c 	.word	0x0800b91c

08008f38 <memcpy>:
 8008f38:	440a      	add	r2, r1
 8008f3a:	4291      	cmp	r1, r2
 8008f3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f40:	d100      	bne.n	8008f44 <memcpy+0xc>
 8008f42:	4770      	bx	lr
 8008f44:	b510      	push	{r4, lr}
 8008f46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f4e:	4291      	cmp	r1, r2
 8008f50:	d1f9      	bne.n	8008f46 <memcpy+0xe>
 8008f52:	bd10      	pop	{r4, pc}

08008f54 <memset>:
 8008f54:	4402      	add	r2, r0
 8008f56:	4603      	mov	r3, r0
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d100      	bne.n	8008f5e <memset+0xa>
 8008f5c:	4770      	bx	lr
 8008f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8008f62:	e7f9      	b.n	8008f58 <memset+0x4>

08008f64 <_free_r>:
 8008f64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f66:	2900      	cmp	r1, #0
 8008f68:	d048      	beq.n	8008ffc <_free_r+0x98>
 8008f6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f6e:	9001      	str	r0, [sp, #4]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f1a1 0404 	sub.w	r4, r1, #4
 8008f76:	bfb8      	it	lt
 8008f78:	18e4      	addlt	r4, r4, r3
 8008f7a:	f000 fc19 	bl	80097b0 <__malloc_lock>
 8008f7e:	4a20      	ldr	r2, [pc, #128]	; (8009000 <_free_r+0x9c>)
 8008f80:	9801      	ldr	r0, [sp, #4]
 8008f82:	6813      	ldr	r3, [r2, #0]
 8008f84:	4615      	mov	r5, r2
 8008f86:	b933      	cbnz	r3, 8008f96 <_free_r+0x32>
 8008f88:	6063      	str	r3, [r4, #4]
 8008f8a:	6014      	str	r4, [r2, #0]
 8008f8c:	b003      	add	sp, #12
 8008f8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f92:	f000 bc13 	b.w	80097bc <__malloc_unlock>
 8008f96:	42a3      	cmp	r3, r4
 8008f98:	d90b      	bls.n	8008fb2 <_free_r+0x4e>
 8008f9a:	6821      	ldr	r1, [r4, #0]
 8008f9c:	1862      	adds	r2, r4, r1
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	bf04      	itt	eq
 8008fa2:	681a      	ldreq	r2, [r3, #0]
 8008fa4:	685b      	ldreq	r3, [r3, #4]
 8008fa6:	6063      	str	r3, [r4, #4]
 8008fa8:	bf04      	itt	eq
 8008faa:	1852      	addeq	r2, r2, r1
 8008fac:	6022      	streq	r2, [r4, #0]
 8008fae:	602c      	str	r4, [r5, #0]
 8008fb0:	e7ec      	b.n	8008f8c <_free_r+0x28>
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	b10b      	cbz	r3, 8008fbc <_free_r+0x58>
 8008fb8:	42a3      	cmp	r3, r4
 8008fba:	d9fa      	bls.n	8008fb2 <_free_r+0x4e>
 8008fbc:	6811      	ldr	r1, [r2, #0]
 8008fbe:	1855      	adds	r5, r2, r1
 8008fc0:	42a5      	cmp	r5, r4
 8008fc2:	d10b      	bne.n	8008fdc <_free_r+0x78>
 8008fc4:	6824      	ldr	r4, [r4, #0]
 8008fc6:	4421      	add	r1, r4
 8008fc8:	1854      	adds	r4, r2, r1
 8008fca:	42a3      	cmp	r3, r4
 8008fcc:	6011      	str	r1, [r2, #0]
 8008fce:	d1dd      	bne.n	8008f8c <_free_r+0x28>
 8008fd0:	681c      	ldr	r4, [r3, #0]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	6053      	str	r3, [r2, #4]
 8008fd6:	4421      	add	r1, r4
 8008fd8:	6011      	str	r1, [r2, #0]
 8008fda:	e7d7      	b.n	8008f8c <_free_r+0x28>
 8008fdc:	d902      	bls.n	8008fe4 <_free_r+0x80>
 8008fde:	230c      	movs	r3, #12
 8008fe0:	6003      	str	r3, [r0, #0]
 8008fe2:	e7d3      	b.n	8008f8c <_free_r+0x28>
 8008fe4:	6825      	ldr	r5, [r4, #0]
 8008fe6:	1961      	adds	r1, r4, r5
 8008fe8:	428b      	cmp	r3, r1
 8008fea:	bf04      	itt	eq
 8008fec:	6819      	ldreq	r1, [r3, #0]
 8008fee:	685b      	ldreq	r3, [r3, #4]
 8008ff0:	6063      	str	r3, [r4, #4]
 8008ff2:	bf04      	itt	eq
 8008ff4:	1949      	addeq	r1, r1, r5
 8008ff6:	6021      	streq	r1, [r4, #0]
 8008ff8:	6054      	str	r4, [r2, #4]
 8008ffa:	e7c7      	b.n	8008f8c <_free_r+0x28>
 8008ffc:	b003      	add	sp, #12
 8008ffe:	bd30      	pop	{r4, r5, pc}
 8009000:	200009d0 	.word	0x200009d0

08009004 <_malloc_r>:
 8009004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009006:	1ccd      	adds	r5, r1, #3
 8009008:	f025 0503 	bic.w	r5, r5, #3
 800900c:	3508      	adds	r5, #8
 800900e:	2d0c      	cmp	r5, #12
 8009010:	bf38      	it	cc
 8009012:	250c      	movcc	r5, #12
 8009014:	2d00      	cmp	r5, #0
 8009016:	4606      	mov	r6, r0
 8009018:	db01      	blt.n	800901e <_malloc_r+0x1a>
 800901a:	42a9      	cmp	r1, r5
 800901c:	d903      	bls.n	8009026 <_malloc_r+0x22>
 800901e:	230c      	movs	r3, #12
 8009020:	6033      	str	r3, [r6, #0]
 8009022:	2000      	movs	r0, #0
 8009024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009026:	f000 fbc3 	bl	80097b0 <__malloc_lock>
 800902a:	4921      	ldr	r1, [pc, #132]	; (80090b0 <_malloc_r+0xac>)
 800902c:	680a      	ldr	r2, [r1, #0]
 800902e:	4614      	mov	r4, r2
 8009030:	b99c      	cbnz	r4, 800905a <_malloc_r+0x56>
 8009032:	4f20      	ldr	r7, [pc, #128]	; (80090b4 <_malloc_r+0xb0>)
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	b923      	cbnz	r3, 8009042 <_malloc_r+0x3e>
 8009038:	4621      	mov	r1, r4
 800903a:	4630      	mov	r0, r6
 800903c:	f000 f8ca 	bl	80091d4 <_sbrk_r>
 8009040:	6038      	str	r0, [r7, #0]
 8009042:	4629      	mov	r1, r5
 8009044:	4630      	mov	r0, r6
 8009046:	f000 f8c5 	bl	80091d4 <_sbrk_r>
 800904a:	1c43      	adds	r3, r0, #1
 800904c:	d123      	bne.n	8009096 <_malloc_r+0x92>
 800904e:	230c      	movs	r3, #12
 8009050:	6033      	str	r3, [r6, #0]
 8009052:	4630      	mov	r0, r6
 8009054:	f000 fbb2 	bl	80097bc <__malloc_unlock>
 8009058:	e7e3      	b.n	8009022 <_malloc_r+0x1e>
 800905a:	6823      	ldr	r3, [r4, #0]
 800905c:	1b5b      	subs	r3, r3, r5
 800905e:	d417      	bmi.n	8009090 <_malloc_r+0x8c>
 8009060:	2b0b      	cmp	r3, #11
 8009062:	d903      	bls.n	800906c <_malloc_r+0x68>
 8009064:	6023      	str	r3, [r4, #0]
 8009066:	441c      	add	r4, r3
 8009068:	6025      	str	r5, [r4, #0]
 800906a:	e004      	b.n	8009076 <_malloc_r+0x72>
 800906c:	6863      	ldr	r3, [r4, #4]
 800906e:	42a2      	cmp	r2, r4
 8009070:	bf0c      	ite	eq
 8009072:	600b      	streq	r3, [r1, #0]
 8009074:	6053      	strne	r3, [r2, #4]
 8009076:	4630      	mov	r0, r6
 8009078:	f000 fba0 	bl	80097bc <__malloc_unlock>
 800907c:	f104 000b 	add.w	r0, r4, #11
 8009080:	1d23      	adds	r3, r4, #4
 8009082:	f020 0007 	bic.w	r0, r0, #7
 8009086:	1ac2      	subs	r2, r0, r3
 8009088:	d0cc      	beq.n	8009024 <_malloc_r+0x20>
 800908a:	1a1b      	subs	r3, r3, r0
 800908c:	50a3      	str	r3, [r4, r2]
 800908e:	e7c9      	b.n	8009024 <_malloc_r+0x20>
 8009090:	4622      	mov	r2, r4
 8009092:	6864      	ldr	r4, [r4, #4]
 8009094:	e7cc      	b.n	8009030 <_malloc_r+0x2c>
 8009096:	1cc4      	adds	r4, r0, #3
 8009098:	f024 0403 	bic.w	r4, r4, #3
 800909c:	42a0      	cmp	r0, r4
 800909e:	d0e3      	beq.n	8009068 <_malloc_r+0x64>
 80090a0:	1a21      	subs	r1, r4, r0
 80090a2:	4630      	mov	r0, r6
 80090a4:	f000 f896 	bl	80091d4 <_sbrk_r>
 80090a8:	3001      	adds	r0, #1
 80090aa:	d1dd      	bne.n	8009068 <_malloc_r+0x64>
 80090ac:	e7cf      	b.n	800904e <_malloc_r+0x4a>
 80090ae:	bf00      	nop
 80090b0:	200009d0 	.word	0x200009d0
 80090b4:	200009d4 	.word	0x200009d4

080090b8 <iprintf>:
 80090b8:	b40f      	push	{r0, r1, r2, r3}
 80090ba:	4b0a      	ldr	r3, [pc, #40]	; (80090e4 <iprintf+0x2c>)
 80090bc:	b513      	push	{r0, r1, r4, lr}
 80090be:	681c      	ldr	r4, [r3, #0]
 80090c0:	b124      	cbz	r4, 80090cc <iprintf+0x14>
 80090c2:	69a3      	ldr	r3, [r4, #24]
 80090c4:	b913      	cbnz	r3, 80090cc <iprintf+0x14>
 80090c6:	4620      	mov	r0, r4
 80090c8:	f000 fa6e 	bl	80095a8 <__sinit>
 80090cc:	ab05      	add	r3, sp, #20
 80090ce:	9a04      	ldr	r2, [sp, #16]
 80090d0:	68a1      	ldr	r1, [r4, #8]
 80090d2:	9301      	str	r3, [sp, #4]
 80090d4:	4620      	mov	r0, r4
 80090d6:	f000 fba1 	bl	800981c <_vfiprintf_r>
 80090da:	b002      	add	sp, #8
 80090dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090e0:	b004      	add	sp, #16
 80090e2:	4770      	bx	lr
 80090e4:	200006b4 	.word	0x200006b4

080090e8 <_puts_r>:
 80090e8:	b570      	push	{r4, r5, r6, lr}
 80090ea:	460e      	mov	r6, r1
 80090ec:	4605      	mov	r5, r0
 80090ee:	b118      	cbz	r0, 80090f8 <_puts_r+0x10>
 80090f0:	6983      	ldr	r3, [r0, #24]
 80090f2:	b90b      	cbnz	r3, 80090f8 <_puts_r+0x10>
 80090f4:	f000 fa58 	bl	80095a8 <__sinit>
 80090f8:	69ab      	ldr	r3, [r5, #24]
 80090fa:	68ac      	ldr	r4, [r5, #8]
 80090fc:	b913      	cbnz	r3, 8009104 <_puts_r+0x1c>
 80090fe:	4628      	mov	r0, r5
 8009100:	f000 fa52 	bl	80095a8 <__sinit>
 8009104:	4b2c      	ldr	r3, [pc, #176]	; (80091b8 <_puts_r+0xd0>)
 8009106:	429c      	cmp	r4, r3
 8009108:	d120      	bne.n	800914c <_puts_r+0x64>
 800910a:	686c      	ldr	r4, [r5, #4]
 800910c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800910e:	07db      	lsls	r3, r3, #31
 8009110:	d405      	bmi.n	800911e <_puts_r+0x36>
 8009112:	89a3      	ldrh	r3, [r4, #12]
 8009114:	0598      	lsls	r0, r3, #22
 8009116:	d402      	bmi.n	800911e <_puts_r+0x36>
 8009118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800911a:	f000 fae3 	bl	80096e4 <__retarget_lock_acquire_recursive>
 800911e:	89a3      	ldrh	r3, [r4, #12]
 8009120:	0719      	lsls	r1, r3, #28
 8009122:	d51d      	bpl.n	8009160 <_puts_r+0x78>
 8009124:	6923      	ldr	r3, [r4, #16]
 8009126:	b1db      	cbz	r3, 8009160 <_puts_r+0x78>
 8009128:	3e01      	subs	r6, #1
 800912a:	68a3      	ldr	r3, [r4, #8]
 800912c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009130:	3b01      	subs	r3, #1
 8009132:	60a3      	str	r3, [r4, #8]
 8009134:	bb39      	cbnz	r1, 8009186 <_puts_r+0x9e>
 8009136:	2b00      	cmp	r3, #0
 8009138:	da38      	bge.n	80091ac <_puts_r+0xc4>
 800913a:	4622      	mov	r2, r4
 800913c:	210a      	movs	r1, #10
 800913e:	4628      	mov	r0, r5
 8009140:	f000 f858 	bl	80091f4 <__swbuf_r>
 8009144:	3001      	adds	r0, #1
 8009146:	d011      	beq.n	800916c <_puts_r+0x84>
 8009148:	250a      	movs	r5, #10
 800914a:	e011      	b.n	8009170 <_puts_r+0x88>
 800914c:	4b1b      	ldr	r3, [pc, #108]	; (80091bc <_puts_r+0xd4>)
 800914e:	429c      	cmp	r4, r3
 8009150:	d101      	bne.n	8009156 <_puts_r+0x6e>
 8009152:	68ac      	ldr	r4, [r5, #8]
 8009154:	e7da      	b.n	800910c <_puts_r+0x24>
 8009156:	4b1a      	ldr	r3, [pc, #104]	; (80091c0 <_puts_r+0xd8>)
 8009158:	429c      	cmp	r4, r3
 800915a:	bf08      	it	eq
 800915c:	68ec      	ldreq	r4, [r5, #12]
 800915e:	e7d5      	b.n	800910c <_puts_r+0x24>
 8009160:	4621      	mov	r1, r4
 8009162:	4628      	mov	r0, r5
 8009164:	f000 f898 	bl	8009298 <__swsetup_r>
 8009168:	2800      	cmp	r0, #0
 800916a:	d0dd      	beq.n	8009128 <_puts_r+0x40>
 800916c:	f04f 35ff 	mov.w	r5, #4294967295
 8009170:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009172:	07da      	lsls	r2, r3, #31
 8009174:	d405      	bmi.n	8009182 <_puts_r+0x9a>
 8009176:	89a3      	ldrh	r3, [r4, #12]
 8009178:	059b      	lsls	r3, r3, #22
 800917a:	d402      	bmi.n	8009182 <_puts_r+0x9a>
 800917c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800917e:	f000 fab2 	bl	80096e6 <__retarget_lock_release_recursive>
 8009182:	4628      	mov	r0, r5
 8009184:	bd70      	pop	{r4, r5, r6, pc}
 8009186:	2b00      	cmp	r3, #0
 8009188:	da04      	bge.n	8009194 <_puts_r+0xac>
 800918a:	69a2      	ldr	r2, [r4, #24]
 800918c:	429a      	cmp	r2, r3
 800918e:	dc06      	bgt.n	800919e <_puts_r+0xb6>
 8009190:	290a      	cmp	r1, #10
 8009192:	d004      	beq.n	800919e <_puts_r+0xb6>
 8009194:	6823      	ldr	r3, [r4, #0]
 8009196:	1c5a      	adds	r2, r3, #1
 8009198:	6022      	str	r2, [r4, #0]
 800919a:	7019      	strb	r1, [r3, #0]
 800919c:	e7c5      	b.n	800912a <_puts_r+0x42>
 800919e:	4622      	mov	r2, r4
 80091a0:	4628      	mov	r0, r5
 80091a2:	f000 f827 	bl	80091f4 <__swbuf_r>
 80091a6:	3001      	adds	r0, #1
 80091a8:	d1bf      	bne.n	800912a <_puts_r+0x42>
 80091aa:	e7df      	b.n	800916c <_puts_r+0x84>
 80091ac:	6823      	ldr	r3, [r4, #0]
 80091ae:	250a      	movs	r5, #10
 80091b0:	1c5a      	adds	r2, r3, #1
 80091b2:	6022      	str	r2, [r4, #0]
 80091b4:	701d      	strb	r5, [r3, #0]
 80091b6:	e7db      	b.n	8009170 <_puts_r+0x88>
 80091b8:	0800b884 	.word	0x0800b884
 80091bc:	0800b8a4 	.word	0x0800b8a4
 80091c0:	0800b864 	.word	0x0800b864

080091c4 <puts>:
 80091c4:	4b02      	ldr	r3, [pc, #8]	; (80091d0 <puts+0xc>)
 80091c6:	4601      	mov	r1, r0
 80091c8:	6818      	ldr	r0, [r3, #0]
 80091ca:	f7ff bf8d 	b.w	80090e8 <_puts_r>
 80091ce:	bf00      	nop
 80091d0:	200006b4 	.word	0x200006b4

080091d4 <_sbrk_r>:
 80091d4:	b538      	push	{r3, r4, r5, lr}
 80091d6:	4d06      	ldr	r5, [pc, #24]	; (80091f0 <_sbrk_r+0x1c>)
 80091d8:	2300      	movs	r3, #0
 80091da:	4604      	mov	r4, r0
 80091dc:	4608      	mov	r0, r1
 80091de:	602b      	str	r3, [r5, #0]
 80091e0:	f7f7 ff6e 	bl	80010c0 <_sbrk>
 80091e4:	1c43      	adds	r3, r0, #1
 80091e6:	d102      	bne.n	80091ee <_sbrk_r+0x1a>
 80091e8:	682b      	ldr	r3, [r5, #0]
 80091ea:	b103      	cbz	r3, 80091ee <_sbrk_r+0x1a>
 80091ec:	6023      	str	r3, [r4, #0]
 80091ee:	bd38      	pop	{r3, r4, r5, pc}
 80091f0:	20000bd4 	.word	0x20000bd4

080091f4 <__swbuf_r>:
 80091f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f6:	460e      	mov	r6, r1
 80091f8:	4614      	mov	r4, r2
 80091fa:	4605      	mov	r5, r0
 80091fc:	b118      	cbz	r0, 8009206 <__swbuf_r+0x12>
 80091fe:	6983      	ldr	r3, [r0, #24]
 8009200:	b90b      	cbnz	r3, 8009206 <__swbuf_r+0x12>
 8009202:	f000 f9d1 	bl	80095a8 <__sinit>
 8009206:	4b21      	ldr	r3, [pc, #132]	; (800928c <__swbuf_r+0x98>)
 8009208:	429c      	cmp	r4, r3
 800920a:	d12b      	bne.n	8009264 <__swbuf_r+0x70>
 800920c:	686c      	ldr	r4, [r5, #4]
 800920e:	69a3      	ldr	r3, [r4, #24]
 8009210:	60a3      	str	r3, [r4, #8]
 8009212:	89a3      	ldrh	r3, [r4, #12]
 8009214:	071a      	lsls	r2, r3, #28
 8009216:	d52f      	bpl.n	8009278 <__swbuf_r+0x84>
 8009218:	6923      	ldr	r3, [r4, #16]
 800921a:	b36b      	cbz	r3, 8009278 <__swbuf_r+0x84>
 800921c:	6923      	ldr	r3, [r4, #16]
 800921e:	6820      	ldr	r0, [r4, #0]
 8009220:	1ac0      	subs	r0, r0, r3
 8009222:	6963      	ldr	r3, [r4, #20]
 8009224:	b2f6      	uxtb	r6, r6
 8009226:	4283      	cmp	r3, r0
 8009228:	4637      	mov	r7, r6
 800922a:	dc04      	bgt.n	8009236 <__swbuf_r+0x42>
 800922c:	4621      	mov	r1, r4
 800922e:	4628      	mov	r0, r5
 8009230:	f000 f926 	bl	8009480 <_fflush_r>
 8009234:	bb30      	cbnz	r0, 8009284 <__swbuf_r+0x90>
 8009236:	68a3      	ldr	r3, [r4, #8]
 8009238:	3b01      	subs	r3, #1
 800923a:	60a3      	str	r3, [r4, #8]
 800923c:	6823      	ldr	r3, [r4, #0]
 800923e:	1c5a      	adds	r2, r3, #1
 8009240:	6022      	str	r2, [r4, #0]
 8009242:	701e      	strb	r6, [r3, #0]
 8009244:	6963      	ldr	r3, [r4, #20]
 8009246:	3001      	adds	r0, #1
 8009248:	4283      	cmp	r3, r0
 800924a:	d004      	beq.n	8009256 <__swbuf_r+0x62>
 800924c:	89a3      	ldrh	r3, [r4, #12]
 800924e:	07db      	lsls	r3, r3, #31
 8009250:	d506      	bpl.n	8009260 <__swbuf_r+0x6c>
 8009252:	2e0a      	cmp	r6, #10
 8009254:	d104      	bne.n	8009260 <__swbuf_r+0x6c>
 8009256:	4621      	mov	r1, r4
 8009258:	4628      	mov	r0, r5
 800925a:	f000 f911 	bl	8009480 <_fflush_r>
 800925e:	b988      	cbnz	r0, 8009284 <__swbuf_r+0x90>
 8009260:	4638      	mov	r0, r7
 8009262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009264:	4b0a      	ldr	r3, [pc, #40]	; (8009290 <__swbuf_r+0x9c>)
 8009266:	429c      	cmp	r4, r3
 8009268:	d101      	bne.n	800926e <__swbuf_r+0x7a>
 800926a:	68ac      	ldr	r4, [r5, #8]
 800926c:	e7cf      	b.n	800920e <__swbuf_r+0x1a>
 800926e:	4b09      	ldr	r3, [pc, #36]	; (8009294 <__swbuf_r+0xa0>)
 8009270:	429c      	cmp	r4, r3
 8009272:	bf08      	it	eq
 8009274:	68ec      	ldreq	r4, [r5, #12]
 8009276:	e7ca      	b.n	800920e <__swbuf_r+0x1a>
 8009278:	4621      	mov	r1, r4
 800927a:	4628      	mov	r0, r5
 800927c:	f000 f80c 	bl	8009298 <__swsetup_r>
 8009280:	2800      	cmp	r0, #0
 8009282:	d0cb      	beq.n	800921c <__swbuf_r+0x28>
 8009284:	f04f 37ff 	mov.w	r7, #4294967295
 8009288:	e7ea      	b.n	8009260 <__swbuf_r+0x6c>
 800928a:	bf00      	nop
 800928c:	0800b884 	.word	0x0800b884
 8009290:	0800b8a4 	.word	0x0800b8a4
 8009294:	0800b864 	.word	0x0800b864

08009298 <__swsetup_r>:
 8009298:	4b32      	ldr	r3, [pc, #200]	; (8009364 <__swsetup_r+0xcc>)
 800929a:	b570      	push	{r4, r5, r6, lr}
 800929c:	681d      	ldr	r5, [r3, #0]
 800929e:	4606      	mov	r6, r0
 80092a0:	460c      	mov	r4, r1
 80092a2:	b125      	cbz	r5, 80092ae <__swsetup_r+0x16>
 80092a4:	69ab      	ldr	r3, [r5, #24]
 80092a6:	b913      	cbnz	r3, 80092ae <__swsetup_r+0x16>
 80092a8:	4628      	mov	r0, r5
 80092aa:	f000 f97d 	bl	80095a8 <__sinit>
 80092ae:	4b2e      	ldr	r3, [pc, #184]	; (8009368 <__swsetup_r+0xd0>)
 80092b0:	429c      	cmp	r4, r3
 80092b2:	d10f      	bne.n	80092d4 <__swsetup_r+0x3c>
 80092b4:	686c      	ldr	r4, [r5, #4]
 80092b6:	89a3      	ldrh	r3, [r4, #12]
 80092b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092bc:	0719      	lsls	r1, r3, #28
 80092be:	d42c      	bmi.n	800931a <__swsetup_r+0x82>
 80092c0:	06dd      	lsls	r5, r3, #27
 80092c2:	d411      	bmi.n	80092e8 <__swsetup_r+0x50>
 80092c4:	2309      	movs	r3, #9
 80092c6:	6033      	str	r3, [r6, #0]
 80092c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80092cc:	81a3      	strh	r3, [r4, #12]
 80092ce:	f04f 30ff 	mov.w	r0, #4294967295
 80092d2:	e03e      	b.n	8009352 <__swsetup_r+0xba>
 80092d4:	4b25      	ldr	r3, [pc, #148]	; (800936c <__swsetup_r+0xd4>)
 80092d6:	429c      	cmp	r4, r3
 80092d8:	d101      	bne.n	80092de <__swsetup_r+0x46>
 80092da:	68ac      	ldr	r4, [r5, #8]
 80092dc:	e7eb      	b.n	80092b6 <__swsetup_r+0x1e>
 80092de:	4b24      	ldr	r3, [pc, #144]	; (8009370 <__swsetup_r+0xd8>)
 80092e0:	429c      	cmp	r4, r3
 80092e2:	bf08      	it	eq
 80092e4:	68ec      	ldreq	r4, [r5, #12]
 80092e6:	e7e6      	b.n	80092b6 <__swsetup_r+0x1e>
 80092e8:	0758      	lsls	r0, r3, #29
 80092ea:	d512      	bpl.n	8009312 <__swsetup_r+0x7a>
 80092ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092ee:	b141      	cbz	r1, 8009302 <__swsetup_r+0x6a>
 80092f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092f4:	4299      	cmp	r1, r3
 80092f6:	d002      	beq.n	80092fe <__swsetup_r+0x66>
 80092f8:	4630      	mov	r0, r6
 80092fa:	f7ff fe33 	bl	8008f64 <_free_r>
 80092fe:	2300      	movs	r3, #0
 8009300:	6363      	str	r3, [r4, #52]	; 0x34
 8009302:	89a3      	ldrh	r3, [r4, #12]
 8009304:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009308:	81a3      	strh	r3, [r4, #12]
 800930a:	2300      	movs	r3, #0
 800930c:	6063      	str	r3, [r4, #4]
 800930e:	6923      	ldr	r3, [r4, #16]
 8009310:	6023      	str	r3, [r4, #0]
 8009312:	89a3      	ldrh	r3, [r4, #12]
 8009314:	f043 0308 	orr.w	r3, r3, #8
 8009318:	81a3      	strh	r3, [r4, #12]
 800931a:	6923      	ldr	r3, [r4, #16]
 800931c:	b94b      	cbnz	r3, 8009332 <__swsetup_r+0x9a>
 800931e:	89a3      	ldrh	r3, [r4, #12]
 8009320:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009328:	d003      	beq.n	8009332 <__swsetup_r+0x9a>
 800932a:	4621      	mov	r1, r4
 800932c:	4630      	mov	r0, r6
 800932e:	f000 f9ff 	bl	8009730 <__smakebuf_r>
 8009332:	89a0      	ldrh	r0, [r4, #12]
 8009334:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009338:	f010 0301 	ands.w	r3, r0, #1
 800933c:	d00a      	beq.n	8009354 <__swsetup_r+0xbc>
 800933e:	2300      	movs	r3, #0
 8009340:	60a3      	str	r3, [r4, #8]
 8009342:	6963      	ldr	r3, [r4, #20]
 8009344:	425b      	negs	r3, r3
 8009346:	61a3      	str	r3, [r4, #24]
 8009348:	6923      	ldr	r3, [r4, #16]
 800934a:	b943      	cbnz	r3, 800935e <__swsetup_r+0xc6>
 800934c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009350:	d1ba      	bne.n	80092c8 <__swsetup_r+0x30>
 8009352:	bd70      	pop	{r4, r5, r6, pc}
 8009354:	0781      	lsls	r1, r0, #30
 8009356:	bf58      	it	pl
 8009358:	6963      	ldrpl	r3, [r4, #20]
 800935a:	60a3      	str	r3, [r4, #8]
 800935c:	e7f4      	b.n	8009348 <__swsetup_r+0xb0>
 800935e:	2000      	movs	r0, #0
 8009360:	e7f7      	b.n	8009352 <__swsetup_r+0xba>
 8009362:	bf00      	nop
 8009364:	200006b4 	.word	0x200006b4
 8009368:	0800b884 	.word	0x0800b884
 800936c:	0800b8a4 	.word	0x0800b8a4
 8009370:	0800b864 	.word	0x0800b864

08009374 <__sflush_r>:
 8009374:	898a      	ldrh	r2, [r1, #12]
 8009376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800937a:	4605      	mov	r5, r0
 800937c:	0710      	lsls	r0, r2, #28
 800937e:	460c      	mov	r4, r1
 8009380:	d458      	bmi.n	8009434 <__sflush_r+0xc0>
 8009382:	684b      	ldr	r3, [r1, #4]
 8009384:	2b00      	cmp	r3, #0
 8009386:	dc05      	bgt.n	8009394 <__sflush_r+0x20>
 8009388:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800938a:	2b00      	cmp	r3, #0
 800938c:	dc02      	bgt.n	8009394 <__sflush_r+0x20>
 800938e:	2000      	movs	r0, #0
 8009390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009394:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009396:	2e00      	cmp	r6, #0
 8009398:	d0f9      	beq.n	800938e <__sflush_r+0x1a>
 800939a:	2300      	movs	r3, #0
 800939c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80093a0:	682f      	ldr	r7, [r5, #0]
 80093a2:	602b      	str	r3, [r5, #0]
 80093a4:	d032      	beq.n	800940c <__sflush_r+0x98>
 80093a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80093a8:	89a3      	ldrh	r3, [r4, #12]
 80093aa:	075a      	lsls	r2, r3, #29
 80093ac:	d505      	bpl.n	80093ba <__sflush_r+0x46>
 80093ae:	6863      	ldr	r3, [r4, #4]
 80093b0:	1ac0      	subs	r0, r0, r3
 80093b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80093b4:	b10b      	cbz	r3, 80093ba <__sflush_r+0x46>
 80093b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80093b8:	1ac0      	subs	r0, r0, r3
 80093ba:	2300      	movs	r3, #0
 80093bc:	4602      	mov	r2, r0
 80093be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093c0:	6a21      	ldr	r1, [r4, #32]
 80093c2:	4628      	mov	r0, r5
 80093c4:	47b0      	blx	r6
 80093c6:	1c43      	adds	r3, r0, #1
 80093c8:	89a3      	ldrh	r3, [r4, #12]
 80093ca:	d106      	bne.n	80093da <__sflush_r+0x66>
 80093cc:	6829      	ldr	r1, [r5, #0]
 80093ce:	291d      	cmp	r1, #29
 80093d0:	d82c      	bhi.n	800942c <__sflush_r+0xb8>
 80093d2:	4a2a      	ldr	r2, [pc, #168]	; (800947c <__sflush_r+0x108>)
 80093d4:	40ca      	lsrs	r2, r1
 80093d6:	07d6      	lsls	r6, r2, #31
 80093d8:	d528      	bpl.n	800942c <__sflush_r+0xb8>
 80093da:	2200      	movs	r2, #0
 80093dc:	6062      	str	r2, [r4, #4]
 80093de:	04d9      	lsls	r1, r3, #19
 80093e0:	6922      	ldr	r2, [r4, #16]
 80093e2:	6022      	str	r2, [r4, #0]
 80093e4:	d504      	bpl.n	80093f0 <__sflush_r+0x7c>
 80093e6:	1c42      	adds	r2, r0, #1
 80093e8:	d101      	bne.n	80093ee <__sflush_r+0x7a>
 80093ea:	682b      	ldr	r3, [r5, #0]
 80093ec:	b903      	cbnz	r3, 80093f0 <__sflush_r+0x7c>
 80093ee:	6560      	str	r0, [r4, #84]	; 0x54
 80093f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093f2:	602f      	str	r7, [r5, #0]
 80093f4:	2900      	cmp	r1, #0
 80093f6:	d0ca      	beq.n	800938e <__sflush_r+0x1a>
 80093f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093fc:	4299      	cmp	r1, r3
 80093fe:	d002      	beq.n	8009406 <__sflush_r+0x92>
 8009400:	4628      	mov	r0, r5
 8009402:	f7ff fdaf 	bl	8008f64 <_free_r>
 8009406:	2000      	movs	r0, #0
 8009408:	6360      	str	r0, [r4, #52]	; 0x34
 800940a:	e7c1      	b.n	8009390 <__sflush_r+0x1c>
 800940c:	6a21      	ldr	r1, [r4, #32]
 800940e:	2301      	movs	r3, #1
 8009410:	4628      	mov	r0, r5
 8009412:	47b0      	blx	r6
 8009414:	1c41      	adds	r1, r0, #1
 8009416:	d1c7      	bne.n	80093a8 <__sflush_r+0x34>
 8009418:	682b      	ldr	r3, [r5, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d0c4      	beq.n	80093a8 <__sflush_r+0x34>
 800941e:	2b1d      	cmp	r3, #29
 8009420:	d001      	beq.n	8009426 <__sflush_r+0xb2>
 8009422:	2b16      	cmp	r3, #22
 8009424:	d101      	bne.n	800942a <__sflush_r+0xb6>
 8009426:	602f      	str	r7, [r5, #0]
 8009428:	e7b1      	b.n	800938e <__sflush_r+0x1a>
 800942a:	89a3      	ldrh	r3, [r4, #12]
 800942c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009430:	81a3      	strh	r3, [r4, #12]
 8009432:	e7ad      	b.n	8009390 <__sflush_r+0x1c>
 8009434:	690f      	ldr	r7, [r1, #16]
 8009436:	2f00      	cmp	r7, #0
 8009438:	d0a9      	beq.n	800938e <__sflush_r+0x1a>
 800943a:	0793      	lsls	r3, r2, #30
 800943c:	680e      	ldr	r6, [r1, #0]
 800943e:	bf08      	it	eq
 8009440:	694b      	ldreq	r3, [r1, #20]
 8009442:	600f      	str	r7, [r1, #0]
 8009444:	bf18      	it	ne
 8009446:	2300      	movne	r3, #0
 8009448:	eba6 0807 	sub.w	r8, r6, r7
 800944c:	608b      	str	r3, [r1, #8]
 800944e:	f1b8 0f00 	cmp.w	r8, #0
 8009452:	dd9c      	ble.n	800938e <__sflush_r+0x1a>
 8009454:	6a21      	ldr	r1, [r4, #32]
 8009456:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009458:	4643      	mov	r3, r8
 800945a:	463a      	mov	r2, r7
 800945c:	4628      	mov	r0, r5
 800945e:	47b0      	blx	r6
 8009460:	2800      	cmp	r0, #0
 8009462:	dc06      	bgt.n	8009472 <__sflush_r+0xfe>
 8009464:	89a3      	ldrh	r3, [r4, #12]
 8009466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800946a:	81a3      	strh	r3, [r4, #12]
 800946c:	f04f 30ff 	mov.w	r0, #4294967295
 8009470:	e78e      	b.n	8009390 <__sflush_r+0x1c>
 8009472:	4407      	add	r7, r0
 8009474:	eba8 0800 	sub.w	r8, r8, r0
 8009478:	e7e9      	b.n	800944e <__sflush_r+0xda>
 800947a:	bf00      	nop
 800947c:	20400001 	.word	0x20400001

08009480 <_fflush_r>:
 8009480:	b538      	push	{r3, r4, r5, lr}
 8009482:	690b      	ldr	r3, [r1, #16]
 8009484:	4605      	mov	r5, r0
 8009486:	460c      	mov	r4, r1
 8009488:	b913      	cbnz	r3, 8009490 <_fflush_r+0x10>
 800948a:	2500      	movs	r5, #0
 800948c:	4628      	mov	r0, r5
 800948e:	bd38      	pop	{r3, r4, r5, pc}
 8009490:	b118      	cbz	r0, 800949a <_fflush_r+0x1a>
 8009492:	6983      	ldr	r3, [r0, #24]
 8009494:	b90b      	cbnz	r3, 800949a <_fflush_r+0x1a>
 8009496:	f000 f887 	bl	80095a8 <__sinit>
 800949a:	4b14      	ldr	r3, [pc, #80]	; (80094ec <_fflush_r+0x6c>)
 800949c:	429c      	cmp	r4, r3
 800949e:	d11b      	bne.n	80094d8 <_fflush_r+0x58>
 80094a0:	686c      	ldr	r4, [r5, #4]
 80094a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d0ef      	beq.n	800948a <_fflush_r+0xa>
 80094aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80094ac:	07d0      	lsls	r0, r2, #31
 80094ae:	d404      	bmi.n	80094ba <_fflush_r+0x3a>
 80094b0:	0599      	lsls	r1, r3, #22
 80094b2:	d402      	bmi.n	80094ba <_fflush_r+0x3a>
 80094b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094b6:	f000 f915 	bl	80096e4 <__retarget_lock_acquire_recursive>
 80094ba:	4628      	mov	r0, r5
 80094bc:	4621      	mov	r1, r4
 80094be:	f7ff ff59 	bl	8009374 <__sflush_r>
 80094c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094c4:	07da      	lsls	r2, r3, #31
 80094c6:	4605      	mov	r5, r0
 80094c8:	d4e0      	bmi.n	800948c <_fflush_r+0xc>
 80094ca:	89a3      	ldrh	r3, [r4, #12]
 80094cc:	059b      	lsls	r3, r3, #22
 80094ce:	d4dd      	bmi.n	800948c <_fflush_r+0xc>
 80094d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094d2:	f000 f908 	bl	80096e6 <__retarget_lock_release_recursive>
 80094d6:	e7d9      	b.n	800948c <_fflush_r+0xc>
 80094d8:	4b05      	ldr	r3, [pc, #20]	; (80094f0 <_fflush_r+0x70>)
 80094da:	429c      	cmp	r4, r3
 80094dc:	d101      	bne.n	80094e2 <_fflush_r+0x62>
 80094de:	68ac      	ldr	r4, [r5, #8]
 80094e0:	e7df      	b.n	80094a2 <_fflush_r+0x22>
 80094e2:	4b04      	ldr	r3, [pc, #16]	; (80094f4 <_fflush_r+0x74>)
 80094e4:	429c      	cmp	r4, r3
 80094e6:	bf08      	it	eq
 80094e8:	68ec      	ldreq	r4, [r5, #12]
 80094ea:	e7da      	b.n	80094a2 <_fflush_r+0x22>
 80094ec:	0800b884 	.word	0x0800b884
 80094f0:	0800b8a4 	.word	0x0800b8a4
 80094f4:	0800b864 	.word	0x0800b864

080094f8 <std>:
 80094f8:	2300      	movs	r3, #0
 80094fa:	b510      	push	{r4, lr}
 80094fc:	4604      	mov	r4, r0
 80094fe:	e9c0 3300 	strd	r3, r3, [r0]
 8009502:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009506:	6083      	str	r3, [r0, #8]
 8009508:	8181      	strh	r1, [r0, #12]
 800950a:	6643      	str	r3, [r0, #100]	; 0x64
 800950c:	81c2      	strh	r2, [r0, #14]
 800950e:	6183      	str	r3, [r0, #24]
 8009510:	4619      	mov	r1, r3
 8009512:	2208      	movs	r2, #8
 8009514:	305c      	adds	r0, #92	; 0x5c
 8009516:	f7ff fd1d 	bl	8008f54 <memset>
 800951a:	4b05      	ldr	r3, [pc, #20]	; (8009530 <std+0x38>)
 800951c:	6263      	str	r3, [r4, #36]	; 0x24
 800951e:	4b05      	ldr	r3, [pc, #20]	; (8009534 <std+0x3c>)
 8009520:	62a3      	str	r3, [r4, #40]	; 0x28
 8009522:	4b05      	ldr	r3, [pc, #20]	; (8009538 <std+0x40>)
 8009524:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009526:	4b05      	ldr	r3, [pc, #20]	; (800953c <std+0x44>)
 8009528:	6224      	str	r4, [r4, #32]
 800952a:	6323      	str	r3, [r4, #48]	; 0x30
 800952c:	bd10      	pop	{r4, pc}
 800952e:	bf00      	nop
 8009530:	08009da5 	.word	0x08009da5
 8009534:	08009dc7 	.word	0x08009dc7
 8009538:	08009dff 	.word	0x08009dff
 800953c:	08009e23 	.word	0x08009e23

08009540 <_cleanup_r>:
 8009540:	4901      	ldr	r1, [pc, #4]	; (8009548 <_cleanup_r+0x8>)
 8009542:	f000 b8af 	b.w	80096a4 <_fwalk_reent>
 8009546:	bf00      	nop
 8009548:	08009481 	.word	0x08009481

0800954c <__sfmoreglue>:
 800954c:	b570      	push	{r4, r5, r6, lr}
 800954e:	1e4a      	subs	r2, r1, #1
 8009550:	2568      	movs	r5, #104	; 0x68
 8009552:	4355      	muls	r5, r2
 8009554:	460e      	mov	r6, r1
 8009556:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800955a:	f7ff fd53 	bl	8009004 <_malloc_r>
 800955e:	4604      	mov	r4, r0
 8009560:	b140      	cbz	r0, 8009574 <__sfmoreglue+0x28>
 8009562:	2100      	movs	r1, #0
 8009564:	e9c0 1600 	strd	r1, r6, [r0]
 8009568:	300c      	adds	r0, #12
 800956a:	60a0      	str	r0, [r4, #8]
 800956c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009570:	f7ff fcf0 	bl	8008f54 <memset>
 8009574:	4620      	mov	r0, r4
 8009576:	bd70      	pop	{r4, r5, r6, pc}

08009578 <__sfp_lock_acquire>:
 8009578:	4801      	ldr	r0, [pc, #4]	; (8009580 <__sfp_lock_acquire+0x8>)
 800957a:	f000 b8b3 	b.w	80096e4 <__retarget_lock_acquire_recursive>
 800957e:	bf00      	nop
 8009580:	20000bd0 	.word	0x20000bd0

08009584 <__sfp_lock_release>:
 8009584:	4801      	ldr	r0, [pc, #4]	; (800958c <__sfp_lock_release+0x8>)
 8009586:	f000 b8ae 	b.w	80096e6 <__retarget_lock_release_recursive>
 800958a:	bf00      	nop
 800958c:	20000bd0 	.word	0x20000bd0

08009590 <__sinit_lock_acquire>:
 8009590:	4801      	ldr	r0, [pc, #4]	; (8009598 <__sinit_lock_acquire+0x8>)
 8009592:	f000 b8a7 	b.w	80096e4 <__retarget_lock_acquire_recursive>
 8009596:	bf00      	nop
 8009598:	20000bcb 	.word	0x20000bcb

0800959c <__sinit_lock_release>:
 800959c:	4801      	ldr	r0, [pc, #4]	; (80095a4 <__sinit_lock_release+0x8>)
 800959e:	f000 b8a2 	b.w	80096e6 <__retarget_lock_release_recursive>
 80095a2:	bf00      	nop
 80095a4:	20000bcb 	.word	0x20000bcb

080095a8 <__sinit>:
 80095a8:	b510      	push	{r4, lr}
 80095aa:	4604      	mov	r4, r0
 80095ac:	f7ff fff0 	bl	8009590 <__sinit_lock_acquire>
 80095b0:	69a3      	ldr	r3, [r4, #24]
 80095b2:	b11b      	cbz	r3, 80095bc <__sinit+0x14>
 80095b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095b8:	f7ff bff0 	b.w	800959c <__sinit_lock_release>
 80095bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80095c0:	6523      	str	r3, [r4, #80]	; 0x50
 80095c2:	4b13      	ldr	r3, [pc, #76]	; (8009610 <__sinit+0x68>)
 80095c4:	4a13      	ldr	r2, [pc, #76]	; (8009614 <__sinit+0x6c>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80095ca:	42a3      	cmp	r3, r4
 80095cc:	bf04      	itt	eq
 80095ce:	2301      	moveq	r3, #1
 80095d0:	61a3      	streq	r3, [r4, #24]
 80095d2:	4620      	mov	r0, r4
 80095d4:	f000 f820 	bl	8009618 <__sfp>
 80095d8:	6060      	str	r0, [r4, #4]
 80095da:	4620      	mov	r0, r4
 80095dc:	f000 f81c 	bl	8009618 <__sfp>
 80095e0:	60a0      	str	r0, [r4, #8]
 80095e2:	4620      	mov	r0, r4
 80095e4:	f000 f818 	bl	8009618 <__sfp>
 80095e8:	2200      	movs	r2, #0
 80095ea:	60e0      	str	r0, [r4, #12]
 80095ec:	2104      	movs	r1, #4
 80095ee:	6860      	ldr	r0, [r4, #4]
 80095f0:	f7ff ff82 	bl	80094f8 <std>
 80095f4:	68a0      	ldr	r0, [r4, #8]
 80095f6:	2201      	movs	r2, #1
 80095f8:	2109      	movs	r1, #9
 80095fa:	f7ff ff7d 	bl	80094f8 <std>
 80095fe:	68e0      	ldr	r0, [r4, #12]
 8009600:	2202      	movs	r2, #2
 8009602:	2112      	movs	r1, #18
 8009604:	f7ff ff78 	bl	80094f8 <std>
 8009608:	2301      	movs	r3, #1
 800960a:	61a3      	str	r3, [r4, #24]
 800960c:	e7d2      	b.n	80095b4 <__sinit+0xc>
 800960e:	bf00      	nop
 8009610:	0800b860 	.word	0x0800b860
 8009614:	08009541 	.word	0x08009541

08009618 <__sfp>:
 8009618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800961a:	4607      	mov	r7, r0
 800961c:	f7ff ffac 	bl	8009578 <__sfp_lock_acquire>
 8009620:	4b1e      	ldr	r3, [pc, #120]	; (800969c <__sfp+0x84>)
 8009622:	681e      	ldr	r6, [r3, #0]
 8009624:	69b3      	ldr	r3, [r6, #24]
 8009626:	b913      	cbnz	r3, 800962e <__sfp+0x16>
 8009628:	4630      	mov	r0, r6
 800962a:	f7ff ffbd 	bl	80095a8 <__sinit>
 800962e:	3648      	adds	r6, #72	; 0x48
 8009630:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009634:	3b01      	subs	r3, #1
 8009636:	d503      	bpl.n	8009640 <__sfp+0x28>
 8009638:	6833      	ldr	r3, [r6, #0]
 800963a:	b30b      	cbz	r3, 8009680 <__sfp+0x68>
 800963c:	6836      	ldr	r6, [r6, #0]
 800963e:	e7f7      	b.n	8009630 <__sfp+0x18>
 8009640:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009644:	b9d5      	cbnz	r5, 800967c <__sfp+0x64>
 8009646:	4b16      	ldr	r3, [pc, #88]	; (80096a0 <__sfp+0x88>)
 8009648:	60e3      	str	r3, [r4, #12]
 800964a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800964e:	6665      	str	r5, [r4, #100]	; 0x64
 8009650:	f000 f847 	bl	80096e2 <__retarget_lock_init_recursive>
 8009654:	f7ff ff96 	bl	8009584 <__sfp_lock_release>
 8009658:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800965c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009660:	6025      	str	r5, [r4, #0]
 8009662:	61a5      	str	r5, [r4, #24]
 8009664:	2208      	movs	r2, #8
 8009666:	4629      	mov	r1, r5
 8009668:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800966c:	f7ff fc72 	bl	8008f54 <memset>
 8009670:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009674:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009678:	4620      	mov	r0, r4
 800967a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800967c:	3468      	adds	r4, #104	; 0x68
 800967e:	e7d9      	b.n	8009634 <__sfp+0x1c>
 8009680:	2104      	movs	r1, #4
 8009682:	4638      	mov	r0, r7
 8009684:	f7ff ff62 	bl	800954c <__sfmoreglue>
 8009688:	4604      	mov	r4, r0
 800968a:	6030      	str	r0, [r6, #0]
 800968c:	2800      	cmp	r0, #0
 800968e:	d1d5      	bne.n	800963c <__sfp+0x24>
 8009690:	f7ff ff78 	bl	8009584 <__sfp_lock_release>
 8009694:	230c      	movs	r3, #12
 8009696:	603b      	str	r3, [r7, #0]
 8009698:	e7ee      	b.n	8009678 <__sfp+0x60>
 800969a:	bf00      	nop
 800969c:	0800b860 	.word	0x0800b860
 80096a0:	ffff0001 	.word	0xffff0001

080096a4 <_fwalk_reent>:
 80096a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096a8:	4606      	mov	r6, r0
 80096aa:	4688      	mov	r8, r1
 80096ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80096b0:	2700      	movs	r7, #0
 80096b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096b6:	f1b9 0901 	subs.w	r9, r9, #1
 80096ba:	d505      	bpl.n	80096c8 <_fwalk_reent+0x24>
 80096bc:	6824      	ldr	r4, [r4, #0]
 80096be:	2c00      	cmp	r4, #0
 80096c0:	d1f7      	bne.n	80096b2 <_fwalk_reent+0xe>
 80096c2:	4638      	mov	r0, r7
 80096c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096c8:	89ab      	ldrh	r3, [r5, #12]
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d907      	bls.n	80096de <_fwalk_reent+0x3a>
 80096ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096d2:	3301      	adds	r3, #1
 80096d4:	d003      	beq.n	80096de <_fwalk_reent+0x3a>
 80096d6:	4629      	mov	r1, r5
 80096d8:	4630      	mov	r0, r6
 80096da:	47c0      	blx	r8
 80096dc:	4307      	orrs	r7, r0
 80096de:	3568      	adds	r5, #104	; 0x68
 80096e0:	e7e9      	b.n	80096b6 <_fwalk_reent+0x12>

080096e2 <__retarget_lock_init_recursive>:
 80096e2:	4770      	bx	lr

080096e4 <__retarget_lock_acquire_recursive>:
 80096e4:	4770      	bx	lr

080096e6 <__retarget_lock_release_recursive>:
 80096e6:	4770      	bx	lr

080096e8 <__swhatbuf_r>:
 80096e8:	b570      	push	{r4, r5, r6, lr}
 80096ea:	460e      	mov	r6, r1
 80096ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096f0:	2900      	cmp	r1, #0
 80096f2:	b096      	sub	sp, #88	; 0x58
 80096f4:	4614      	mov	r4, r2
 80096f6:	461d      	mov	r5, r3
 80096f8:	da07      	bge.n	800970a <__swhatbuf_r+0x22>
 80096fa:	2300      	movs	r3, #0
 80096fc:	602b      	str	r3, [r5, #0]
 80096fe:	89b3      	ldrh	r3, [r6, #12]
 8009700:	061a      	lsls	r2, r3, #24
 8009702:	d410      	bmi.n	8009726 <__swhatbuf_r+0x3e>
 8009704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009708:	e00e      	b.n	8009728 <__swhatbuf_r+0x40>
 800970a:	466a      	mov	r2, sp
 800970c:	f000 fbb0 	bl	8009e70 <_fstat_r>
 8009710:	2800      	cmp	r0, #0
 8009712:	dbf2      	blt.n	80096fa <__swhatbuf_r+0x12>
 8009714:	9a01      	ldr	r2, [sp, #4]
 8009716:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800971a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800971e:	425a      	negs	r2, r3
 8009720:	415a      	adcs	r2, r3
 8009722:	602a      	str	r2, [r5, #0]
 8009724:	e7ee      	b.n	8009704 <__swhatbuf_r+0x1c>
 8009726:	2340      	movs	r3, #64	; 0x40
 8009728:	2000      	movs	r0, #0
 800972a:	6023      	str	r3, [r4, #0]
 800972c:	b016      	add	sp, #88	; 0x58
 800972e:	bd70      	pop	{r4, r5, r6, pc}

08009730 <__smakebuf_r>:
 8009730:	898b      	ldrh	r3, [r1, #12]
 8009732:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009734:	079d      	lsls	r5, r3, #30
 8009736:	4606      	mov	r6, r0
 8009738:	460c      	mov	r4, r1
 800973a:	d507      	bpl.n	800974c <__smakebuf_r+0x1c>
 800973c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009740:	6023      	str	r3, [r4, #0]
 8009742:	6123      	str	r3, [r4, #16]
 8009744:	2301      	movs	r3, #1
 8009746:	6163      	str	r3, [r4, #20]
 8009748:	b002      	add	sp, #8
 800974a:	bd70      	pop	{r4, r5, r6, pc}
 800974c:	ab01      	add	r3, sp, #4
 800974e:	466a      	mov	r2, sp
 8009750:	f7ff ffca 	bl	80096e8 <__swhatbuf_r>
 8009754:	9900      	ldr	r1, [sp, #0]
 8009756:	4605      	mov	r5, r0
 8009758:	4630      	mov	r0, r6
 800975a:	f7ff fc53 	bl	8009004 <_malloc_r>
 800975e:	b948      	cbnz	r0, 8009774 <__smakebuf_r+0x44>
 8009760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009764:	059a      	lsls	r2, r3, #22
 8009766:	d4ef      	bmi.n	8009748 <__smakebuf_r+0x18>
 8009768:	f023 0303 	bic.w	r3, r3, #3
 800976c:	f043 0302 	orr.w	r3, r3, #2
 8009770:	81a3      	strh	r3, [r4, #12]
 8009772:	e7e3      	b.n	800973c <__smakebuf_r+0xc>
 8009774:	4b0d      	ldr	r3, [pc, #52]	; (80097ac <__smakebuf_r+0x7c>)
 8009776:	62b3      	str	r3, [r6, #40]	; 0x28
 8009778:	89a3      	ldrh	r3, [r4, #12]
 800977a:	6020      	str	r0, [r4, #0]
 800977c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009780:	81a3      	strh	r3, [r4, #12]
 8009782:	9b00      	ldr	r3, [sp, #0]
 8009784:	6163      	str	r3, [r4, #20]
 8009786:	9b01      	ldr	r3, [sp, #4]
 8009788:	6120      	str	r0, [r4, #16]
 800978a:	b15b      	cbz	r3, 80097a4 <__smakebuf_r+0x74>
 800978c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009790:	4630      	mov	r0, r6
 8009792:	f000 fb7f 	bl	8009e94 <_isatty_r>
 8009796:	b128      	cbz	r0, 80097a4 <__smakebuf_r+0x74>
 8009798:	89a3      	ldrh	r3, [r4, #12]
 800979a:	f023 0303 	bic.w	r3, r3, #3
 800979e:	f043 0301 	orr.w	r3, r3, #1
 80097a2:	81a3      	strh	r3, [r4, #12]
 80097a4:	89a0      	ldrh	r0, [r4, #12]
 80097a6:	4305      	orrs	r5, r0
 80097a8:	81a5      	strh	r5, [r4, #12]
 80097aa:	e7cd      	b.n	8009748 <__smakebuf_r+0x18>
 80097ac:	08009541 	.word	0x08009541

080097b0 <__malloc_lock>:
 80097b0:	4801      	ldr	r0, [pc, #4]	; (80097b8 <__malloc_lock+0x8>)
 80097b2:	f7ff bf97 	b.w	80096e4 <__retarget_lock_acquire_recursive>
 80097b6:	bf00      	nop
 80097b8:	20000bcc 	.word	0x20000bcc

080097bc <__malloc_unlock>:
 80097bc:	4801      	ldr	r0, [pc, #4]	; (80097c4 <__malloc_unlock+0x8>)
 80097be:	f7ff bf92 	b.w	80096e6 <__retarget_lock_release_recursive>
 80097c2:	bf00      	nop
 80097c4:	20000bcc 	.word	0x20000bcc

080097c8 <__sfputc_r>:
 80097c8:	6893      	ldr	r3, [r2, #8]
 80097ca:	3b01      	subs	r3, #1
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	b410      	push	{r4}
 80097d0:	6093      	str	r3, [r2, #8]
 80097d2:	da08      	bge.n	80097e6 <__sfputc_r+0x1e>
 80097d4:	6994      	ldr	r4, [r2, #24]
 80097d6:	42a3      	cmp	r3, r4
 80097d8:	db01      	blt.n	80097de <__sfputc_r+0x16>
 80097da:	290a      	cmp	r1, #10
 80097dc:	d103      	bne.n	80097e6 <__sfputc_r+0x1e>
 80097de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097e2:	f7ff bd07 	b.w	80091f4 <__swbuf_r>
 80097e6:	6813      	ldr	r3, [r2, #0]
 80097e8:	1c58      	adds	r0, r3, #1
 80097ea:	6010      	str	r0, [r2, #0]
 80097ec:	7019      	strb	r1, [r3, #0]
 80097ee:	4608      	mov	r0, r1
 80097f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <__sfputs_r>:
 80097f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f8:	4606      	mov	r6, r0
 80097fa:	460f      	mov	r7, r1
 80097fc:	4614      	mov	r4, r2
 80097fe:	18d5      	adds	r5, r2, r3
 8009800:	42ac      	cmp	r4, r5
 8009802:	d101      	bne.n	8009808 <__sfputs_r+0x12>
 8009804:	2000      	movs	r0, #0
 8009806:	e007      	b.n	8009818 <__sfputs_r+0x22>
 8009808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800980c:	463a      	mov	r2, r7
 800980e:	4630      	mov	r0, r6
 8009810:	f7ff ffda 	bl	80097c8 <__sfputc_r>
 8009814:	1c43      	adds	r3, r0, #1
 8009816:	d1f3      	bne.n	8009800 <__sfputs_r+0xa>
 8009818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800981c <_vfiprintf_r>:
 800981c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009820:	460d      	mov	r5, r1
 8009822:	b09d      	sub	sp, #116	; 0x74
 8009824:	4614      	mov	r4, r2
 8009826:	4698      	mov	r8, r3
 8009828:	4606      	mov	r6, r0
 800982a:	b118      	cbz	r0, 8009834 <_vfiprintf_r+0x18>
 800982c:	6983      	ldr	r3, [r0, #24]
 800982e:	b90b      	cbnz	r3, 8009834 <_vfiprintf_r+0x18>
 8009830:	f7ff feba 	bl	80095a8 <__sinit>
 8009834:	4b89      	ldr	r3, [pc, #548]	; (8009a5c <_vfiprintf_r+0x240>)
 8009836:	429d      	cmp	r5, r3
 8009838:	d11b      	bne.n	8009872 <_vfiprintf_r+0x56>
 800983a:	6875      	ldr	r5, [r6, #4]
 800983c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800983e:	07d9      	lsls	r1, r3, #31
 8009840:	d405      	bmi.n	800984e <_vfiprintf_r+0x32>
 8009842:	89ab      	ldrh	r3, [r5, #12]
 8009844:	059a      	lsls	r2, r3, #22
 8009846:	d402      	bmi.n	800984e <_vfiprintf_r+0x32>
 8009848:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800984a:	f7ff ff4b 	bl	80096e4 <__retarget_lock_acquire_recursive>
 800984e:	89ab      	ldrh	r3, [r5, #12]
 8009850:	071b      	lsls	r3, r3, #28
 8009852:	d501      	bpl.n	8009858 <_vfiprintf_r+0x3c>
 8009854:	692b      	ldr	r3, [r5, #16]
 8009856:	b9eb      	cbnz	r3, 8009894 <_vfiprintf_r+0x78>
 8009858:	4629      	mov	r1, r5
 800985a:	4630      	mov	r0, r6
 800985c:	f7ff fd1c 	bl	8009298 <__swsetup_r>
 8009860:	b1c0      	cbz	r0, 8009894 <_vfiprintf_r+0x78>
 8009862:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009864:	07dc      	lsls	r4, r3, #31
 8009866:	d50e      	bpl.n	8009886 <_vfiprintf_r+0x6a>
 8009868:	f04f 30ff 	mov.w	r0, #4294967295
 800986c:	b01d      	add	sp, #116	; 0x74
 800986e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009872:	4b7b      	ldr	r3, [pc, #492]	; (8009a60 <_vfiprintf_r+0x244>)
 8009874:	429d      	cmp	r5, r3
 8009876:	d101      	bne.n	800987c <_vfiprintf_r+0x60>
 8009878:	68b5      	ldr	r5, [r6, #8]
 800987a:	e7df      	b.n	800983c <_vfiprintf_r+0x20>
 800987c:	4b79      	ldr	r3, [pc, #484]	; (8009a64 <_vfiprintf_r+0x248>)
 800987e:	429d      	cmp	r5, r3
 8009880:	bf08      	it	eq
 8009882:	68f5      	ldreq	r5, [r6, #12]
 8009884:	e7da      	b.n	800983c <_vfiprintf_r+0x20>
 8009886:	89ab      	ldrh	r3, [r5, #12]
 8009888:	0598      	lsls	r0, r3, #22
 800988a:	d4ed      	bmi.n	8009868 <_vfiprintf_r+0x4c>
 800988c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800988e:	f7ff ff2a 	bl	80096e6 <__retarget_lock_release_recursive>
 8009892:	e7e9      	b.n	8009868 <_vfiprintf_r+0x4c>
 8009894:	2300      	movs	r3, #0
 8009896:	9309      	str	r3, [sp, #36]	; 0x24
 8009898:	2320      	movs	r3, #32
 800989a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800989e:	f8cd 800c 	str.w	r8, [sp, #12]
 80098a2:	2330      	movs	r3, #48	; 0x30
 80098a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009a68 <_vfiprintf_r+0x24c>
 80098a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098ac:	f04f 0901 	mov.w	r9, #1
 80098b0:	4623      	mov	r3, r4
 80098b2:	469a      	mov	sl, r3
 80098b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098b8:	b10a      	cbz	r2, 80098be <_vfiprintf_r+0xa2>
 80098ba:	2a25      	cmp	r2, #37	; 0x25
 80098bc:	d1f9      	bne.n	80098b2 <_vfiprintf_r+0x96>
 80098be:	ebba 0b04 	subs.w	fp, sl, r4
 80098c2:	d00b      	beq.n	80098dc <_vfiprintf_r+0xc0>
 80098c4:	465b      	mov	r3, fp
 80098c6:	4622      	mov	r2, r4
 80098c8:	4629      	mov	r1, r5
 80098ca:	4630      	mov	r0, r6
 80098cc:	f7ff ff93 	bl	80097f6 <__sfputs_r>
 80098d0:	3001      	adds	r0, #1
 80098d2:	f000 80aa 	beq.w	8009a2a <_vfiprintf_r+0x20e>
 80098d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098d8:	445a      	add	r2, fp
 80098da:	9209      	str	r2, [sp, #36]	; 0x24
 80098dc:	f89a 3000 	ldrb.w	r3, [sl]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f000 80a2 	beq.w	8009a2a <_vfiprintf_r+0x20e>
 80098e6:	2300      	movs	r3, #0
 80098e8:	f04f 32ff 	mov.w	r2, #4294967295
 80098ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098f0:	f10a 0a01 	add.w	sl, sl, #1
 80098f4:	9304      	str	r3, [sp, #16]
 80098f6:	9307      	str	r3, [sp, #28]
 80098f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098fc:	931a      	str	r3, [sp, #104]	; 0x68
 80098fe:	4654      	mov	r4, sl
 8009900:	2205      	movs	r2, #5
 8009902:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009906:	4858      	ldr	r0, [pc, #352]	; (8009a68 <_vfiprintf_r+0x24c>)
 8009908:	f7f6 fc62 	bl	80001d0 <memchr>
 800990c:	9a04      	ldr	r2, [sp, #16]
 800990e:	b9d8      	cbnz	r0, 8009948 <_vfiprintf_r+0x12c>
 8009910:	06d1      	lsls	r1, r2, #27
 8009912:	bf44      	itt	mi
 8009914:	2320      	movmi	r3, #32
 8009916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800991a:	0713      	lsls	r3, r2, #28
 800991c:	bf44      	itt	mi
 800991e:	232b      	movmi	r3, #43	; 0x2b
 8009920:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009924:	f89a 3000 	ldrb.w	r3, [sl]
 8009928:	2b2a      	cmp	r3, #42	; 0x2a
 800992a:	d015      	beq.n	8009958 <_vfiprintf_r+0x13c>
 800992c:	9a07      	ldr	r2, [sp, #28]
 800992e:	4654      	mov	r4, sl
 8009930:	2000      	movs	r0, #0
 8009932:	f04f 0c0a 	mov.w	ip, #10
 8009936:	4621      	mov	r1, r4
 8009938:	f811 3b01 	ldrb.w	r3, [r1], #1
 800993c:	3b30      	subs	r3, #48	; 0x30
 800993e:	2b09      	cmp	r3, #9
 8009940:	d94e      	bls.n	80099e0 <_vfiprintf_r+0x1c4>
 8009942:	b1b0      	cbz	r0, 8009972 <_vfiprintf_r+0x156>
 8009944:	9207      	str	r2, [sp, #28]
 8009946:	e014      	b.n	8009972 <_vfiprintf_r+0x156>
 8009948:	eba0 0308 	sub.w	r3, r0, r8
 800994c:	fa09 f303 	lsl.w	r3, r9, r3
 8009950:	4313      	orrs	r3, r2
 8009952:	9304      	str	r3, [sp, #16]
 8009954:	46a2      	mov	sl, r4
 8009956:	e7d2      	b.n	80098fe <_vfiprintf_r+0xe2>
 8009958:	9b03      	ldr	r3, [sp, #12]
 800995a:	1d19      	adds	r1, r3, #4
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	9103      	str	r1, [sp, #12]
 8009960:	2b00      	cmp	r3, #0
 8009962:	bfbb      	ittet	lt
 8009964:	425b      	neglt	r3, r3
 8009966:	f042 0202 	orrlt.w	r2, r2, #2
 800996a:	9307      	strge	r3, [sp, #28]
 800996c:	9307      	strlt	r3, [sp, #28]
 800996e:	bfb8      	it	lt
 8009970:	9204      	strlt	r2, [sp, #16]
 8009972:	7823      	ldrb	r3, [r4, #0]
 8009974:	2b2e      	cmp	r3, #46	; 0x2e
 8009976:	d10c      	bne.n	8009992 <_vfiprintf_r+0x176>
 8009978:	7863      	ldrb	r3, [r4, #1]
 800997a:	2b2a      	cmp	r3, #42	; 0x2a
 800997c:	d135      	bne.n	80099ea <_vfiprintf_r+0x1ce>
 800997e:	9b03      	ldr	r3, [sp, #12]
 8009980:	1d1a      	adds	r2, r3, #4
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	9203      	str	r2, [sp, #12]
 8009986:	2b00      	cmp	r3, #0
 8009988:	bfb8      	it	lt
 800998a:	f04f 33ff 	movlt.w	r3, #4294967295
 800998e:	3402      	adds	r4, #2
 8009990:	9305      	str	r3, [sp, #20]
 8009992:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009a78 <_vfiprintf_r+0x25c>
 8009996:	7821      	ldrb	r1, [r4, #0]
 8009998:	2203      	movs	r2, #3
 800999a:	4650      	mov	r0, sl
 800999c:	f7f6 fc18 	bl	80001d0 <memchr>
 80099a0:	b140      	cbz	r0, 80099b4 <_vfiprintf_r+0x198>
 80099a2:	2340      	movs	r3, #64	; 0x40
 80099a4:	eba0 000a 	sub.w	r0, r0, sl
 80099a8:	fa03 f000 	lsl.w	r0, r3, r0
 80099ac:	9b04      	ldr	r3, [sp, #16]
 80099ae:	4303      	orrs	r3, r0
 80099b0:	3401      	adds	r4, #1
 80099b2:	9304      	str	r3, [sp, #16]
 80099b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099b8:	482c      	ldr	r0, [pc, #176]	; (8009a6c <_vfiprintf_r+0x250>)
 80099ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099be:	2206      	movs	r2, #6
 80099c0:	f7f6 fc06 	bl	80001d0 <memchr>
 80099c4:	2800      	cmp	r0, #0
 80099c6:	d03f      	beq.n	8009a48 <_vfiprintf_r+0x22c>
 80099c8:	4b29      	ldr	r3, [pc, #164]	; (8009a70 <_vfiprintf_r+0x254>)
 80099ca:	bb1b      	cbnz	r3, 8009a14 <_vfiprintf_r+0x1f8>
 80099cc:	9b03      	ldr	r3, [sp, #12]
 80099ce:	3307      	adds	r3, #7
 80099d0:	f023 0307 	bic.w	r3, r3, #7
 80099d4:	3308      	adds	r3, #8
 80099d6:	9303      	str	r3, [sp, #12]
 80099d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099da:	443b      	add	r3, r7
 80099dc:	9309      	str	r3, [sp, #36]	; 0x24
 80099de:	e767      	b.n	80098b0 <_vfiprintf_r+0x94>
 80099e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80099e4:	460c      	mov	r4, r1
 80099e6:	2001      	movs	r0, #1
 80099e8:	e7a5      	b.n	8009936 <_vfiprintf_r+0x11a>
 80099ea:	2300      	movs	r3, #0
 80099ec:	3401      	adds	r4, #1
 80099ee:	9305      	str	r3, [sp, #20]
 80099f0:	4619      	mov	r1, r3
 80099f2:	f04f 0c0a 	mov.w	ip, #10
 80099f6:	4620      	mov	r0, r4
 80099f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099fc:	3a30      	subs	r2, #48	; 0x30
 80099fe:	2a09      	cmp	r2, #9
 8009a00:	d903      	bls.n	8009a0a <_vfiprintf_r+0x1ee>
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d0c5      	beq.n	8009992 <_vfiprintf_r+0x176>
 8009a06:	9105      	str	r1, [sp, #20]
 8009a08:	e7c3      	b.n	8009992 <_vfiprintf_r+0x176>
 8009a0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a0e:	4604      	mov	r4, r0
 8009a10:	2301      	movs	r3, #1
 8009a12:	e7f0      	b.n	80099f6 <_vfiprintf_r+0x1da>
 8009a14:	ab03      	add	r3, sp, #12
 8009a16:	9300      	str	r3, [sp, #0]
 8009a18:	462a      	mov	r2, r5
 8009a1a:	4b16      	ldr	r3, [pc, #88]	; (8009a74 <_vfiprintf_r+0x258>)
 8009a1c:	a904      	add	r1, sp, #16
 8009a1e:	4630      	mov	r0, r6
 8009a20:	f3af 8000 	nop.w
 8009a24:	4607      	mov	r7, r0
 8009a26:	1c78      	adds	r0, r7, #1
 8009a28:	d1d6      	bne.n	80099d8 <_vfiprintf_r+0x1bc>
 8009a2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a2c:	07d9      	lsls	r1, r3, #31
 8009a2e:	d405      	bmi.n	8009a3c <_vfiprintf_r+0x220>
 8009a30:	89ab      	ldrh	r3, [r5, #12]
 8009a32:	059a      	lsls	r2, r3, #22
 8009a34:	d402      	bmi.n	8009a3c <_vfiprintf_r+0x220>
 8009a36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a38:	f7ff fe55 	bl	80096e6 <__retarget_lock_release_recursive>
 8009a3c:	89ab      	ldrh	r3, [r5, #12]
 8009a3e:	065b      	lsls	r3, r3, #25
 8009a40:	f53f af12 	bmi.w	8009868 <_vfiprintf_r+0x4c>
 8009a44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a46:	e711      	b.n	800986c <_vfiprintf_r+0x50>
 8009a48:	ab03      	add	r3, sp, #12
 8009a4a:	9300      	str	r3, [sp, #0]
 8009a4c:	462a      	mov	r2, r5
 8009a4e:	4b09      	ldr	r3, [pc, #36]	; (8009a74 <_vfiprintf_r+0x258>)
 8009a50:	a904      	add	r1, sp, #16
 8009a52:	4630      	mov	r0, r6
 8009a54:	f000 f880 	bl	8009b58 <_printf_i>
 8009a58:	e7e4      	b.n	8009a24 <_vfiprintf_r+0x208>
 8009a5a:	bf00      	nop
 8009a5c:	0800b884 	.word	0x0800b884
 8009a60:	0800b8a4 	.word	0x0800b8a4
 8009a64:	0800b864 	.word	0x0800b864
 8009a68:	0800b8c4 	.word	0x0800b8c4
 8009a6c:	0800b8ce 	.word	0x0800b8ce
 8009a70:	00000000 	.word	0x00000000
 8009a74:	080097f7 	.word	0x080097f7
 8009a78:	0800b8ca 	.word	0x0800b8ca

08009a7c <_printf_common>:
 8009a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a80:	4616      	mov	r6, r2
 8009a82:	4699      	mov	r9, r3
 8009a84:	688a      	ldr	r2, [r1, #8]
 8009a86:	690b      	ldr	r3, [r1, #16]
 8009a88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	bfb8      	it	lt
 8009a90:	4613      	movlt	r3, r2
 8009a92:	6033      	str	r3, [r6, #0]
 8009a94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a98:	4607      	mov	r7, r0
 8009a9a:	460c      	mov	r4, r1
 8009a9c:	b10a      	cbz	r2, 8009aa2 <_printf_common+0x26>
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	6033      	str	r3, [r6, #0]
 8009aa2:	6823      	ldr	r3, [r4, #0]
 8009aa4:	0699      	lsls	r1, r3, #26
 8009aa6:	bf42      	ittt	mi
 8009aa8:	6833      	ldrmi	r3, [r6, #0]
 8009aaa:	3302      	addmi	r3, #2
 8009aac:	6033      	strmi	r3, [r6, #0]
 8009aae:	6825      	ldr	r5, [r4, #0]
 8009ab0:	f015 0506 	ands.w	r5, r5, #6
 8009ab4:	d106      	bne.n	8009ac4 <_printf_common+0x48>
 8009ab6:	f104 0a19 	add.w	sl, r4, #25
 8009aba:	68e3      	ldr	r3, [r4, #12]
 8009abc:	6832      	ldr	r2, [r6, #0]
 8009abe:	1a9b      	subs	r3, r3, r2
 8009ac0:	42ab      	cmp	r3, r5
 8009ac2:	dc26      	bgt.n	8009b12 <_printf_common+0x96>
 8009ac4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ac8:	1e13      	subs	r3, r2, #0
 8009aca:	6822      	ldr	r2, [r4, #0]
 8009acc:	bf18      	it	ne
 8009ace:	2301      	movne	r3, #1
 8009ad0:	0692      	lsls	r2, r2, #26
 8009ad2:	d42b      	bmi.n	8009b2c <_printf_common+0xb0>
 8009ad4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ad8:	4649      	mov	r1, r9
 8009ada:	4638      	mov	r0, r7
 8009adc:	47c0      	blx	r8
 8009ade:	3001      	adds	r0, #1
 8009ae0:	d01e      	beq.n	8009b20 <_printf_common+0xa4>
 8009ae2:	6823      	ldr	r3, [r4, #0]
 8009ae4:	68e5      	ldr	r5, [r4, #12]
 8009ae6:	6832      	ldr	r2, [r6, #0]
 8009ae8:	f003 0306 	and.w	r3, r3, #6
 8009aec:	2b04      	cmp	r3, #4
 8009aee:	bf08      	it	eq
 8009af0:	1aad      	subeq	r5, r5, r2
 8009af2:	68a3      	ldr	r3, [r4, #8]
 8009af4:	6922      	ldr	r2, [r4, #16]
 8009af6:	bf0c      	ite	eq
 8009af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009afc:	2500      	movne	r5, #0
 8009afe:	4293      	cmp	r3, r2
 8009b00:	bfc4      	itt	gt
 8009b02:	1a9b      	subgt	r3, r3, r2
 8009b04:	18ed      	addgt	r5, r5, r3
 8009b06:	2600      	movs	r6, #0
 8009b08:	341a      	adds	r4, #26
 8009b0a:	42b5      	cmp	r5, r6
 8009b0c:	d11a      	bne.n	8009b44 <_printf_common+0xc8>
 8009b0e:	2000      	movs	r0, #0
 8009b10:	e008      	b.n	8009b24 <_printf_common+0xa8>
 8009b12:	2301      	movs	r3, #1
 8009b14:	4652      	mov	r2, sl
 8009b16:	4649      	mov	r1, r9
 8009b18:	4638      	mov	r0, r7
 8009b1a:	47c0      	blx	r8
 8009b1c:	3001      	adds	r0, #1
 8009b1e:	d103      	bne.n	8009b28 <_printf_common+0xac>
 8009b20:	f04f 30ff 	mov.w	r0, #4294967295
 8009b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b28:	3501      	adds	r5, #1
 8009b2a:	e7c6      	b.n	8009aba <_printf_common+0x3e>
 8009b2c:	18e1      	adds	r1, r4, r3
 8009b2e:	1c5a      	adds	r2, r3, #1
 8009b30:	2030      	movs	r0, #48	; 0x30
 8009b32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b36:	4422      	add	r2, r4
 8009b38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b40:	3302      	adds	r3, #2
 8009b42:	e7c7      	b.n	8009ad4 <_printf_common+0x58>
 8009b44:	2301      	movs	r3, #1
 8009b46:	4622      	mov	r2, r4
 8009b48:	4649      	mov	r1, r9
 8009b4a:	4638      	mov	r0, r7
 8009b4c:	47c0      	blx	r8
 8009b4e:	3001      	adds	r0, #1
 8009b50:	d0e6      	beq.n	8009b20 <_printf_common+0xa4>
 8009b52:	3601      	adds	r6, #1
 8009b54:	e7d9      	b.n	8009b0a <_printf_common+0x8e>
	...

08009b58 <_printf_i>:
 8009b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b5c:	460c      	mov	r4, r1
 8009b5e:	4691      	mov	r9, r2
 8009b60:	7e27      	ldrb	r7, [r4, #24]
 8009b62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009b64:	2f78      	cmp	r7, #120	; 0x78
 8009b66:	4680      	mov	r8, r0
 8009b68:	469a      	mov	sl, r3
 8009b6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b6e:	d807      	bhi.n	8009b80 <_printf_i+0x28>
 8009b70:	2f62      	cmp	r7, #98	; 0x62
 8009b72:	d80a      	bhi.n	8009b8a <_printf_i+0x32>
 8009b74:	2f00      	cmp	r7, #0
 8009b76:	f000 80d8 	beq.w	8009d2a <_printf_i+0x1d2>
 8009b7a:	2f58      	cmp	r7, #88	; 0x58
 8009b7c:	f000 80a3 	beq.w	8009cc6 <_printf_i+0x16e>
 8009b80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009b84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b88:	e03a      	b.n	8009c00 <_printf_i+0xa8>
 8009b8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b8e:	2b15      	cmp	r3, #21
 8009b90:	d8f6      	bhi.n	8009b80 <_printf_i+0x28>
 8009b92:	a001      	add	r0, pc, #4	; (adr r0, 8009b98 <_printf_i+0x40>)
 8009b94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009b98:	08009bf1 	.word	0x08009bf1
 8009b9c:	08009c05 	.word	0x08009c05
 8009ba0:	08009b81 	.word	0x08009b81
 8009ba4:	08009b81 	.word	0x08009b81
 8009ba8:	08009b81 	.word	0x08009b81
 8009bac:	08009b81 	.word	0x08009b81
 8009bb0:	08009c05 	.word	0x08009c05
 8009bb4:	08009b81 	.word	0x08009b81
 8009bb8:	08009b81 	.word	0x08009b81
 8009bbc:	08009b81 	.word	0x08009b81
 8009bc0:	08009b81 	.word	0x08009b81
 8009bc4:	08009d11 	.word	0x08009d11
 8009bc8:	08009c35 	.word	0x08009c35
 8009bcc:	08009cf3 	.word	0x08009cf3
 8009bd0:	08009b81 	.word	0x08009b81
 8009bd4:	08009b81 	.word	0x08009b81
 8009bd8:	08009d33 	.word	0x08009d33
 8009bdc:	08009b81 	.word	0x08009b81
 8009be0:	08009c35 	.word	0x08009c35
 8009be4:	08009b81 	.word	0x08009b81
 8009be8:	08009b81 	.word	0x08009b81
 8009bec:	08009cfb 	.word	0x08009cfb
 8009bf0:	680b      	ldr	r3, [r1, #0]
 8009bf2:	1d1a      	adds	r2, r3, #4
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	600a      	str	r2, [r1, #0]
 8009bf8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009bfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c00:	2301      	movs	r3, #1
 8009c02:	e0a3      	b.n	8009d4c <_printf_i+0x1f4>
 8009c04:	6825      	ldr	r5, [r4, #0]
 8009c06:	6808      	ldr	r0, [r1, #0]
 8009c08:	062e      	lsls	r6, r5, #24
 8009c0a:	f100 0304 	add.w	r3, r0, #4
 8009c0e:	d50a      	bpl.n	8009c26 <_printf_i+0xce>
 8009c10:	6805      	ldr	r5, [r0, #0]
 8009c12:	600b      	str	r3, [r1, #0]
 8009c14:	2d00      	cmp	r5, #0
 8009c16:	da03      	bge.n	8009c20 <_printf_i+0xc8>
 8009c18:	232d      	movs	r3, #45	; 0x2d
 8009c1a:	426d      	negs	r5, r5
 8009c1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c20:	485e      	ldr	r0, [pc, #376]	; (8009d9c <_printf_i+0x244>)
 8009c22:	230a      	movs	r3, #10
 8009c24:	e019      	b.n	8009c5a <_printf_i+0x102>
 8009c26:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009c2a:	6805      	ldr	r5, [r0, #0]
 8009c2c:	600b      	str	r3, [r1, #0]
 8009c2e:	bf18      	it	ne
 8009c30:	b22d      	sxthne	r5, r5
 8009c32:	e7ef      	b.n	8009c14 <_printf_i+0xbc>
 8009c34:	680b      	ldr	r3, [r1, #0]
 8009c36:	6825      	ldr	r5, [r4, #0]
 8009c38:	1d18      	adds	r0, r3, #4
 8009c3a:	6008      	str	r0, [r1, #0]
 8009c3c:	0628      	lsls	r0, r5, #24
 8009c3e:	d501      	bpl.n	8009c44 <_printf_i+0xec>
 8009c40:	681d      	ldr	r5, [r3, #0]
 8009c42:	e002      	b.n	8009c4a <_printf_i+0xf2>
 8009c44:	0669      	lsls	r1, r5, #25
 8009c46:	d5fb      	bpl.n	8009c40 <_printf_i+0xe8>
 8009c48:	881d      	ldrh	r5, [r3, #0]
 8009c4a:	4854      	ldr	r0, [pc, #336]	; (8009d9c <_printf_i+0x244>)
 8009c4c:	2f6f      	cmp	r7, #111	; 0x6f
 8009c4e:	bf0c      	ite	eq
 8009c50:	2308      	moveq	r3, #8
 8009c52:	230a      	movne	r3, #10
 8009c54:	2100      	movs	r1, #0
 8009c56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c5a:	6866      	ldr	r6, [r4, #4]
 8009c5c:	60a6      	str	r6, [r4, #8]
 8009c5e:	2e00      	cmp	r6, #0
 8009c60:	bfa2      	ittt	ge
 8009c62:	6821      	ldrge	r1, [r4, #0]
 8009c64:	f021 0104 	bicge.w	r1, r1, #4
 8009c68:	6021      	strge	r1, [r4, #0]
 8009c6a:	b90d      	cbnz	r5, 8009c70 <_printf_i+0x118>
 8009c6c:	2e00      	cmp	r6, #0
 8009c6e:	d04d      	beq.n	8009d0c <_printf_i+0x1b4>
 8009c70:	4616      	mov	r6, r2
 8009c72:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c76:	fb03 5711 	mls	r7, r3, r1, r5
 8009c7a:	5dc7      	ldrb	r7, [r0, r7]
 8009c7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c80:	462f      	mov	r7, r5
 8009c82:	42bb      	cmp	r3, r7
 8009c84:	460d      	mov	r5, r1
 8009c86:	d9f4      	bls.n	8009c72 <_printf_i+0x11a>
 8009c88:	2b08      	cmp	r3, #8
 8009c8a:	d10b      	bne.n	8009ca4 <_printf_i+0x14c>
 8009c8c:	6823      	ldr	r3, [r4, #0]
 8009c8e:	07df      	lsls	r7, r3, #31
 8009c90:	d508      	bpl.n	8009ca4 <_printf_i+0x14c>
 8009c92:	6923      	ldr	r3, [r4, #16]
 8009c94:	6861      	ldr	r1, [r4, #4]
 8009c96:	4299      	cmp	r1, r3
 8009c98:	bfde      	ittt	le
 8009c9a:	2330      	movle	r3, #48	; 0x30
 8009c9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009ca0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009ca4:	1b92      	subs	r2, r2, r6
 8009ca6:	6122      	str	r2, [r4, #16]
 8009ca8:	f8cd a000 	str.w	sl, [sp]
 8009cac:	464b      	mov	r3, r9
 8009cae:	aa03      	add	r2, sp, #12
 8009cb0:	4621      	mov	r1, r4
 8009cb2:	4640      	mov	r0, r8
 8009cb4:	f7ff fee2 	bl	8009a7c <_printf_common>
 8009cb8:	3001      	adds	r0, #1
 8009cba:	d14c      	bne.n	8009d56 <_printf_i+0x1fe>
 8009cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc0:	b004      	add	sp, #16
 8009cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cc6:	4835      	ldr	r0, [pc, #212]	; (8009d9c <_printf_i+0x244>)
 8009cc8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009ccc:	6823      	ldr	r3, [r4, #0]
 8009cce:	680e      	ldr	r6, [r1, #0]
 8009cd0:	061f      	lsls	r7, r3, #24
 8009cd2:	f856 5b04 	ldr.w	r5, [r6], #4
 8009cd6:	600e      	str	r6, [r1, #0]
 8009cd8:	d514      	bpl.n	8009d04 <_printf_i+0x1ac>
 8009cda:	07d9      	lsls	r1, r3, #31
 8009cdc:	bf44      	itt	mi
 8009cde:	f043 0320 	orrmi.w	r3, r3, #32
 8009ce2:	6023      	strmi	r3, [r4, #0]
 8009ce4:	b91d      	cbnz	r5, 8009cee <_printf_i+0x196>
 8009ce6:	6823      	ldr	r3, [r4, #0]
 8009ce8:	f023 0320 	bic.w	r3, r3, #32
 8009cec:	6023      	str	r3, [r4, #0]
 8009cee:	2310      	movs	r3, #16
 8009cf0:	e7b0      	b.n	8009c54 <_printf_i+0xfc>
 8009cf2:	6823      	ldr	r3, [r4, #0]
 8009cf4:	f043 0320 	orr.w	r3, r3, #32
 8009cf8:	6023      	str	r3, [r4, #0]
 8009cfa:	2378      	movs	r3, #120	; 0x78
 8009cfc:	4828      	ldr	r0, [pc, #160]	; (8009da0 <_printf_i+0x248>)
 8009cfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d02:	e7e3      	b.n	8009ccc <_printf_i+0x174>
 8009d04:	065e      	lsls	r6, r3, #25
 8009d06:	bf48      	it	mi
 8009d08:	b2ad      	uxthmi	r5, r5
 8009d0a:	e7e6      	b.n	8009cda <_printf_i+0x182>
 8009d0c:	4616      	mov	r6, r2
 8009d0e:	e7bb      	b.n	8009c88 <_printf_i+0x130>
 8009d10:	680b      	ldr	r3, [r1, #0]
 8009d12:	6826      	ldr	r6, [r4, #0]
 8009d14:	6960      	ldr	r0, [r4, #20]
 8009d16:	1d1d      	adds	r5, r3, #4
 8009d18:	600d      	str	r5, [r1, #0]
 8009d1a:	0635      	lsls	r5, r6, #24
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	d501      	bpl.n	8009d24 <_printf_i+0x1cc>
 8009d20:	6018      	str	r0, [r3, #0]
 8009d22:	e002      	b.n	8009d2a <_printf_i+0x1d2>
 8009d24:	0671      	lsls	r1, r6, #25
 8009d26:	d5fb      	bpl.n	8009d20 <_printf_i+0x1c8>
 8009d28:	8018      	strh	r0, [r3, #0]
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	6123      	str	r3, [r4, #16]
 8009d2e:	4616      	mov	r6, r2
 8009d30:	e7ba      	b.n	8009ca8 <_printf_i+0x150>
 8009d32:	680b      	ldr	r3, [r1, #0]
 8009d34:	1d1a      	adds	r2, r3, #4
 8009d36:	600a      	str	r2, [r1, #0]
 8009d38:	681e      	ldr	r6, [r3, #0]
 8009d3a:	6862      	ldr	r2, [r4, #4]
 8009d3c:	2100      	movs	r1, #0
 8009d3e:	4630      	mov	r0, r6
 8009d40:	f7f6 fa46 	bl	80001d0 <memchr>
 8009d44:	b108      	cbz	r0, 8009d4a <_printf_i+0x1f2>
 8009d46:	1b80      	subs	r0, r0, r6
 8009d48:	6060      	str	r0, [r4, #4]
 8009d4a:	6863      	ldr	r3, [r4, #4]
 8009d4c:	6123      	str	r3, [r4, #16]
 8009d4e:	2300      	movs	r3, #0
 8009d50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d54:	e7a8      	b.n	8009ca8 <_printf_i+0x150>
 8009d56:	6923      	ldr	r3, [r4, #16]
 8009d58:	4632      	mov	r2, r6
 8009d5a:	4649      	mov	r1, r9
 8009d5c:	4640      	mov	r0, r8
 8009d5e:	47d0      	blx	sl
 8009d60:	3001      	adds	r0, #1
 8009d62:	d0ab      	beq.n	8009cbc <_printf_i+0x164>
 8009d64:	6823      	ldr	r3, [r4, #0]
 8009d66:	079b      	lsls	r3, r3, #30
 8009d68:	d413      	bmi.n	8009d92 <_printf_i+0x23a>
 8009d6a:	68e0      	ldr	r0, [r4, #12]
 8009d6c:	9b03      	ldr	r3, [sp, #12]
 8009d6e:	4298      	cmp	r0, r3
 8009d70:	bfb8      	it	lt
 8009d72:	4618      	movlt	r0, r3
 8009d74:	e7a4      	b.n	8009cc0 <_printf_i+0x168>
 8009d76:	2301      	movs	r3, #1
 8009d78:	4632      	mov	r2, r6
 8009d7a:	4649      	mov	r1, r9
 8009d7c:	4640      	mov	r0, r8
 8009d7e:	47d0      	blx	sl
 8009d80:	3001      	adds	r0, #1
 8009d82:	d09b      	beq.n	8009cbc <_printf_i+0x164>
 8009d84:	3501      	adds	r5, #1
 8009d86:	68e3      	ldr	r3, [r4, #12]
 8009d88:	9903      	ldr	r1, [sp, #12]
 8009d8a:	1a5b      	subs	r3, r3, r1
 8009d8c:	42ab      	cmp	r3, r5
 8009d8e:	dcf2      	bgt.n	8009d76 <_printf_i+0x21e>
 8009d90:	e7eb      	b.n	8009d6a <_printf_i+0x212>
 8009d92:	2500      	movs	r5, #0
 8009d94:	f104 0619 	add.w	r6, r4, #25
 8009d98:	e7f5      	b.n	8009d86 <_printf_i+0x22e>
 8009d9a:	bf00      	nop
 8009d9c:	0800b8d5 	.word	0x0800b8d5
 8009da0:	0800b8e6 	.word	0x0800b8e6

08009da4 <__sread>:
 8009da4:	b510      	push	{r4, lr}
 8009da6:	460c      	mov	r4, r1
 8009da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dac:	f000 f894 	bl	8009ed8 <_read_r>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	bfab      	itete	ge
 8009db4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009db6:	89a3      	ldrhlt	r3, [r4, #12]
 8009db8:	181b      	addge	r3, r3, r0
 8009dba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009dbe:	bfac      	ite	ge
 8009dc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009dc2:	81a3      	strhlt	r3, [r4, #12]
 8009dc4:	bd10      	pop	{r4, pc}

08009dc6 <__swrite>:
 8009dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dca:	461f      	mov	r7, r3
 8009dcc:	898b      	ldrh	r3, [r1, #12]
 8009dce:	05db      	lsls	r3, r3, #23
 8009dd0:	4605      	mov	r5, r0
 8009dd2:	460c      	mov	r4, r1
 8009dd4:	4616      	mov	r6, r2
 8009dd6:	d505      	bpl.n	8009de4 <__swrite+0x1e>
 8009dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ddc:	2302      	movs	r3, #2
 8009dde:	2200      	movs	r2, #0
 8009de0:	f000 f868 	bl	8009eb4 <_lseek_r>
 8009de4:	89a3      	ldrh	r3, [r4, #12]
 8009de6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009dee:	81a3      	strh	r3, [r4, #12]
 8009df0:	4632      	mov	r2, r6
 8009df2:	463b      	mov	r3, r7
 8009df4:	4628      	mov	r0, r5
 8009df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dfa:	f000 b817 	b.w	8009e2c <_write_r>

08009dfe <__sseek>:
 8009dfe:	b510      	push	{r4, lr}
 8009e00:	460c      	mov	r4, r1
 8009e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e06:	f000 f855 	bl	8009eb4 <_lseek_r>
 8009e0a:	1c43      	adds	r3, r0, #1
 8009e0c:	89a3      	ldrh	r3, [r4, #12]
 8009e0e:	bf15      	itete	ne
 8009e10:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e1a:	81a3      	strheq	r3, [r4, #12]
 8009e1c:	bf18      	it	ne
 8009e1e:	81a3      	strhne	r3, [r4, #12]
 8009e20:	bd10      	pop	{r4, pc}

08009e22 <__sclose>:
 8009e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e26:	f000 b813 	b.w	8009e50 <_close_r>
	...

08009e2c <_write_r>:
 8009e2c:	b538      	push	{r3, r4, r5, lr}
 8009e2e:	4d07      	ldr	r5, [pc, #28]	; (8009e4c <_write_r+0x20>)
 8009e30:	4604      	mov	r4, r0
 8009e32:	4608      	mov	r0, r1
 8009e34:	4611      	mov	r1, r2
 8009e36:	2200      	movs	r2, #0
 8009e38:	602a      	str	r2, [r5, #0]
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	f000 f9a6 	bl	800a18c <_write>
 8009e40:	1c43      	adds	r3, r0, #1
 8009e42:	d102      	bne.n	8009e4a <_write_r+0x1e>
 8009e44:	682b      	ldr	r3, [r5, #0]
 8009e46:	b103      	cbz	r3, 8009e4a <_write_r+0x1e>
 8009e48:	6023      	str	r3, [r4, #0]
 8009e4a:	bd38      	pop	{r3, r4, r5, pc}
 8009e4c:	20000bd4 	.word	0x20000bd4

08009e50 <_close_r>:
 8009e50:	b538      	push	{r3, r4, r5, lr}
 8009e52:	4d06      	ldr	r5, [pc, #24]	; (8009e6c <_close_r+0x1c>)
 8009e54:	2300      	movs	r3, #0
 8009e56:	4604      	mov	r4, r0
 8009e58:	4608      	mov	r0, r1
 8009e5a:	602b      	str	r3, [r5, #0]
 8009e5c:	f000 f96e 	bl	800a13c <_close>
 8009e60:	1c43      	adds	r3, r0, #1
 8009e62:	d102      	bne.n	8009e6a <_close_r+0x1a>
 8009e64:	682b      	ldr	r3, [r5, #0]
 8009e66:	b103      	cbz	r3, 8009e6a <_close_r+0x1a>
 8009e68:	6023      	str	r3, [r4, #0]
 8009e6a:	bd38      	pop	{r3, r4, r5, pc}
 8009e6c:	20000bd4 	.word	0x20000bd4

08009e70 <_fstat_r>:
 8009e70:	b538      	push	{r3, r4, r5, lr}
 8009e72:	4d07      	ldr	r5, [pc, #28]	; (8009e90 <_fstat_r+0x20>)
 8009e74:	2300      	movs	r3, #0
 8009e76:	4604      	mov	r4, r0
 8009e78:	4608      	mov	r0, r1
 8009e7a:	4611      	mov	r1, r2
 8009e7c:	602b      	str	r3, [r5, #0]
 8009e7e:	f000 f965 	bl	800a14c <_fstat>
 8009e82:	1c43      	adds	r3, r0, #1
 8009e84:	d102      	bne.n	8009e8c <_fstat_r+0x1c>
 8009e86:	682b      	ldr	r3, [r5, #0]
 8009e88:	b103      	cbz	r3, 8009e8c <_fstat_r+0x1c>
 8009e8a:	6023      	str	r3, [r4, #0]
 8009e8c:	bd38      	pop	{r3, r4, r5, pc}
 8009e8e:	bf00      	nop
 8009e90:	20000bd4 	.word	0x20000bd4

08009e94 <_isatty_r>:
 8009e94:	b538      	push	{r3, r4, r5, lr}
 8009e96:	4d06      	ldr	r5, [pc, #24]	; (8009eb0 <_isatty_r+0x1c>)
 8009e98:	2300      	movs	r3, #0
 8009e9a:	4604      	mov	r4, r0
 8009e9c:	4608      	mov	r0, r1
 8009e9e:	602b      	str	r3, [r5, #0]
 8009ea0:	f000 f95c 	bl	800a15c <_isatty>
 8009ea4:	1c43      	adds	r3, r0, #1
 8009ea6:	d102      	bne.n	8009eae <_isatty_r+0x1a>
 8009ea8:	682b      	ldr	r3, [r5, #0]
 8009eaa:	b103      	cbz	r3, 8009eae <_isatty_r+0x1a>
 8009eac:	6023      	str	r3, [r4, #0]
 8009eae:	bd38      	pop	{r3, r4, r5, pc}
 8009eb0:	20000bd4 	.word	0x20000bd4

08009eb4 <_lseek_r>:
 8009eb4:	b538      	push	{r3, r4, r5, lr}
 8009eb6:	4d07      	ldr	r5, [pc, #28]	; (8009ed4 <_lseek_r+0x20>)
 8009eb8:	4604      	mov	r4, r0
 8009eba:	4608      	mov	r0, r1
 8009ebc:	4611      	mov	r1, r2
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	602a      	str	r2, [r5, #0]
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	f000 f952 	bl	800a16c <_lseek>
 8009ec8:	1c43      	adds	r3, r0, #1
 8009eca:	d102      	bne.n	8009ed2 <_lseek_r+0x1e>
 8009ecc:	682b      	ldr	r3, [r5, #0]
 8009ece:	b103      	cbz	r3, 8009ed2 <_lseek_r+0x1e>
 8009ed0:	6023      	str	r3, [r4, #0]
 8009ed2:	bd38      	pop	{r3, r4, r5, pc}
 8009ed4:	20000bd4 	.word	0x20000bd4

08009ed8 <_read_r>:
 8009ed8:	b538      	push	{r3, r4, r5, lr}
 8009eda:	4d07      	ldr	r5, [pc, #28]	; (8009ef8 <_read_r+0x20>)
 8009edc:	4604      	mov	r4, r0
 8009ede:	4608      	mov	r0, r1
 8009ee0:	4611      	mov	r1, r2
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	602a      	str	r2, [r5, #0]
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	f000 f948 	bl	800a17c <_read>
 8009eec:	1c43      	adds	r3, r0, #1
 8009eee:	d102      	bne.n	8009ef6 <_read_r+0x1e>
 8009ef0:	682b      	ldr	r3, [r5, #0]
 8009ef2:	b103      	cbz	r3, 8009ef6 <_read_r+0x1e>
 8009ef4:	6023      	str	r3, [r4, #0]
 8009ef6:	bd38      	pop	{r3, r4, r5, pc}
 8009ef8:	20000bd4 	.word	0x20000bd4

08009efc <expf>:
 8009efc:	b508      	push	{r3, lr}
 8009efe:	ed2d 8b02 	vpush	{d8}
 8009f02:	eef0 8a40 	vmov.f32	s17, s0
 8009f06:	f000 f837 	bl	8009f78 <__ieee754_expf>
 8009f0a:	4b16      	ldr	r3, [pc, #88]	; (8009f64 <expf+0x68>)
 8009f0c:	f993 3000 	ldrsb.w	r3, [r3]
 8009f10:	3301      	adds	r3, #1
 8009f12:	eeb0 8a40 	vmov.f32	s16, s0
 8009f16:	d011      	beq.n	8009f3c <expf+0x40>
 8009f18:	eeb0 0a68 	vmov.f32	s0, s17
 8009f1c:	f000 f900 	bl	800a120 <finitef>
 8009f20:	b160      	cbz	r0, 8009f3c <expf+0x40>
 8009f22:	eddf 7a11 	vldr	s15, [pc, #68]	; 8009f68 <expf+0x6c>
 8009f26:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f2e:	dd0a      	ble.n	8009f46 <expf+0x4a>
 8009f30:	f7fe ffd8 	bl	8008ee4 <__errno>
 8009f34:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8009f6c <expf+0x70>
 8009f38:	2322      	movs	r3, #34	; 0x22
 8009f3a:	6003      	str	r3, [r0, #0]
 8009f3c:	eeb0 0a48 	vmov.f32	s0, s16
 8009f40:	ecbd 8b02 	vpop	{d8}
 8009f44:	bd08      	pop	{r3, pc}
 8009f46:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8009f70 <expf+0x74>
 8009f4a:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f52:	d5f3      	bpl.n	8009f3c <expf+0x40>
 8009f54:	f7fe ffc6 	bl	8008ee4 <__errno>
 8009f58:	2322      	movs	r3, #34	; 0x22
 8009f5a:	ed9f 8a06 	vldr	s16, [pc, #24]	; 8009f74 <expf+0x78>
 8009f5e:	6003      	str	r3, [r0, #0]
 8009f60:	e7ec      	b.n	8009f3c <expf+0x40>
 8009f62:	bf00      	nop
 8009f64:	20000718 	.word	0x20000718
 8009f68:	42b17180 	.word	0x42b17180
 8009f6c:	7f800000 	.word	0x7f800000
 8009f70:	c2cff1b5 	.word	0xc2cff1b5
 8009f74:	00000000 	.word	0x00000000

08009f78 <__ieee754_expf>:
 8009f78:	ee10 2a10 	vmov	r2, s0
 8009f7c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8009f80:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009f84:	d902      	bls.n	8009f8c <__ieee754_expf+0x14>
 8009f86:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009f8a:	4770      	bx	lr
 8009f8c:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8009f90:	d106      	bne.n	8009fa0 <__ieee754_expf+0x28>
 8009f92:	eddf 7a51 	vldr	s15, [pc, #324]	; 800a0d8 <__ieee754_expf+0x160>
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	bf18      	it	ne
 8009f9a:	eeb0 0a67 	vmovne.f32	s0, s15
 8009f9e:	4770      	bx	lr
 8009fa0:	484e      	ldr	r0, [pc, #312]	; (800a0dc <__ieee754_expf+0x164>)
 8009fa2:	4282      	cmp	r2, r0
 8009fa4:	dd04      	ble.n	8009fb0 <__ieee754_expf+0x38>
 8009fa6:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800a0e0 <__ieee754_expf+0x168>
 8009faa:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009fae:	4770      	bx	lr
 8009fb0:	2a00      	cmp	r2, #0
 8009fb2:	da03      	bge.n	8009fbc <__ieee754_expf+0x44>
 8009fb4:	4a4b      	ldr	r2, [pc, #300]	; (800a0e4 <__ieee754_expf+0x16c>)
 8009fb6:	4291      	cmp	r1, r2
 8009fb8:	f200 808a 	bhi.w	800a0d0 <__ieee754_expf+0x158>
 8009fbc:	4a4a      	ldr	r2, [pc, #296]	; (800a0e8 <__ieee754_expf+0x170>)
 8009fbe:	4291      	cmp	r1, r2
 8009fc0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009fc4:	d954      	bls.n	800a070 <__ieee754_expf+0xf8>
 8009fc6:	4a49      	ldr	r2, [pc, #292]	; (800a0ec <__ieee754_expf+0x174>)
 8009fc8:	4291      	cmp	r1, r2
 8009fca:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8009fce:	d836      	bhi.n	800a03e <__ieee754_expf+0xc6>
 8009fd0:	4947      	ldr	r1, [pc, #284]	; (800a0f0 <__ieee754_expf+0x178>)
 8009fd2:	4411      	add	r1, r2
 8009fd4:	ed91 7a00 	vldr	s14, [r1]
 8009fd8:	4946      	ldr	r1, [pc, #280]	; (800a0f4 <__ieee754_expf+0x17c>)
 8009fda:	440a      	add	r2, r1
 8009fdc:	edd2 7a00 	vldr	s15, [r2]
 8009fe0:	ee30 7a47 	vsub.f32	s14, s0, s14
 8009fe4:	f1c3 0201 	rsb	r2, r3, #1
 8009fe8:	1ad2      	subs	r2, r2, r3
 8009fea:	ee37 0a67 	vsub.f32	s0, s14, s15
 8009fee:	ee60 6a00 	vmul.f32	s13, s0, s0
 8009ff2:	eddf 5a41 	vldr	s11, [pc, #260]	; 800a0f8 <__ieee754_expf+0x180>
 8009ff6:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800a0fc <__ieee754_expf+0x184>
 8009ffa:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8009ffe:	eddf 5a40 	vldr	s11, [pc, #256]	; 800a100 <__ieee754_expf+0x188>
 800a002:	eee5 5a26 	vfma.f32	s11, s10, s13
 800a006:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800a104 <__ieee754_expf+0x18c>
 800a00a:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800a00e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800a108 <__ieee754_expf+0x190>
 800a012:	eee5 5a26 	vfma.f32	s11, s10, s13
 800a016:	eeb0 5a40 	vmov.f32	s10, s0
 800a01a:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800a01e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a022:	eef0 6a45 	vmov.f32	s13, s10
 800a026:	ee20 5a05 	vmul.f32	s10, s0, s10
 800a02a:	bb92      	cbnz	r2, 800a092 <__ieee754_expf+0x11a>
 800a02c:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800a030:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800a034:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a038:	ee36 0a40 	vsub.f32	s0, s12, s0
 800a03c:	4770      	bx	lr
 800a03e:	4b33      	ldr	r3, [pc, #204]	; (800a10c <__ieee754_expf+0x194>)
 800a040:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800a110 <__ieee754_expf+0x198>
 800a044:	4413      	add	r3, r2
 800a046:	edd3 7a00 	vldr	s15, [r3]
 800a04a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a04e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800a114 <__ieee754_expf+0x19c>
 800a052:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a056:	ee17 2a90 	vmov	r2, s15
 800a05a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a05e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800a062:	eeb0 7a40 	vmov.f32	s14, s0
 800a066:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800a118 <__ieee754_expf+0x1a0>
 800a06a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a06e:	e7bc      	b.n	8009fea <__ieee754_expf+0x72>
 800a070:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800a074:	d20b      	bcs.n	800a08e <__ieee754_expf+0x116>
 800a076:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800a0e0 <__ieee754_expf+0x168>
 800a07a:	ee70 6a26 	vadd.f32	s13, s0, s13
 800a07e:	eef4 6ac6 	vcmpe.f32	s13, s12
 800a082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a086:	dd02      	ble.n	800a08e <__ieee754_expf+0x116>
 800a088:	ee30 0a06 	vadd.f32	s0, s0, s12
 800a08c:	4770      	bx	lr
 800a08e:	2200      	movs	r2, #0
 800a090:	e7ad      	b.n	8009fee <__ieee754_expf+0x76>
 800a092:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800a096:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800a09a:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800a09e:	bfb8      	it	lt
 800a0a0:	3264      	addlt	r2, #100	; 0x64
 800a0a2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a0a6:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800a0aa:	ee76 7a40 	vsub.f32	s15, s12, s0
 800a0ae:	ee17 3a90 	vmov	r3, s15
 800a0b2:	bfab      	itete	ge
 800a0b4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800a0b8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800a0bc:	ee00 3a10 	vmovge	s0, r3
 800a0c0:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800a11c <__ieee754_expf+0x1a4>
 800a0c4:	bfbc      	itt	lt
 800a0c6:	ee00 3a10 	vmovlt	s0, r3
 800a0ca:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800a0ce:	4770      	bx	lr
 800a0d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a0d8 <__ieee754_expf+0x160>
 800a0d4:	4770      	bx	lr
 800a0d6:	bf00      	nop
 800a0d8:	00000000 	.word	0x00000000
 800a0dc:	42b17217 	.word	0x42b17217
 800a0e0:	7149f2ca 	.word	0x7149f2ca
 800a0e4:	42cff1b5 	.word	0x42cff1b5
 800a0e8:	3eb17218 	.word	0x3eb17218
 800a0ec:	3f851591 	.word	0x3f851591
 800a0f0:	0800b900 	.word	0x0800b900
 800a0f4:	0800b908 	.word	0x0800b908
 800a0f8:	3331bb4c 	.word	0x3331bb4c
 800a0fc:	b5ddea0e 	.word	0xb5ddea0e
 800a100:	388ab355 	.word	0x388ab355
 800a104:	bb360b61 	.word	0xbb360b61
 800a108:	3e2aaaab 	.word	0x3e2aaaab
 800a10c:	0800b8f8 	.word	0x0800b8f8
 800a110:	3fb8aa3b 	.word	0x3fb8aa3b
 800a114:	3f317180 	.word	0x3f317180
 800a118:	3717f7d1 	.word	0x3717f7d1
 800a11c:	0d800000 	.word	0x0d800000

0800a120 <finitef>:
 800a120:	b082      	sub	sp, #8
 800a122:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a126:	9801      	ldr	r0, [sp, #4]
 800a128:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a12c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800a130:	bfac      	ite	ge
 800a132:	2000      	movge	r0, #0
 800a134:	2001      	movlt	r0, #1
 800a136:	b002      	add	sp, #8
 800a138:	4770      	bx	lr
	...

0800a13c <_close>:
 800a13c:	4b02      	ldr	r3, [pc, #8]	; (800a148 <_close+0xc>)
 800a13e:	2258      	movs	r2, #88	; 0x58
 800a140:	601a      	str	r2, [r3, #0]
 800a142:	f04f 30ff 	mov.w	r0, #4294967295
 800a146:	4770      	bx	lr
 800a148:	20000bd4 	.word	0x20000bd4

0800a14c <_fstat>:
 800a14c:	4b02      	ldr	r3, [pc, #8]	; (800a158 <_fstat+0xc>)
 800a14e:	2258      	movs	r2, #88	; 0x58
 800a150:	601a      	str	r2, [r3, #0]
 800a152:	f04f 30ff 	mov.w	r0, #4294967295
 800a156:	4770      	bx	lr
 800a158:	20000bd4 	.word	0x20000bd4

0800a15c <_isatty>:
 800a15c:	4b02      	ldr	r3, [pc, #8]	; (800a168 <_isatty+0xc>)
 800a15e:	2258      	movs	r2, #88	; 0x58
 800a160:	601a      	str	r2, [r3, #0]
 800a162:	2000      	movs	r0, #0
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	20000bd4 	.word	0x20000bd4

0800a16c <_lseek>:
 800a16c:	4b02      	ldr	r3, [pc, #8]	; (800a178 <_lseek+0xc>)
 800a16e:	2258      	movs	r2, #88	; 0x58
 800a170:	601a      	str	r2, [r3, #0]
 800a172:	f04f 30ff 	mov.w	r0, #4294967295
 800a176:	4770      	bx	lr
 800a178:	20000bd4 	.word	0x20000bd4

0800a17c <_read>:
 800a17c:	4b02      	ldr	r3, [pc, #8]	; (800a188 <_read+0xc>)
 800a17e:	2258      	movs	r2, #88	; 0x58
 800a180:	601a      	str	r2, [r3, #0]
 800a182:	f04f 30ff 	mov.w	r0, #4294967295
 800a186:	4770      	bx	lr
 800a188:	20000bd4 	.word	0x20000bd4

0800a18c <_write>:
 800a18c:	4b02      	ldr	r3, [pc, #8]	; (800a198 <_write+0xc>)
 800a18e:	2258      	movs	r2, #88	; 0x58
 800a190:	601a      	str	r2, [r3, #0]
 800a192:	f04f 30ff 	mov.w	r0, #4294967295
 800a196:	4770      	bx	lr
 800a198:	20000bd4 	.word	0x20000bd4

0800a19c <_init>:
 800a19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19e:	bf00      	nop
 800a1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1a2:	bc08      	pop	{r3}
 800a1a4:	469e      	mov	lr, r3
 800a1a6:	4770      	bx	lr

0800a1a8 <_fini>:
 800a1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1aa:	bf00      	nop
 800a1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ae:	bc08      	pop	{r3}
 800a1b0:	469e      	mov	lr, r3
 800a1b2:	4770      	bx	lr
